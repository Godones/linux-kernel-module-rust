/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EFAULT: u32 = 14;
pub const EINVAL: u32 = 22;
pub const ESPIPE: u32 = 29;
pub const KERN_INFO: &[u8; 3] = b"\x016\0";
pub const O_NONBLOCK: u32 = 2048;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const FS_REQUIRES_DEV: u32 = 1;
pub const FS_BINARY_MOUNTDATA: u32 = 2;
pub const FS_HAS_SUBTYPE: u32 = 4;
pub const FS_USERNS_MOUNT: u32 = 8;
pub const FS_RENAME_DOES_D_MOVE: u32 = 32768;
pub const LINUX_VERSION_CODE: u32 = 393493;
pub type __s8 = core::ffi::c_schar;
pub type __u8 = core::ffi::c_uchar;
pub type __s16 = core::ffi::c_short;
pub type __u16 = core::ffi::c_ushort;
pub type __s32 = core::ffi::c_int;
pub type __u32 = core::ffi::c_uint;
pub type __s64 = core::ffi::c_longlong;
pub type __u64 = core::ffi::c_ulonglong;
pub type s8 = __s8;
pub type u8_ = __u8;
pub type s16 = __s16;
pub type u16_ = __u16;
pub type s32 = __s32;
pub type u32_ = __u32;
pub type s64 = __s64;
pub type u64_ = __u64;
pub type __kernel_long_t = core::ffi::c_long;
pub type __kernel_ulong_t = core::ffi::c_ulong;
pub type __kernel_mode_t = core::ffi::c_uint;
pub type __kernel_pid_t = core::ffi::c_int;
pub type __kernel_uid32_t = core::ffi::c_uint;
pub type __kernel_gid32_t = core::ffi::c_uint;
pub type __kernel_loff_t = core::ffi::c_longlong;
pub type __kernel_time64_t = core::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = core::ffi::c_int;
pub type __kernel_clockid_t = core::ffi::c_int;
pub type __poll_t = core::ffi::c_uint;
pub type __kernel_dev_t = u32_;
pub type dev_t = __kernel_dev_t;
pub type mode_t = __kernel_mode_t;
pub type umode_t = core::ffi::c_ushort;
pub type pid_t = __kernel_pid_t;
pub type clockid_t = __kernel_clockid_t;
pub type bool_ = bool;
pub type uid_t = __kernel_uid32_t;
pub type gid_t = __kernel_gid32_t;
pub type loff_t = __kernel_loff_t;
#[doc = " The type used for indexing onto a disc or disc partition.\n\n Linux always considers sectors to be 512 bytes long independently\n of the devices real block size.\n\n blkcnt_t is the type of the inode's block count."]
pub type sector_t = u64_;
pub type blkcnt_t = u64_;
pub type gfp_t = core::ffi::c_uint;
pub type fmode_t = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct atomic_t {
    pub counter: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic_t"][::core::mem::size_of::<atomic_t>() - 4usize];
    ["Alignment of atomic_t"][::core::mem::align_of::<atomic_t>() - 4usize];
    ["Offset of field: atomic_t::counter"][::core::mem::offset_of!(atomic_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct atomic64_t {
    pub counter: s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic64_t"][::core::mem::size_of::<atomic64_t>() - 8usize];
    ["Alignment of atomic64_t"][::core::mem::align_of::<atomic64_t>() - 8usize];
    ["Offset of field: atomic64_t::counter"][::core::mem::offset_of!(atomic64_t, counter) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_head"][::core::mem::size_of::<list_head>() - 16usize];
    ["Alignment of list_head"][::core::mem::align_of::<list_head>() - 8usize];
    ["Offset of field: list_head::next"][::core::mem::offset_of!(list_head, next) - 0usize];
    ["Offset of field: list_head::prev"][::core::mem::offset_of!(list_head, prev) - 8usize];
};
impl Default for list_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_head {
    pub first: *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_head"][::core::mem::size_of::<hlist_head>() - 8usize];
    ["Alignment of hlist_head"][::core::mem::align_of::<hlist_head>() - 8usize];
    ["Offset of field: hlist_head::first"][::core::mem::offset_of!(hlist_head, first) - 0usize];
};
impl Default for hlist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_node {
    pub next: *mut hlist_node,
    pub pprev: *mut *mut hlist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_node"][::core::mem::size_of::<hlist_node>() - 16usize];
    ["Alignment of hlist_node"][::core::mem::align_of::<hlist_node>() - 8usize];
    ["Offset of field: hlist_node::next"][::core::mem::offset_of!(hlist_node, next) - 0usize];
    ["Offset of field: hlist_node::pprev"][::core::mem::offset_of!(hlist_node, pprev) - 8usize];
};
impl Default for hlist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct callback_head - callback structure for use with RCU and task_work\n @next: next update requests in a list\n @func: actual update function to call after the grace period.\n\n The struct is aligned to size of pointer. On most architectures it happens\n naturally due ABI requirements, but some architectures (like CRIS) have\n weird ABI and we need to ask it explicitly.\n\n The alignment is required to guarantee that bit 0 of @next will be\n clear under normal conditions -- as long as we use call_rcu() or\n call_srcu() to queue the callback.\n\n This guarantee is important for few reasons:\n  - future call_rcu_lazy() will make use of lower bits in the pointer;\n  - the structure shares storage space in struct page with @compound_head,\n    which encode PageTail() in bit 0. The guarantee is needed to avoid\n    false-positive PageTail()."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct callback_head {
    pub next: *mut callback_head,
    pub func: ::core::option::Option<unsafe extern "C" fn(head: *mut callback_head)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of callback_head"][::core::mem::size_of::<callback_head>() - 16usize];
    ["Alignment of callback_head"][::core::mem::align_of::<callback_head>() - 8usize];
    ["Offset of field: callback_head::next"][::core::mem::offset_of!(callback_head, next) - 0usize];
    ["Offset of field: callback_head::func"][::core::mem::offset_of!(callback_head, func) - 8usize];
};
impl Default for callback_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct module {
    pub state: module_state,
    pub list: list_head,
    pub name: [core::ffi::c_char; 56usize],
    pub mkobj: module_kobject,
    pub modinfo_attrs: *mut module_attribute,
    pub version: *const core::ffi::c_char,
    pub srcversion: *const core::ffi::c_char,
    pub holders_dir: *mut kobject,
    pub syms: *const kernel_symbol,
    pub crcs: *const s32,
    pub num_syms: core::ffi::c_uint,
    pub param_lock: mutex,
    pub kp: *mut kernel_param,
    pub num_kp: core::ffi::c_uint,
    pub num_gpl_syms: core::ffi::c_uint,
    pub gpl_syms: *const kernel_symbol,
    pub gpl_crcs: *const s32,
    pub using_gplonly_symbols: bool_,
    pub async_probe_requested: bool_,
    pub num_exentries: core::ffi::c_uint,
    pub extable: *mut exception_table_entry,
    pub init: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub core_layout: module_layout,
    pub init_layout: module_layout,
    pub arch: mod_arch_specific,
    pub taints: core::ffi::c_ulong,
    pub num_bugs: core::ffi::c_uint,
    pub bug_list: list_head,
    pub bug_table: *mut bug_entry,
    pub kallsyms: *mut mod_kallsyms,
    pub core_kallsyms: mod_kallsyms,
    pub sect_attrs: *mut module_sect_attrs,
    pub notes_attrs: *mut module_notes_attrs,
    pub args: *mut core::ffi::c_char,
    pub percpu: *mut core::ffi::c_void,
    pub percpu_size: core::ffi::c_uint,
    pub noinstr_text_start: *mut core::ffi::c_void,
    pub noinstr_text_size: core::ffi::c_uint,
    pub num_tracepoints: core::ffi::c_uint,
    pub tracepoints_ptrs: *const core::ffi::c_int,
    pub num_srcu_structs: core::ffi::c_uint,
    pub srcu_struct_ptrs: *mut *mut srcu_struct,
    pub num_bpf_raw_events: core::ffi::c_uint,
    pub bpf_raw_events: *mut bpf_raw_event_map,
    pub btf_data_size: core::ffi::c_uint,
    pub btf_data: *mut core::ffi::c_void,
    pub jump_entries: *mut jump_entry,
    pub num_jump_entries: core::ffi::c_uint,
    pub num_trace_bprintk_fmt: core::ffi::c_uint,
    pub trace_bprintk_fmt_start: *mut *const core::ffi::c_char,
    pub trace_events: *mut *mut trace_event_call,
    pub num_trace_events: core::ffi::c_uint,
    pub trace_evals: *mut *mut trace_eval_map,
    pub num_trace_evals: core::ffi::c_uint,
    pub num_ftrace_callsites: core::ffi::c_uint,
    pub ftrace_callsites: *mut core::ffi::c_ulong,
    pub kprobes_text_start: *mut core::ffi::c_void,
    pub kprobes_text_size: core::ffi::c_uint,
    pub kprobe_blacklist: *mut core::ffi::c_ulong,
    pub num_kprobe_blacklist: core::ffi::c_uint,
    pub num_static_call_sites: core::ffi::c_int,
    pub static_call_sites: *mut static_call_site,
    pub source_list: list_head,
    pub target_list: list_head,
    pub exit: ::core::option::Option<unsafe extern "C" fn()>,
    pub refcnt: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module"][::core::mem::size_of::<module>() - 896usize];
    ["Alignment of module"][::core::mem::align_of::<module>() - 64usize];
    ["Offset of field: module::state"][::core::mem::offset_of!(module, state) - 0usize];
    ["Offset of field: module::list"][::core::mem::offset_of!(module, list) - 8usize];
    ["Offset of field: module::name"][::core::mem::offset_of!(module, name) - 24usize];
    ["Offset of field: module::mkobj"][::core::mem::offset_of!(module, mkobj) - 80usize];
    ["Offset of field: module::modinfo_attrs"]
        [::core::mem::offset_of!(module, modinfo_attrs) - 176usize];
    ["Offset of field: module::version"][::core::mem::offset_of!(module, version) - 184usize];
    ["Offset of field: module::srcversion"][::core::mem::offset_of!(module, srcversion) - 192usize];
    ["Offset of field: module::holders_dir"]
        [::core::mem::offset_of!(module, holders_dir) - 200usize];
    ["Offset of field: module::syms"][::core::mem::offset_of!(module, syms) - 208usize];
    ["Offset of field: module::crcs"][::core::mem::offset_of!(module, crcs) - 216usize];
    ["Offset of field: module::num_syms"][::core::mem::offset_of!(module, num_syms) - 224usize];
    ["Offset of field: module::param_lock"][::core::mem::offset_of!(module, param_lock) - 232usize];
    ["Offset of field: module::kp"][::core::mem::offset_of!(module, kp) - 264usize];
    ["Offset of field: module::num_kp"][::core::mem::offset_of!(module, num_kp) - 272usize];
    ["Offset of field: module::num_gpl_syms"]
        [::core::mem::offset_of!(module, num_gpl_syms) - 276usize];
    ["Offset of field: module::gpl_syms"][::core::mem::offset_of!(module, gpl_syms) - 280usize];
    ["Offset of field: module::gpl_crcs"][::core::mem::offset_of!(module, gpl_crcs) - 288usize];
    ["Offset of field: module::using_gplonly_symbols"]
        [::core::mem::offset_of!(module, using_gplonly_symbols) - 296usize];
    ["Offset of field: module::async_probe_requested"]
        [::core::mem::offset_of!(module, async_probe_requested) - 297usize];
    ["Offset of field: module::num_exentries"]
        [::core::mem::offset_of!(module, num_exentries) - 300usize];
    ["Offset of field: module::extable"][::core::mem::offset_of!(module, extable) - 304usize];
    ["Offset of field: module::init"][::core::mem::offset_of!(module, init) - 312usize];
    ["Offset of field: module::core_layout"]
        [::core::mem::offset_of!(module, core_layout) - 320usize];
    ["Offset of field: module::init_layout"]
        [::core::mem::offset_of!(module, init_layout) - 400usize];
    ["Offset of field: module::arch"][::core::mem::offset_of!(module, arch) - 480usize];
    ["Offset of field: module::taints"][::core::mem::offset_of!(module, taints) - 504usize];
    ["Offset of field: module::num_bugs"][::core::mem::offset_of!(module, num_bugs) - 512usize];
    ["Offset of field: module::bug_list"][::core::mem::offset_of!(module, bug_list) - 520usize];
    ["Offset of field: module::bug_table"][::core::mem::offset_of!(module, bug_table) - 536usize];
    ["Offset of field: module::kallsyms"][::core::mem::offset_of!(module, kallsyms) - 544usize];
    ["Offset of field: module::core_kallsyms"]
        [::core::mem::offset_of!(module, core_kallsyms) - 552usize];
    ["Offset of field: module::sect_attrs"][::core::mem::offset_of!(module, sect_attrs) - 584usize];
    ["Offset of field: module::notes_attrs"]
        [::core::mem::offset_of!(module, notes_attrs) - 592usize];
    ["Offset of field: module::args"][::core::mem::offset_of!(module, args) - 600usize];
    ["Offset of field: module::percpu"][::core::mem::offset_of!(module, percpu) - 608usize];
    ["Offset of field: module::percpu_size"]
        [::core::mem::offset_of!(module, percpu_size) - 616usize];
    ["Offset of field: module::noinstr_text_start"]
        [::core::mem::offset_of!(module, noinstr_text_start) - 624usize];
    ["Offset of field: module::noinstr_text_size"]
        [::core::mem::offset_of!(module, noinstr_text_size) - 632usize];
    ["Offset of field: module::num_tracepoints"]
        [::core::mem::offset_of!(module, num_tracepoints) - 636usize];
    ["Offset of field: module::tracepoints_ptrs"]
        [::core::mem::offset_of!(module, tracepoints_ptrs) - 640usize];
    ["Offset of field: module::num_srcu_structs"]
        [::core::mem::offset_of!(module, num_srcu_structs) - 648usize];
    ["Offset of field: module::srcu_struct_ptrs"]
        [::core::mem::offset_of!(module, srcu_struct_ptrs) - 656usize];
    ["Offset of field: module::num_bpf_raw_events"]
        [::core::mem::offset_of!(module, num_bpf_raw_events) - 664usize];
    ["Offset of field: module::bpf_raw_events"]
        [::core::mem::offset_of!(module, bpf_raw_events) - 672usize];
    ["Offset of field: module::btf_data_size"]
        [::core::mem::offset_of!(module, btf_data_size) - 680usize];
    ["Offset of field: module::btf_data"][::core::mem::offset_of!(module, btf_data) - 688usize];
    ["Offset of field: module::jump_entries"]
        [::core::mem::offset_of!(module, jump_entries) - 696usize];
    ["Offset of field: module::num_jump_entries"]
        [::core::mem::offset_of!(module, num_jump_entries) - 704usize];
    ["Offset of field: module::num_trace_bprintk_fmt"]
        [::core::mem::offset_of!(module, num_trace_bprintk_fmt) - 708usize];
    ["Offset of field: module::trace_bprintk_fmt_start"]
        [::core::mem::offset_of!(module, trace_bprintk_fmt_start) - 712usize];
    ["Offset of field: module::trace_events"]
        [::core::mem::offset_of!(module, trace_events) - 720usize];
    ["Offset of field: module::num_trace_events"]
        [::core::mem::offset_of!(module, num_trace_events) - 728usize];
    ["Offset of field: module::trace_evals"]
        [::core::mem::offset_of!(module, trace_evals) - 736usize];
    ["Offset of field: module::num_trace_evals"]
        [::core::mem::offset_of!(module, num_trace_evals) - 744usize];
    ["Offset of field: module::num_ftrace_callsites"]
        [::core::mem::offset_of!(module, num_ftrace_callsites) - 748usize];
    ["Offset of field: module::ftrace_callsites"]
        [::core::mem::offset_of!(module, ftrace_callsites) - 752usize];
    ["Offset of field: module::kprobes_text_start"]
        [::core::mem::offset_of!(module, kprobes_text_start) - 760usize];
    ["Offset of field: module::kprobes_text_size"]
        [::core::mem::offset_of!(module, kprobes_text_size) - 768usize];
    ["Offset of field: module::kprobe_blacklist"]
        [::core::mem::offset_of!(module, kprobe_blacklist) - 776usize];
    ["Offset of field: module::num_kprobe_blacklist"]
        [::core::mem::offset_of!(module, num_kprobe_blacklist) - 784usize];
    ["Offset of field: module::num_static_call_sites"]
        [::core::mem::offset_of!(module, num_static_call_sites) - 788usize];
    ["Offset of field: module::static_call_sites"]
        [::core::mem::offset_of!(module, static_call_sites) - 792usize];
    ["Offset of field: module::source_list"]
        [::core::mem::offset_of!(module, source_list) - 800usize];
    ["Offset of field: module::target_list"]
        [::core::mem::offset_of!(module, target_list) - 816usize];
    ["Offset of field: module::exit"][::core::mem::offset_of!(module, exit) - 832usize];
    ["Offset of field: module::refcnt"][::core::mem::offset_of!(module, refcnt) - 840usize];
};
impl Default for module {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mut __this_module: module;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernel_symbol {
    pub value_offset: core::ffi::c_int,
    pub name_offset: core::ffi::c_int,
    pub namespace_offset: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_symbol"][::core::mem::size_of::<kernel_symbol>() - 12usize];
    ["Alignment of kernel_symbol"][::core::mem::align_of::<kernel_symbol>() - 4usize];
    ["Offset of field: kernel_symbol::value_offset"]
        [::core::mem::offset_of!(kernel_symbol, value_offset) - 0usize];
    ["Offset of field: kernel_symbol::name_offset"]
        [::core::mem::offset_of!(kernel_symbol, name_offset) - 4usize];
    ["Offset of field: kernel_symbol::namespace_offset"]
        [::core::mem::offset_of!(kernel_symbol, namespace_offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_system_type {
    pub name: *const core::ffi::c_char,
    pub fs_flags: core::ffi::c_int,
    pub init_fs_context:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut fs_context) -> core::ffi::c_int>,
    pub parameters: *const fs_parameter_spec,
    pub mount: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file_system_type,
            arg2: core::ffi::c_int,
            arg3: *const core::ffi::c_char,
            arg4: *mut core::ffi::c_void,
        ) -> *mut dentry,
    >,
    pub kill_sb: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub owner: *mut module,
    pub next: *mut file_system_type,
    pub fs_supers: hlist_head,
    pub s_lock_key: lock_class_key,
    pub s_umount_key: lock_class_key,
    pub s_vfs_rename_key: lock_class_key,
    pub s_writers_key: [lock_class_key; 3usize],
    pub i_lock_key: lock_class_key,
    pub i_mutex_key: lock_class_key,
    pub invalidate_lock_key: lock_class_key,
    pub i_mutex_dir_key: lock_class_key,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_system_type"][::core::mem::size_of::<file_system_type>() - 72usize];
    ["Alignment of file_system_type"][::core::mem::align_of::<file_system_type>() - 8usize];
    ["Offset of field: file_system_type::name"]
        [::core::mem::offset_of!(file_system_type, name) - 0usize];
    ["Offset of field: file_system_type::fs_flags"]
        [::core::mem::offset_of!(file_system_type, fs_flags) - 8usize];
    ["Offset of field: file_system_type::init_fs_context"]
        [::core::mem::offset_of!(file_system_type, init_fs_context) - 16usize];
    ["Offset of field: file_system_type::parameters"]
        [::core::mem::offset_of!(file_system_type, parameters) - 24usize];
    ["Offset of field: file_system_type::mount"]
        [::core::mem::offset_of!(file_system_type, mount) - 32usize];
    ["Offset of field: file_system_type::kill_sb"]
        [::core::mem::offset_of!(file_system_type, kill_sb) - 40usize];
    ["Offset of field: file_system_type::owner"]
        [::core::mem::offset_of!(file_system_type, owner) - 48usize];
    ["Offset of field: file_system_type::next"]
        [::core::mem::offset_of!(file_system_type, next) - 56usize];
    ["Offset of field: file_system_type::fs_supers"]
        [::core::mem::offset_of!(file_system_type, fs_supers) - 64usize];
    ["Offset of field: file_system_type::s_lock_key"]
        [::core::mem::offset_of!(file_system_type, s_lock_key) - 72usize];
    ["Offset of field: file_system_type::s_umount_key"]
        [::core::mem::offset_of!(file_system_type, s_umount_key) - 72usize];
    ["Offset of field: file_system_type::s_vfs_rename_key"]
        [::core::mem::offset_of!(file_system_type, s_vfs_rename_key) - 72usize];
    ["Offset of field: file_system_type::s_writers_key"]
        [::core::mem::offset_of!(file_system_type, s_writers_key) - 72usize];
    ["Offset of field: file_system_type::i_lock_key"]
        [::core::mem::offset_of!(file_system_type, i_lock_key) - 72usize];
    ["Offset of field: file_system_type::i_mutex_key"]
        [::core::mem::offset_of!(file_system_type, i_mutex_key) - 72usize];
    ["Offset of field: file_system_type::invalidate_lock_key"]
        [::core::mem::offset_of!(file_system_type, invalidate_lock_key) - 72usize];
    ["Offset of field: file_system_type::i_mutex_dir_key"]
        [::core::mem::offset_of!(file_system_type, i_mutex_dir_key) - 72usize];
};
impl Default for file_system_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qspinlock {
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qspinlock__bindgen_ty_1 {
    pub val: atomic_t,
    pub __bindgen_anon_1: qspinlock__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: qspinlock__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_1 {
    pub locked: u8_,
    pub pending: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::locked"]
        [::core::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, locked) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_1::pending"]
        [::core::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_1, pending) - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qspinlock__bindgen_ty_1__bindgen_ty_2 {
    pub locked_pending: u16_,
    pub tail: u16_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<qspinlock__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::locked_pending"]
        [::core::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, locked_pending) - 0usize];
    ["Offset of field: qspinlock__bindgen_ty_1__bindgen_ty_2::tail"]
        [::core::mem::offset_of!(qspinlock__bindgen_ty_1__bindgen_ty_2, tail) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock__bindgen_ty_1"][::core::mem::size_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qspinlock__bindgen_ty_1"]
        [::core::mem::align_of::<qspinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qspinlock__bindgen_ty_1::val"]
        [::core::mem::offset_of!(qspinlock__bindgen_ty_1, val) - 0usize];
};
impl Default for qspinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qspinlock"][::core::mem::size_of::<qspinlock>() - 4usize];
    ["Alignment of qspinlock"][::core::mem::align_of::<qspinlock>() - 4usize];
};
impl Default for qspinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_spinlock_t = qspinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qrwlock {
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1,
    pub wait_lock: arch_spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qrwlock__bindgen_ty_1 {
    pub cnts: atomic_t,
    pub __bindgen_anon_1: qrwlock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qrwlock__bindgen_ty_1__bindgen_ty_1 {
    pub wlocked: u8_,
    pub __lstate: [u8_; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<qrwlock__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::wlocked"]
        [::core::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, wlocked) - 0usize];
    ["Offset of field: qrwlock__bindgen_ty_1__bindgen_ty_1::__lstate"]
        [::core::mem::offset_of!(qrwlock__bindgen_ty_1__bindgen_ty_1, __lstate) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock__bindgen_ty_1"][::core::mem::size_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Alignment of qrwlock__bindgen_ty_1"]
        [::core::mem::align_of::<qrwlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: qrwlock__bindgen_ty_1::cnts"]
        [::core::mem::offset_of!(qrwlock__bindgen_ty_1, cnts) - 0usize];
};
impl Default for qrwlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qrwlock"][::core::mem::size_of::<qrwlock>() - 8usize];
    ["Alignment of qrwlock"][::core::mem::align_of::<qrwlock>() - 4usize];
    ["Offset of field: qrwlock::wait_lock"][::core::mem::offset_of!(qrwlock, wait_lock) - 4usize];
};
impl Default for qrwlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type arch_rwlock_t = qrwlock;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lock_class_key {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lock_class_key"][::core::mem::size_of::<lock_class_key>() - 0usize];
    ["Alignment of lock_class_key"][::core::mem::align_of::<lock_class_key>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lockdep_map {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockdep_map"][::core::mem::size_of::<lockdep_map>() - 0usize];
    ["Alignment of lockdep_map"][::core::mem::align_of::<lockdep_map>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct raw_spinlock {
    pub raw_lock: arch_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of raw_spinlock"][::core::mem::size_of::<raw_spinlock>() - 4usize];
    ["Alignment of raw_spinlock"][::core::mem::align_of::<raw_spinlock>() - 4usize];
    ["Offset of field: raw_spinlock::raw_lock"]
        [::core::mem::offset_of!(raw_spinlock, raw_lock) - 0usize];
};
impl Default for raw_spinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type raw_spinlock_t = raw_spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ratelimit_state {
    pub lock: raw_spinlock_t,
    pub interval: core::ffi::c_int,
    pub burst: core::ffi::c_int,
    pub printed: core::ffi::c_int,
    pub missed: core::ffi::c_int,
    pub begin: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ratelimit_state"][::core::mem::size_of::<ratelimit_state>() - 40usize];
    ["Alignment of ratelimit_state"][::core::mem::align_of::<ratelimit_state>() - 8usize];
    ["Offset of field: ratelimit_state::lock"]
        [::core::mem::offset_of!(ratelimit_state, lock) - 0usize];
    ["Offset of field: ratelimit_state::interval"]
        [::core::mem::offset_of!(ratelimit_state, interval) - 4usize];
    ["Offset of field: ratelimit_state::burst"]
        [::core::mem::offset_of!(ratelimit_state, burst) - 8usize];
    ["Offset of field: ratelimit_state::printed"]
        [::core::mem::offset_of!(ratelimit_state, printed) - 12usize];
    ["Offset of field: ratelimit_state::missed"]
        [::core::mem::offset_of!(ratelimit_state, missed) - 16usize];
    ["Offset of field: ratelimit_state::begin"]
        [::core::mem::offset_of!(ratelimit_state, begin) - 24usize];
    ["Offset of field: ratelimit_state::flags"]
        [::core::mem::offset_of!(ratelimit_state, flags) - 32usize];
};
impl Default for ratelimit_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_operations {
    pub owner: *mut module,
    pub llseek: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: loff_t, arg3: core::ffi::c_int) -> loff_t,
    >,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *const core::ffi::c_char,
            arg3: usize,
            arg4: *mut loff_t,
        ) -> isize,
    >,
    pub read_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub write_iter: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, arg2: *mut iov_iter) -> isize,
    >,
    pub iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            kiocb: *mut kiocb,
            arg1: *mut io_comp_batch,
            flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub iterate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
    >,
    pub iterate_shared: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut dir_context) -> core::ffi::c_int,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut poll_table_struct) -> __poll_t,
    >,
    pub unlocked_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub compat_ioctl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_uint,
            arg3: core::ffi::c_ulong,
        ) -> core::ffi::c_long,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut vm_area_struct) -> core::ffi::c_int,
    >,
    pub mmap_supported_flags: core::ffi::c_ulong,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub flush: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, id: fl_owner_t) -> core::ffi::c_int,
    >,
    pub release: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut file) -> core::ffi::c_int,
    >,
    pub fsync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            datasync: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fasync: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: core::ffi::c_int,
            arg2: *mut file,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub lock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub sendpage: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut page,
            arg3: core::ffi::c_int,
            arg4: usize,
            arg5: *mut loff_t,
            arg6: core::ffi::c_int,
        ) -> isize,
    >,
    pub get_unmapped_area: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_ulong,
            arg3: core::ffi::c_ulong,
            arg4: core::ffi::c_ulong,
            arg5: core::ffi::c_ulong,
        ) -> core::ffi::c_ulong,
    >,
    pub check_flags:
        ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int) -> core::ffi::c_int>,
    pub flock: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_int,
            arg3: *mut file_lock,
        ) -> core::ffi::c_int,
    >,
    pub splice_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut pipe_inode_info,
            arg2: *mut file,
            arg3: *mut loff_t,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub splice_read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut loff_t,
            arg3: *mut pipe_inode_info,
            arg4: usize,
            arg5: core::ffi::c_uint,
        ) -> isize,
    >,
    pub setlease: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: core::ffi::c_long,
            arg3: *mut *mut file_lock,
            arg4: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub fallocate: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut file,
            mode: core::ffi::c_int,
            offset: loff_t,
            len: loff_t,
        ) -> core::ffi::c_long,
    >,
    pub show_fdinfo: ::core::option::Option<unsafe extern "C" fn(m: *mut seq_file, f: *mut file)>,
    pub copy_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: *mut file,
            arg4: loff_t,
            arg5: usize,
            arg6: core::ffi::c_uint,
        ) -> isize,
    >,
    pub remap_file_range: ::core::option::Option<
        unsafe extern "C" fn(
            file_in: *mut file,
            pos_in: loff_t,
            file_out: *mut file,
            pos_out: loff_t,
            len: loff_t,
            remap_flags: core::ffi::c_uint,
        ) -> loff_t,
    >,
    pub fadvise: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: loff_t,
            arg3: loff_t,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd: ::core::option::Option<
        unsafe extern "C" fn(
            ioucmd: *mut io_uring_cmd,
            issue_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub uring_cmd_iopoll: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut io_uring_cmd,
            arg2: *mut io_comp_batch,
            poll_flags: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_operations"][::core::mem::size_of::<file_operations>() - 272usize];
    ["Alignment of file_operations"][::core::mem::align_of::<file_operations>() - 8usize];
    ["Offset of field: file_operations::owner"]
        [::core::mem::offset_of!(file_operations, owner) - 0usize];
    ["Offset of field: file_operations::llseek"]
        [::core::mem::offset_of!(file_operations, llseek) - 8usize];
    ["Offset of field: file_operations::read"]
        [::core::mem::offset_of!(file_operations, read) - 16usize];
    ["Offset of field: file_operations::write"]
        [::core::mem::offset_of!(file_operations, write) - 24usize];
    ["Offset of field: file_operations::read_iter"]
        [::core::mem::offset_of!(file_operations, read_iter) - 32usize];
    ["Offset of field: file_operations::write_iter"]
        [::core::mem::offset_of!(file_operations, write_iter) - 40usize];
    ["Offset of field: file_operations::iopoll"]
        [::core::mem::offset_of!(file_operations, iopoll) - 48usize];
    ["Offset of field: file_operations::iterate"]
        [::core::mem::offset_of!(file_operations, iterate) - 56usize];
    ["Offset of field: file_operations::iterate_shared"]
        [::core::mem::offset_of!(file_operations, iterate_shared) - 64usize];
    ["Offset of field: file_operations::poll"]
        [::core::mem::offset_of!(file_operations, poll) - 72usize];
    ["Offset of field: file_operations::unlocked_ioctl"]
        [::core::mem::offset_of!(file_operations, unlocked_ioctl) - 80usize];
    ["Offset of field: file_operations::compat_ioctl"]
        [::core::mem::offset_of!(file_operations, compat_ioctl) - 88usize];
    ["Offset of field: file_operations::mmap"]
        [::core::mem::offset_of!(file_operations, mmap) - 96usize];
    ["Offset of field: file_operations::mmap_supported_flags"]
        [::core::mem::offset_of!(file_operations, mmap_supported_flags) - 104usize];
    ["Offset of field: file_operations::open"]
        [::core::mem::offset_of!(file_operations, open) - 112usize];
    ["Offset of field: file_operations::flush"]
        [::core::mem::offset_of!(file_operations, flush) - 120usize];
    ["Offset of field: file_operations::release"]
        [::core::mem::offset_of!(file_operations, release) - 128usize];
    ["Offset of field: file_operations::fsync"]
        [::core::mem::offset_of!(file_operations, fsync) - 136usize];
    ["Offset of field: file_operations::fasync"]
        [::core::mem::offset_of!(file_operations, fasync) - 144usize];
    ["Offset of field: file_operations::lock"]
        [::core::mem::offset_of!(file_operations, lock) - 152usize];
    ["Offset of field: file_operations::sendpage"]
        [::core::mem::offset_of!(file_operations, sendpage) - 160usize];
    ["Offset of field: file_operations::get_unmapped_area"]
        [::core::mem::offset_of!(file_operations, get_unmapped_area) - 168usize];
    ["Offset of field: file_operations::check_flags"]
        [::core::mem::offset_of!(file_operations, check_flags) - 176usize];
    ["Offset of field: file_operations::flock"]
        [::core::mem::offset_of!(file_operations, flock) - 184usize];
    ["Offset of field: file_operations::splice_write"]
        [::core::mem::offset_of!(file_operations, splice_write) - 192usize];
    ["Offset of field: file_operations::splice_read"]
        [::core::mem::offset_of!(file_operations, splice_read) - 200usize];
    ["Offset of field: file_operations::setlease"]
        [::core::mem::offset_of!(file_operations, setlease) - 208usize];
    ["Offset of field: file_operations::fallocate"]
        [::core::mem::offset_of!(file_operations, fallocate) - 216usize];
    ["Offset of field: file_operations::show_fdinfo"]
        [::core::mem::offset_of!(file_operations, show_fdinfo) - 224usize];
    ["Offset of field: file_operations::copy_file_range"]
        [::core::mem::offset_of!(file_operations, copy_file_range) - 232usize];
    ["Offset of field: file_operations::remap_file_range"]
        [::core::mem::offset_of!(file_operations, remap_file_range) - 240usize];
    ["Offset of field: file_operations::fadvise"]
        [::core::mem::offset_of!(file_operations, fadvise) - 248usize];
    ["Offset of field: file_operations::uring_cmd"]
        [::core::mem::offset_of!(file_operations, uring_cmd) - 256usize];
    ["Offset of field: file_operations::uring_cmd_iopoll"]
        [::core::mem::offset_of!(file_operations, uring_cmd_iopoll) - 264usize];
};
impl Default for file_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct static_call_site {
    pub addr: s32,
    pub key: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_site"][::core::mem::size_of::<static_call_site>() - 8usize];
    ["Alignment of static_call_site"][::core::mem::align_of::<static_call_site>() - 4usize];
    ["Offset of field: static_call_site::addr"]
        [::core::mem::offset_of!(static_call_site, addr) - 0usize];
    ["Offset of field: static_call_site::key"]
        [::core::mem::offset_of!(static_call_site, key) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_call_key {
    pub func: *mut core::ffi::c_void,
    pub __bindgen_anon_1: static_call_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_call_key__bindgen_ty_1 {
    pub type_: core::ffi::c_ulong,
    pub mods: *mut static_call_mod,
    pub sites: *mut static_call_site,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_key__bindgen_ty_1"]
        [::core::mem::size_of::<static_call_key__bindgen_ty_1>() - 8usize];
    ["Alignment of static_call_key__bindgen_ty_1"]
        [::core::mem::align_of::<static_call_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: static_call_key__bindgen_ty_1::type_"]
        [::core::mem::offset_of!(static_call_key__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: static_call_key__bindgen_ty_1::mods"]
        [::core::mem::offset_of!(static_call_key__bindgen_ty_1, mods) - 0usize];
    ["Offset of field: static_call_key__bindgen_ty_1::sites"]
        [::core::mem::offset_of!(static_call_key__bindgen_ty_1, sites) - 0usize];
};
impl Default for static_call_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_call_key"][::core::mem::size_of::<static_call_key>() - 16usize];
    ["Alignment of static_call_key"][::core::mem::align_of::<static_call_key>() - 8usize];
    ["Offset of field: static_call_key::func"]
        [::core::mem::offset_of!(static_call_key, func) - 0usize];
};
impl Default for static_call_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct spinlock {
    pub __bindgen_anon_1: spinlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union spinlock__bindgen_ty_1 {
    pub rlock: raw_spinlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock__bindgen_ty_1"][::core::mem::size_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Alignment of spinlock__bindgen_ty_1"]
        [::core::mem::align_of::<spinlock__bindgen_ty_1>() - 4usize];
    ["Offset of field: spinlock__bindgen_ty_1::rlock"]
        [::core::mem::offset_of!(spinlock__bindgen_ty_1, rlock) - 0usize];
};
impl Default for spinlock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of spinlock"][::core::mem::size_of::<spinlock>() - 4usize];
    ["Alignment of spinlock"][::core::mem::align_of::<spinlock>() - 4usize];
};
impl Default for spinlock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type spinlock_t = spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rwlock_t {
    pub raw_lock: arch_rwlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rwlock_t"][::core::mem::size_of::<rwlock_t>() - 8usize];
    ["Alignment of rwlock_t"][::core::mem::align_of::<rwlock_t>() - 4usize];
    ["Offset of field: rwlock_t::raw_lock"][::core::mem::offset_of!(rwlock_t, raw_lock) - 0usize];
};
impl Default for rwlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct static_key {
    pub enabled: atomic_t,
    pub __bindgen_anon_1: static_key__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union static_key__bindgen_ty_1 {
    pub type_: core::ffi::c_ulong,
    pub entries: *mut jump_entry,
    pub next: *mut static_key_mod,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key__bindgen_ty_1"]
        [::core::mem::size_of::<static_key__bindgen_ty_1>() - 8usize];
    ["Alignment of static_key__bindgen_ty_1"]
        [::core::mem::align_of::<static_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: static_key__bindgen_ty_1::type_"]
        [::core::mem::offset_of!(static_key__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: static_key__bindgen_ty_1::entries"]
        [::core::mem::offset_of!(static_key__bindgen_ty_1, entries) - 0usize];
    ["Offset of field: static_key__bindgen_ty_1::next"]
        [::core::mem::offset_of!(static_key__bindgen_ty_1, next) - 0usize];
};
impl Default for static_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of static_key"][::core::mem::size_of::<static_key>() - 16usize];
    ["Alignment of static_key"][::core::mem::align_of::<static_key>() - 8usize];
    ["Offset of field: static_key::enabled"][::core::mem::offset_of!(static_key, enabled) - 0usize];
};
impl Default for static_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct jump_entry {
    pub code: s32,
    pub target: s32,
    pub key: core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jump_entry"][::core::mem::size_of::<jump_entry>() - 16usize];
    ["Alignment of jump_entry"][::core::mem::align_of::<jump_entry>() - 8usize];
    ["Offset of field: jump_entry::code"][::core::mem::offset_of!(jump_entry, code) - 0usize];
    ["Offset of field: jump_entry::target"][::core::mem::offset_of!(jump_entry, target) - 4usize];
    ["Offset of field: jump_entry::key"][::core::mem::offset_of!(jump_entry, key) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct bug_entry {
    pub bug_addr_disp: core::ffi::c_int,
    pub file_disp: core::ffi::c_int,
    pub line: core::ffi::c_ushort,
    pub flags: core::ffi::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bug_entry"][::core::mem::size_of::<bug_entry>() - 12usize];
    ["Alignment of bug_entry"][::core::mem::align_of::<bug_entry>() - 4usize];
    ["Offset of field: bug_entry::bug_addr_disp"]
        [::core::mem::offset_of!(bug_entry, bug_addr_disp) - 0usize];
    ["Offset of field: bug_entry::file_disp"]
        [::core::mem::offset_of!(bug_entry, file_disp) - 4usize];
    ["Offset of field: bug_entry::line"][::core::mem::offset_of!(bug_entry, line) - 8usize];
    ["Offset of field: bug_entry::flags"][::core::mem::offset_of!(bug_entry, flags) - 10usize];
};
pub type atomic_long_t = atomic64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpumask {
    pub bits: [core::ffi::c_ulong; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpumask"][::core::mem::size_of::<cpumask>() - 32usize];
    ["Alignment of cpumask"][::core::mem::align_of::<cpumask>() - 8usize];
    ["Offset of field: cpumask::bits"][::core::mem::offset_of!(cpumask, bits) - 0usize];
};
pub type cpumask_t = cpumask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_head {
    pub first: *mut llist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llist_head"][::core::mem::size_of::<llist_head>() - 8usize];
    ["Alignment of llist_head"][::core::mem::align_of::<llist_head>() - 8usize];
    ["Offset of field: llist_head::first"][::core::mem::offset_of!(llist_head, first) - 0usize];
};
impl Default for llist_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llist_node {
    pub next: *mut llist_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of llist_node"][::core::mem::size_of::<llist_node>() - 8usize];
    ["Alignment of llist_node"][::core::mem::align_of::<llist_node>() - 8usize];
    ["Offset of field: llist_node::next"][::core::mem::offset_of!(llist_node, next) - 0usize];
};
impl Default for llist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __call_single_node {
    pub llist: llist_node,
    pub __bindgen_anon_1: __call_single_node__bindgen_ty_1,
    pub src: u16_,
    pub dst: u16_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __call_single_node__bindgen_ty_1 {
    pub u_flags: core::ffi::c_uint,
    pub a_flags: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __call_single_node__bindgen_ty_1"]
        [::core::mem::size_of::<__call_single_node__bindgen_ty_1>() - 4usize];
    ["Alignment of __call_single_node__bindgen_ty_1"]
        [::core::mem::align_of::<__call_single_node__bindgen_ty_1>() - 4usize];
    ["Offset of field: __call_single_node__bindgen_ty_1::u_flags"]
        [::core::mem::offset_of!(__call_single_node__bindgen_ty_1, u_flags) - 0usize];
    ["Offset of field: __call_single_node__bindgen_ty_1::a_flags"]
        [::core::mem::offset_of!(__call_single_node__bindgen_ty_1, a_flags) - 0usize];
};
impl Default for __call_single_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __call_single_node"][::core::mem::size_of::<__call_single_node>() - 16usize];
    ["Alignment of __call_single_node"][::core::mem::align_of::<__call_single_node>() - 8usize];
    ["Offset of field: __call_single_node::llist"]
        [::core::mem::offset_of!(__call_single_node, llist) - 0usize];
    ["Offset of field: __call_single_node::src"]
        [::core::mem::offset_of!(__call_single_node, src) - 12usize];
    ["Offset of field: __call_single_node::dst"]
        [::core::mem::offset_of!(__call_single_node, dst) - 14usize];
};
impl Default for __call_single_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type time64_t = __s64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_timespec"][::core::mem::size_of::<__kernel_timespec>() - 16usize];
    ["Alignment of __kernel_timespec"][::core::mem::align_of::<__kernel_timespec>() - 8usize];
    ["Offset of field: __kernel_timespec::tv_sec"]
        [::core::mem::offset_of!(__kernel_timespec, tv_sec) - 0usize];
    ["Offset of field: __kernel_timespec::tv_nsec"]
        [::core::mem::offset_of!(__kernel_timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec64 {
    pub tv_sec: time64_t,
    pub tv_nsec: core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec64"][::core::mem::size_of::<timespec64>() - 16usize];
    ["Alignment of timespec64"][::core::mem::align_of::<timespec64>() - 8usize];
    ["Offset of field: timespec64::tv_sec"][::core::mem::offset_of!(timespec64, tv_sec) - 0usize];
    ["Offset of field: timespec64::tv_nsec"][::core::mem::offset_of!(timespec64, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    _unused: [u8; 0],
}
pub const timespec_type_TT_NONE: timespec_type = 0;
pub const timespec_type_TT_NATIVE: timespec_type = 1;
pub const timespec_type_TT_COMPAT: timespec_type = 2;
pub type timespec_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block {
    pub arch_data: core::ffi::c_ulong,
    pub fn_:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut restart_block) -> core::ffi::c_long>,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1 {
    pub futex: restart_block__bindgen_ty_1__bindgen_ty_1,
    pub nanosleep: restart_block__bindgen_ty_1__bindgen_ty_2,
    pub poll: restart_block__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_1 {
    pub uaddr: *mut u32_,
    pub val: u32_,
    pub flags: u32_,
    pub bitset: u32_,
    pub time: u64_,
    pub uaddr2: *mut u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_1>() - 40usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::uaddr"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, uaddr) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::val"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, val) - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::flags"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, flags) - 12usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::bitset"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, bitset) - 16usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::time"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, time) - 24usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_1::uaddr2"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_1, uaddr2) - 32usize];
};
impl Default for restart_block__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_2 {
    pub clockid: clockid_t,
    pub type_: timespec_type,
    pub __bindgen_anon_1: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub expires: u64_,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub rmtp: *mut __kernel_timespec,
    pub compat_rmtp: *mut old_timespec32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::core::mem::size_of::<
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::core::mem::align_of::<
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::rmtp"][::core::mem::offset_of!(
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        rmtp
    ) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::compat_rmtp"][::core::mem::offset_of!(
        restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        compat_rmtp
    )
        - 0usize];
};
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::clockid"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, clockid) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::type_"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, type_) - 4usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_2::expires"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_2, expires) - 16usize];
};
impl Default for restart_block__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct restart_block__bindgen_ty_1__bindgen_ty_3 {
    pub ufds: *mut pollfd,
    pub nfds: core::ffi::c_int,
    pub has_timeout: core::ffi::c_int,
    pub tv_sec: core::ffi::c_ulong,
    pub tv_nsec: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<restart_block__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of restart_block__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<restart_block__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::ufds"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, ufds) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::nfds"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, nfds) - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::has_timeout"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, has_timeout) - 12usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::tv_sec"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, tv_sec) - 16usize];
    ["Offset of field: restart_block__bindgen_ty_1__bindgen_ty_3::tv_nsec"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1__bindgen_ty_3, tv_nsec) - 24usize];
};
impl Default for restart_block__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block__bindgen_ty_1"]
        [::core::mem::size_of::<restart_block__bindgen_ty_1>() - 40usize];
    ["Alignment of restart_block__bindgen_ty_1"]
        [::core::mem::align_of::<restart_block__bindgen_ty_1>() - 8usize];
    ["Offset of field: restart_block__bindgen_ty_1::futex"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1, futex) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1::nanosleep"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1, nanosleep) - 0usize];
    ["Offset of field: restart_block__bindgen_ty_1::poll"]
        [::core::mem::offset_of!(restart_block__bindgen_ty_1, poll) - 0usize];
};
impl Default for restart_block__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of restart_block"][::core::mem::size_of::<restart_block>() - 56usize];
    ["Alignment of restart_block"][::core::mem::align_of::<restart_block>() - 8usize];
    ["Offset of field: restart_block::arch_data"]
        [::core::mem::offset_of!(restart_block, arch_data) - 0usize];
    ["Offset of field: restart_block::fn_"][::core::mem::offset_of!(restart_block, fn_) - 8usize];
};
impl Default for restart_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_bitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pt_regs {
    pub r15: core::ffi::c_ulong,
    pub r14: core::ffi::c_ulong,
    pub r13: core::ffi::c_ulong,
    pub r12: core::ffi::c_ulong,
    pub bp: core::ffi::c_ulong,
    pub bx: core::ffi::c_ulong,
    pub r11: core::ffi::c_ulong,
    pub r10: core::ffi::c_ulong,
    pub r9: core::ffi::c_ulong,
    pub r8: core::ffi::c_ulong,
    pub ax: core::ffi::c_ulong,
    pub cx: core::ffi::c_ulong,
    pub dx: core::ffi::c_ulong,
    pub si: core::ffi::c_ulong,
    pub di: core::ffi::c_ulong,
    pub orig_ax: core::ffi::c_ulong,
    pub ip: core::ffi::c_ulong,
    pub cs: core::ffi::c_ulong,
    pub flags: core::ffi::c_ulong,
    pub sp: core::ffi::c_ulong,
    pub ss: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pt_regs"][::core::mem::size_of::<pt_regs>() - 168usize];
    ["Alignment of pt_regs"][::core::mem::align_of::<pt_regs>() - 8usize];
    ["Offset of field: pt_regs::r15"][::core::mem::offset_of!(pt_regs, r15) - 0usize];
    ["Offset of field: pt_regs::r14"][::core::mem::offset_of!(pt_regs, r14) - 8usize];
    ["Offset of field: pt_regs::r13"][::core::mem::offset_of!(pt_regs, r13) - 16usize];
    ["Offset of field: pt_regs::r12"][::core::mem::offset_of!(pt_regs, r12) - 24usize];
    ["Offset of field: pt_regs::bp"][::core::mem::offset_of!(pt_regs, bp) - 32usize];
    ["Offset of field: pt_regs::bx"][::core::mem::offset_of!(pt_regs, bx) - 40usize];
    ["Offset of field: pt_regs::r11"][::core::mem::offset_of!(pt_regs, r11) - 48usize];
    ["Offset of field: pt_regs::r10"][::core::mem::offset_of!(pt_regs, r10) - 56usize];
    ["Offset of field: pt_regs::r9"][::core::mem::offset_of!(pt_regs, r9) - 64usize];
    ["Offset of field: pt_regs::r8"][::core::mem::offset_of!(pt_regs, r8) - 72usize];
    ["Offset of field: pt_regs::ax"][::core::mem::offset_of!(pt_regs, ax) - 80usize];
    ["Offset of field: pt_regs::cx"][::core::mem::offset_of!(pt_regs, cx) - 88usize];
    ["Offset of field: pt_regs::dx"][::core::mem::offset_of!(pt_regs, dx) - 96usize];
    ["Offset of field: pt_regs::si"][::core::mem::offset_of!(pt_regs, si) - 104usize];
    ["Offset of field: pt_regs::di"][::core::mem::offset_of!(pt_regs, di) - 112usize];
    ["Offset of field: pt_regs::orig_ax"][::core::mem::offset_of!(pt_regs, orig_ax) - 120usize];
    ["Offset of field: pt_regs::ip"][::core::mem::offset_of!(pt_regs, ip) - 128usize];
    ["Offset of field: pt_regs::cs"][::core::mem::offset_of!(pt_regs, cs) - 136usize];
    ["Offset of field: pt_regs::flags"][::core::mem::offset_of!(pt_regs, flags) - 144usize];
    ["Offset of field: pt_regs::sp"][::core::mem::offset_of!(pt_regs, sp) - 152usize];
    ["Offset of field: pt_regs::ss"][::core::mem::offset_of!(pt_regs, ss) - 160usize];
};
#[repr(C)]
#[repr(align(1))]
#[derive(Debug, Default, Copy, Clone)]
pub struct desc_struct {
    pub _bindgen_opaque_blob: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of desc_struct"][::core::mem::size_of::<desc_struct>() - 8usize];
    ["Alignment of desc_struct"][::core::mem::align_of::<desc_struct>() - 1usize];
};
pub type pgdval_t = core::ffi::c_ulong;
pub type pgprotval_t = core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pgprot {
    pub pgprot: pgprotval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pgprot"][::core::mem::size_of::<pgprot>() - 8usize];
    ["Alignment of pgprot"][::core::mem::align_of::<pgprot>() - 8usize];
    ["Offset of field: pgprot::pgprot"][::core::mem::offset_of!(pgprot, pgprot) - 0usize];
};
pub type pgprot_t = pgprot;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pgd_t {
    pub pgd: pgdval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pgd_t"][::core::mem::size_of::<pgd_t>() - 8usize];
    ["Alignment of pgd_t"][::core::mem::align_of::<pgd_t>() - 8usize];
    ["Offset of field: pgd_t::pgd"][::core::mem::offset_of!(pgd_t, pgd) - 0usize];
};
pub type pgtable_t = *mut page;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seq_file {
    _unused: [u8; 0],
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct orc_entry {
    pub sp_offset: s16,
    pub bp_offset: s16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of orc_entry"][::core::mem::size_of::<orc_entry>() - 6usize];
    ["Alignment of orc_entry"][::core::mem::align_of::<orc_entry>() - 1usize];
    ["Offset of field: orc_entry::sp_offset"]
        [::core::mem::offset_of!(orc_entry, sp_offset) - 0usize];
    ["Offset of field: orc_entry::bp_offset"]
        [::core::mem::offset_of!(orc_entry, bp_offset) - 2usize];
};
impl orc_entry {
    #[inline]
    pub fn sp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_sp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_reg(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bp_reg(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn end(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_end(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sp_reg: core::ffi::c_uint,
        bp_reg: core::ffi::c_uint,
        type_: core::ffi::c_uint,
        end: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let sp_reg: u32 = unsafe { ::core::mem::transmute(sp_reg) };
            sp_reg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bp_reg: u32 = unsafe { ::core::mem::transmute(bp_reg) };
            bp_reg as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let end: u32 = unsafe { ::core::mem::transmute(end) };
            end as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct math_emu_info {
    pub ___orig_eip: core::ffi::c_long,
    pub regs: *mut pt_regs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of math_emu_info"][::core::mem::size_of::<math_emu_info>() - 16usize];
    ["Alignment of math_emu_info"][::core::mem::align_of::<math_emu_info>() - 8usize];
    ["Offset of field: math_emu_info::___orig_eip"]
        [::core::mem::offset_of!(math_emu_info, ___orig_eip) - 0usize];
    ["Offset of field: math_emu_info::regs"][::core::mem::offset_of!(math_emu_info, regs) - 8usize];
};
impl Default for math_emu_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tracepoint_func {
    pub func: *mut core::ffi::c_void,
    pub data: *mut core::ffi::c_void,
    pub prio: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tracepoint_func"][::core::mem::size_of::<tracepoint_func>() - 24usize];
    ["Alignment of tracepoint_func"][::core::mem::align_of::<tracepoint_func>() - 8usize];
    ["Offset of field: tracepoint_func::func"]
        [::core::mem::offset_of!(tracepoint_func, func) - 0usize];
    ["Offset of field: tracepoint_func::data"]
        [::core::mem::offset_of!(tracepoint_func, data) - 8usize];
    ["Offset of field: tracepoint_func::prio"]
        [::core::mem::offset_of!(tracepoint_func, prio) - 16usize];
};
impl Default for tracepoint_func {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tracepoint {
    pub name: *const core::ffi::c_char,
    pub key: static_key,
    pub static_call_key: *mut static_call_key,
    pub static_call_tramp: *mut core::ffi::c_void,
    pub iterator: *mut core::ffi::c_void,
    pub regfunc: ::core::option::Option<unsafe extern "C" fn() -> core::ffi::c_int>,
    pub unregfunc: ::core::option::Option<unsafe extern "C" fn()>,
    pub funcs: *mut tracepoint_func,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tracepoint"][::core::mem::size_of::<tracepoint>() - 72usize];
    ["Alignment of tracepoint"][::core::mem::align_of::<tracepoint>() - 8usize];
    ["Offset of field: tracepoint::name"][::core::mem::offset_of!(tracepoint, name) - 0usize];
    ["Offset of field: tracepoint::key"][::core::mem::offset_of!(tracepoint, key) - 8usize];
    ["Offset of field: tracepoint::static_call_key"]
        [::core::mem::offset_of!(tracepoint, static_call_key) - 24usize];
    ["Offset of field: tracepoint::static_call_tramp"]
        [::core::mem::offset_of!(tracepoint, static_call_tramp) - 32usize];
    ["Offset of field: tracepoint::iterator"]
        [::core::mem::offset_of!(tracepoint, iterator) - 40usize];
    ["Offset of field: tracepoint::regfunc"]
        [::core::mem::offset_of!(tracepoint, regfunc) - 48usize];
    ["Offset of field: tracepoint::unregfunc"]
        [::core::mem::offset_of!(tracepoint, unregfunc) - 56usize];
    ["Offset of field: tracepoint::funcs"][::core::mem::offset_of!(tracepoint, funcs) - 64usize];
};
impl Default for tracepoint {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct bpf_raw_event_map {
    pub tp: *mut tracepoint,
    pub bpf_func: *mut core::ffi::c_void,
    pub num_args: u32_,
    pub writable_size: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_raw_event_map"][::core::mem::size_of::<bpf_raw_event_map>() - 32usize];
    ["Alignment of bpf_raw_event_map"][::core::mem::align_of::<bpf_raw_event_map>() - 32usize];
    ["Offset of field: bpf_raw_event_map::tp"]
        [::core::mem::offset_of!(bpf_raw_event_map, tp) - 0usize];
    ["Offset of field: bpf_raw_event_map::bpf_func"]
        [::core::mem::offset_of!(bpf_raw_event_map, bpf_func) - 8usize];
    ["Offset of field: bpf_raw_event_map::num_args"]
        [::core::mem::offset_of!(bpf_raw_event_map, num_args) - 16usize];
    ["Offset of field: bpf_raw_event_map::writable_size"]
        [::core::mem::offset_of!(bpf_raw_event_map, writable_size) - 20usize];
};
impl Default for bpf_raw_event_map {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub status: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fregs_state"][::core::mem::size_of::<fregs_state>() - 112usize];
    ["Alignment of fregs_state"][::core::mem::align_of::<fregs_state>() - 4usize];
    ["Offset of field: fregs_state::cwd"][::core::mem::offset_of!(fregs_state, cwd) - 0usize];
    ["Offset of field: fregs_state::swd"][::core::mem::offset_of!(fregs_state, swd) - 4usize];
    ["Offset of field: fregs_state::twd"][::core::mem::offset_of!(fregs_state, twd) - 8usize];
    ["Offset of field: fregs_state::fip"][::core::mem::offset_of!(fregs_state, fip) - 12usize];
    ["Offset of field: fregs_state::fcs"][::core::mem::offset_of!(fregs_state, fcs) - 16usize];
    ["Offset of field: fregs_state::foo"][::core::mem::offset_of!(fregs_state, foo) - 20usize];
    ["Offset of field: fregs_state::fos"][::core::mem::offset_of!(fregs_state, fos) - 24usize];
    ["Offset of field: fregs_state::st_space"]
        [::core::mem::offset_of!(fregs_state, st_space) - 28usize];
    ["Offset of field: fregs_state::status"]
        [::core::mem::offset_of!(fregs_state, status) - 108usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct fxregs_state {
    pub cwd: u16_,
    pub swd: u16_,
    pub twd: u16_,
    pub fop: u16_,
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1,
    pub mxcsr: u32_,
    pub mxcsr_mask: u32_,
    pub st_space: [u32_; 32usize],
    pub xmm_space: [u32_; 64usize],
    pub padding: [u32_; 12usize],
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_1 {
    pub __bindgen_anon_1: fxregs_state__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: fxregs_state__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_1 {
    pub rip: u64_,
    pub rdp: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<fxregs_state__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<fxregs_state__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_1::rip"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_1, rip) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_1::rdp"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_1, rdp) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fxregs_state__bindgen_ty_1__bindgen_ty_2 {
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<fxregs_state__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<fxregs_state__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fip"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fip) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fcs"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fcs) - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::foo"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, foo) - 8usize];
    ["Offset of field: fxregs_state__bindgen_ty_1__bindgen_ty_2::fos"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_1__bindgen_ty_2, fos) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_1"]
        [::core::mem::size_of::<fxregs_state__bindgen_ty_1>() - 16usize];
    ["Alignment of fxregs_state__bindgen_ty_1"]
        [::core::mem::align_of::<fxregs_state__bindgen_ty_1>() - 8usize];
};
impl Default for fxregs_state__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fxregs_state__bindgen_ty_2 {
    pub padding1: [u32_; 12usize],
    pub sw_reserved: [u32_; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state__bindgen_ty_2"]
        [::core::mem::size_of::<fxregs_state__bindgen_ty_2>() - 48usize];
    ["Alignment of fxregs_state__bindgen_ty_2"]
        [::core::mem::align_of::<fxregs_state__bindgen_ty_2>() - 4usize];
    ["Offset of field: fxregs_state__bindgen_ty_2::padding1"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_2, padding1) - 0usize];
    ["Offset of field: fxregs_state__bindgen_ty_2::sw_reserved"]
        [::core::mem::offset_of!(fxregs_state__bindgen_ty_2, sw_reserved) - 0usize];
};
impl Default for fxregs_state__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fxregs_state"][::core::mem::size_of::<fxregs_state>() - 512usize];
    ["Alignment of fxregs_state"][::core::mem::align_of::<fxregs_state>() - 16usize];
    ["Offset of field: fxregs_state::cwd"][::core::mem::offset_of!(fxregs_state, cwd) - 0usize];
    ["Offset of field: fxregs_state::swd"][::core::mem::offset_of!(fxregs_state, swd) - 2usize];
    ["Offset of field: fxregs_state::twd"][::core::mem::offset_of!(fxregs_state, twd) - 4usize];
    ["Offset of field: fxregs_state::fop"][::core::mem::offset_of!(fxregs_state, fop) - 6usize];
    ["Offset of field: fxregs_state::mxcsr"]
        [::core::mem::offset_of!(fxregs_state, mxcsr) - 24usize];
    ["Offset of field: fxregs_state::mxcsr_mask"]
        [::core::mem::offset_of!(fxregs_state, mxcsr_mask) - 28usize];
    ["Offset of field: fxregs_state::st_space"]
        [::core::mem::offset_of!(fxregs_state, st_space) - 32usize];
    ["Offset of field: fxregs_state::xmm_space"]
        [::core::mem::offset_of!(fxregs_state, xmm_space) - 160usize];
    ["Offset of field: fxregs_state::padding"]
        [::core::mem::offset_of!(fxregs_state, padding) - 416usize];
};
impl Default for fxregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swregs_state {
    pub cwd: u32_,
    pub swd: u32_,
    pub twd: u32_,
    pub fip: u32_,
    pub fcs: u32_,
    pub foo: u32_,
    pub fos: u32_,
    pub st_space: [u32_; 20usize],
    pub ftop: u8_,
    pub changed: u8_,
    pub lookahead: u8_,
    pub no_update: u8_,
    pub rm: u8_,
    pub alimit: u8_,
    pub info: *mut math_emu_info,
    pub entry_eip: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swregs_state"][::core::mem::size_of::<swregs_state>() - 136usize];
    ["Alignment of swregs_state"][::core::mem::align_of::<swregs_state>() - 8usize];
    ["Offset of field: swregs_state::cwd"][::core::mem::offset_of!(swregs_state, cwd) - 0usize];
    ["Offset of field: swregs_state::swd"][::core::mem::offset_of!(swregs_state, swd) - 4usize];
    ["Offset of field: swregs_state::twd"][::core::mem::offset_of!(swregs_state, twd) - 8usize];
    ["Offset of field: swregs_state::fip"][::core::mem::offset_of!(swregs_state, fip) - 12usize];
    ["Offset of field: swregs_state::fcs"][::core::mem::offset_of!(swregs_state, fcs) - 16usize];
    ["Offset of field: swregs_state::foo"][::core::mem::offset_of!(swregs_state, foo) - 20usize];
    ["Offset of field: swregs_state::fos"][::core::mem::offset_of!(swregs_state, fos) - 24usize];
    ["Offset of field: swregs_state::st_space"]
        [::core::mem::offset_of!(swregs_state, st_space) - 28usize];
    ["Offset of field: swregs_state::ftop"][::core::mem::offset_of!(swregs_state, ftop) - 108usize];
    ["Offset of field: swregs_state::changed"]
        [::core::mem::offset_of!(swregs_state, changed) - 109usize];
    ["Offset of field: swregs_state::lookahead"]
        [::core::mem::offset_of!(swregs_state, lookahead) - 110usize];
    ["Offset of field: swregs_state::no_update"]
        [::core::mem::offset_of!(swregs_state, no_update) - 111usize];
    ["Offset of field: swregs_state::rm"][::core::mem::offset_of!(swregs_state, rm) - 112usize];
    ["Offset of field: swregs_state::alimit"]
        [::core::mem::offset_of!(swregs_state, alimit) - 113usize];
    ["Offset of field: swregs_state::info"][::core::mem::offset_of!(swregs_state, info) - 120usize];
    ["Offset of field: swregs_state::entry_eip"]
        [::core::mem::offset_of!(swregs_state, entry_eip) - 128usize];
};
impl Default for swregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct xregs_state {
    pub _bindgen_opaque_blob: [u8; 576usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xregs_state"][::core::mem::size_of::<xregs_state>() - 576usize];
    ["Alignment of xregs_state"][::core::mem::align_of::<xregs_state>() - 64usize];
};
impl Default for xregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpregs_state {
    pub fsave: __BindgenUnionField<fregs_state>,
    pub fxsave: __BindgenUnionField<fxregs_state>,
    pub soft: __BindgenUnionField<swregs_state>,
    pub xsave: __BindgenUnionField<xregs_state>,
    pub __padding: __BindgenUnionField<[u8_; 4096usize]>,
    pub bindgen_union_field: [u8; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpregs_state"][::core::mem::size_of::<fpregs_state>() - 4096usize];
    ["Alignment of fpregs_state"][::core::mem::align_of::<fpregs_state>() - 64usize];
    ["Offset of field: fpregs_state::fsave"][::core::mem::offset_of!(fpregs_state, fsave) - 0usize];
    ["Offset of field: fpregs_state::fxsave"]
        [::core::mem::offset_of!(fpregs_state, fxsave) - 0usize];
    ["Offset of field: fpregs_state::soft"][::core::mem::offset_of!(fpregs_state, soft) - 0usize];
    ["Offset of field: fpregs_state::xsave"][::core::mem::offset_of!(fpregs_state, xsave) - 0usize];
    ["Offset of field: fpregs_state::__padding"]
        [::core::mem::offset_of!(fpregs_state, __padding) - 0usize];
};
impl Default for fpregs_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
pub struct fpstate {
    pub size: core::ffi::c_uint,
    pub user_size: core::ffi::c_uint,
    pub xfeatures: u64_,
    pub user_xfeatures: u64_,
    pub xfd: u64_,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u64; 3usize],
    pub regs: fpregs_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpstate"][::core::mem::size_of::<fpstate>() - 4160usize];
    ["Alignment of fpstate"][::core::mem::align_of::<fpstate>() - 64usize];
    ["Offset of field: fpstate::size"][::core::mem::offset_of!(fpstate, size) - 0usize];
    ["Offset of field: fpstate::user_size"][::core::mem::offset_of!(fpstate, user_size) - 4usize];
    ["Offset of field: fpstate::xfeatures"][::core::mem::offset_of!(fpstate, xfeatures) - 8usize];
    ["Offset of field: fpstate::user_xfeatures"]
        [::core::mem::offset_of!(fpstate, user_xfeatures) - 16usize];
    ["Offset of field: fpstate::xfd"][::core::mem::offset_of!(fpstate, xfd) - 24usize];
    ["Offset of field: fpstate::regs"][::core::mem::offset_of!(fpstate, regs) - 64usize];
};
impl Default for fpstate {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl fpstate {
    #[inline]
    pub fn is_valloc(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_valloc(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_guest(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_guest(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_confidential(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_confidential(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_use(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_valloc: core::ffi::c_uint,
        is_guest: core::ffi::c_uint,
        is_confidential: core::ffi::c_uint,
        in_use: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_valloc: u32 = unsafe { ::core::mem::transmute(is_valloc) };
            is_valloc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_guest: u32 = unsafe { ::core::mem::transmute(is_guest) };
            is_guest as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let is_confidential: u32 = unsafe { ::core::mem::transmute(is_confidential) };
            is_confidential as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let in_use: u32 = unsafe { ::core::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fpu_state_perm {
    pub __state_perm: u64_,
    pub __state_size: core::ffi::c_uint,
    pub __user_state_size: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu_state_perm"][::core::mem::size_of::<fpu_state_perm>() - 16usize];
    ["Alignment of fpu_state_perm"][::core::mem::align_of::<fpu_state_perm>() - 8usize];
    ["Offset of field: fpu_state_perm::__state_perm"]
        [::core::mem::offset_of!(fpu_state_perm, __state_perm) - 0usize];
    ["Offset of field: fpu_state_perm::__state_size"]
        [::core::mem::offset_of!(fpu_state_perm, __state_size) - 8usize];
    ["Offset of field: fpu_state_perm::__user_state_size"]
        [::core::mem::offset_of!(fpu_state_perm, __user_state_size) - 12usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct fpu {
    pub last_cpu: core::ffi::c_uint,
    pub avx512_timestamp: core::ffi::c_ulong,
    pub fpstate: *mut fpstate,
    pub __task_fpstate: *mut fpstate,
    pub perm: fpu_state_perm,
    pub guest_perm: fpu_state_perm,
    pub __fpstate: fpstate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpu"][::core::mem::size_of::<fpu>() - 4224usize];
    ["Alignment of fpu"][::core::mem::align_of::<fpu>() - 64usize];
    ["Offset of field: fpu::last_cpu"][::core::mem::offset_of!(fpu, last_cpu) - 0usize];
    ["Offset of field: fpu::avx512_timestamp"]
        [::core::mem::offset_of!(fpu, avx512_timestamp) - 8usize];
    ["Offset of field: fpu::fpstate"][::core::mem::offset_of!(fpu, fpstate) - 16usize];
    ["Offset of field: fpu::__task_fpstate"]
        [::core::mem::offset_of!(fpu, __task_fpstate) - 24usize];
    ["Offset of field: fpu::perm"][::core::mem::offset_of!(fpu, perm) - 32usize];
    ["Offset of field: fpu::guest_perm"][::core::mem::offset_of!(fpu, guest_perm) - 48usize];
    ["Offset of field: fpu::__fpstate"][::core::mem::offset_of!(fpu, __fpstate) - 64usize];
};
impl Default for fpu {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct perf_event {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
pub struct thread_struct {
    pub tls_array: [desc_struct; 3usize],
    pub sp: core::ffi::c_ulong,
    pub es: core::ffi::c_ushort,
    pub ds: core::ffi::c_ushort,
    pub fsindex: core::ffi::c_ushort,
    pub gsindex: core::ffi::c_ushort,
    pub fsbase: core::ffi::c_ulong,
    pub gsbase: core::ffi::c_ulong,
    pub ptrace_bps: [*mut perf_event; 4usize],
    pub virtual_dr6: core::ffi::c_ulong,
    pub ptrace_dr7: core::ffi::c_ulong,
    pub cr2: core::ffi::c_ulong,
    pub trap_nr: core::ffi::c_ulong,
    pub error_code: core::ffi::c_ulong,
    pub io_bitmap: *mut io_bitmap,
    pub iopl_emul: core::ffi::c_ulong,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub pkru: u32_,
    pub __bindgen_padding_0: [u64; 5usize],
    pub fpu: fpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_struct"][::core::mem::size_of::<thread_struct>() - 4416usize];
    ["Alignment of thread_struct"][::core::mem::align_of::<thread_struct>() - 64usize];
    ["Offset of field: thread_struct::tls_array"]
        [::core::mem::offset_of!(thread_struct, tls_array) - 0usize];
    ["Offset of field: thread_struct::sp"][::core::mem::offset_of!(thread_struct, sp) - 24usize];
    ["Offset of field: thread_struct::es"][::core::mem::offset_of!(thread_struct, es) - 32usize];
    ["Offset of field: thread_struct::ds"][::core::mem::offset_of!(thread_struct, ds) - 34usize];
    ["Offset of field: thread_struct::fsindex"]
        [::core::mem::offset_of!(thread_struct, fsindex) - 36usize];
    ["Offset of field: thread_struct::gsindex"]
        [::core::mem::offset_of!(thread_struct, gsindex) - 38usize];
    ["Offset of field: thread_struct::fsbase"]
        [::core::mem::offset_of!(thread_struct, fsbase) - 40usize];
    ["Offset of field: thread_struct::gsbase"]
        [::core::mem::offset_of!(thread_struct, gsbase) - 48usize];
    ["Offset of field: thread_struct::ptrace_bps"]
        [::core::mem::offset_of!(thread_struct, ptrace_bps) - 56usize];
    ["Offset of field: thread_struct::virtual_dr6"]
        [::core::mem::offset_of!(thread_struct, virtual_dr6) - 88usize];
    ["Offset of field: thread_struct::ptrace_dr7"]
        [::core::mem::offset_of!(thread_struct, ptrace_dr7) - 96usize];
    ["Offset of field: thread_struct::cr2"][::core::mem::offset_of!(thread_struct, cr2) - 104usize];
    ["Offset of field: thread_struct::trap_nr"]
        [::core::mem::offset_of!(thread_struct, trap_nr) - 112usize];
    ["Offset of field: thread_struct::error_code"]
        [::core::mem::offset_of!(thread_struct, error_code) - 120usize];
    ["Offset of field: thread_struct::io_bitmap"]
        [::core::mem::offset_of!(thread_struct, io_bitmap) - 128usize];
    ["Offset of field: thread_struct::iopl_emul"]
        [::core::mem::offset_of!(thread_struct, iopl_emul) - 136usize];
    ["Offset of field: thread_struct::pkru"]
        [::core::mem::offset_of!(thread_struct, pkru) - 148usize];
    ["Offset of field: thread_struct::fpu"][::core::mem::offset_of!(thread_struct, fpu) - 192usize];
};
impl Default for thread_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl thread_struct {
    #[inline]
    pub fn iopl_warn(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iopl_warn(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sig_on_uaccess_err(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sig_on_uaccess_err(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        iopl_warn: core::ffi::c_uint,
        sig_on_uaccess_err: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let iopl_warn: u32 = unsafe { ::core::mem::transmute(iopl_warn) };
            iopl_warn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sig_on_uaccess_err: u32 = unsafe { ::core::mem::transmute(sig_on_uaccess_err) };
            sig_on_uaccess_err as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_info {
    pub flags: core::ffi::c_ulong,
    pub syscall_work: core::ffi::c_ulong,
    pub status: u32_,
    pub cpu: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_info"][::core::mem::size_of::<thread_info>() - 24usize];
    ["Alignment of thread_info"][::core::mem::align_of::<thread_info>() - 8usize];
    ["Offset of field: thread_info::flags"][::core::mem::offset_of!(thread_info, flags) - 0usize];
    ["Offset of field: thread_info::syscall_work"]
        [::core::mem::offset_of!(thread_info, syscall_work) - 8usize];
    ["Offset of field: thread_info::status"]
        [::core::mem::offset_of!(thread_info, status) - 16usize];
    ["Offset of field: thread_info::cpu"][::core::mem::offset_of!(thread_info, cpu) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct optimistic_spin_queue {
    pub tail: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of optimistic_spin_queue"][::core::mem::size_of::<optimistic_spin_queue>() - 4usize];
    ["Alignment of optimistic_spin_queue"]
        [::core::mem::align_of::<optimistic_spin_queue>() - 4usize];
    ["Offset of field: optimistic_spin_queue::tail"]
        [::core::mem::offset_of!(optimistic_spin_queue, tail) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mutex {
    pub owner: atomic_long_t,
    pub wait_lock: raw_spinlock_t,
    pub osq: optimistic_spin_queue,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mutex"][::core::mem::size_of::<mutex>() - 32usize];
    ["Alignment of mutex"][::core::mem::align_of::<mutex>() - 8usize];
    ["Offset of field: mutex::owner"][::core::mem::offset_of!(mutex, owner) - 0usize];
    ["Offset of field: mutex::wait_lock"][::core::mem::offset_of!(mutex, wait_lock) - 8usize];
    ["Offset of field: mutex::osq"][::core::mem::offset_of!(mutex, osq) - 12usize];
    ["Offset of field: mutex::wait_list"][::core::mem::offset_of!(mutex, wait_list) - 16usize];
};
impl Default for mutex {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wait_queue_head {
    pub lock: spinlock_t,
    pub head: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait_queue_head"][::core::mem::size_of::<wait_queue_head>() - 24usize];
    ["Alignment of wait_queue_head"][::core::mem::align_of::<wait_queue_head>() - 8usize];
    ["Offset of field: wait_queue_head::lock"]
        [::core::mem::offset_of!(wait_queue_head, lock) - 0usize];
    ["Offset of field: wait_queue_head::head"]
        [::core::mem::offset_of!(wait_queue_head, head) - 8usize];
};
impl Default for wait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type wait_queue_head_t = wait_queue_head;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct seqcount {
    pub sequence: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount"][::core::mem::size_of::<seqcount>() - 4usize];
    ["Alignment of seqcount"][::core::mem::align_of::<seqcount>() - 4usize];
    ["Offset of field: seqcount::sequence"][::core::mem::offset_of!(seqcount, sequence) - 0usize];
};
pub type seqcount_t = seqcount;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct seqcount_raw_spinlock {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_raw_spinlock"][::core::mem::size_of::<seqcount_raw_spinlock>() - 4usize];
    ["Alignment of seqcount_raw_spinlock"]
        [::core::mem::align_of::<seqcount_raw_spinlock>() - 4usize];
    ["Offset of field: seqcount_raw_spinlock::seqcount"]
        [::core::mem::offset_of!(seqcount_raw_spinlock, seqcount) - 0usize];
};
pub type seqcount_raw_spinlock_t = seqcount_raw_spinlock;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct seqcount_spinlock {
    pub seqcount: seqcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqcount_spinlock"][::core::mem::size_of::<seqcount_spinlock>() - 4usize];
    ["Alignment of seqcount_spinlock"][::core::mem::align_of::<seqcount_spinlock>() - 4usize];
    ["Offset of field: seqcount_spinlock::seqcount"]
        [::core::mem::offset_of!(seqcount_spinlock, seqcount) - 0usize];
};
pub type seqcount_spinlock_t = seqcount_spinlock;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct seqlock_t {
    pub seqcount: seqcount_spinlock_t,
    pub lock: spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seqlock_t"][::core::mem::size_of::<seqlock_t>() - 8usize];
    ["Alignment of seqlock_t"][::core::mem::align_of::<seqlock_t>() - 4usize];
    ["Offset of field: seqlock_t::seqcount"][::core::mem::offset_of!(seqlock_t, seqcount) - 0usize];
    ["Offset of field: seqlock_t::lock"][::core::mem::offset_of!(seqlock_t, lock) - 4usize];
};
impl Default for seqlock_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn add_device_randomness(buf: *const core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn get_random_bytes(buf: *mut core::ffi::c_void, len: usize);
}
extern "C" {
    pub fn rng_is_initialized() -> bool_;
}
extern "C" {
    pub fn wait_for_random_bytes() -> core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nodemask_t {
    pub bits: [core::ffi::c_ulong; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nodemask_t"][::core::mem::size_of::<nodemask_t>() - 8usize];
    ["Alignment of nodemask_t"][::core::mem::align_of::<nodemask_t>() - 8usize];
    ["Offset of field: nodemask_t::bits"][::core::mem::offset_of!(nodemask_t, bits) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_tlbflush_unmap_batch {
    pub cpumask: cpumask,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_tlbflush_unmap_batch"]
        [::core::mem::size_of::<arch_tlbflush_unmap_batch>() - 32usize];
    ["Alignment of arch_tlbflush_unmap_batch"]
        [::core::mem::align_of::<arch_tlbflush_unmap_batch>() - 8usize];
    ["Offset of field: arch_tlbflush_unmap_batch::cpumask"]
        [::core::mem::offset_of!(arch_tlbflush_unmap_batch, cpumask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_rss_stat {
    pub events: core::ffi::c_int,
    pub count: [core::ffi::c_int; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_rss_stat"][::core::mem::size_of::<task_rss_stat>() - 20usize];
    ["Alignment of task_rss_stat"][::core::mem::align_of::<task_rss_stat>() - 4usize];
    ["Offset of field: task_rss_stat::events"]
        [::core::mem::offset_of!(task_rss_stat, events) - 0usize];
    ["Offset of field: task_rss_stat::count"]
        [::core::mem::offset_of!(task_rss_stat, count) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mm_rss_stat {
    pub count: [atomic_long_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_rss_stat"][::core::mem::size_of::<mm_rss_stat>() - 32usize];
    ["Alignment of mm_rss_stat"][::core::mem::align_of::<mm_rss_stat>() - 8usize];
    ["Offset of field: mm_rss_stat::count"][::core::mem::offset_of!(mm_rss_stat, count) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page_frag {
    pub page: *mut page,
    pub offset: __u32,
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_frag"][::core::mem::size_of::<page_frag>() - 16usize];
    ["Alignment of page_frag"][::core::mem::align_of::<page_frag>() - 8usize];
    ["Offset of field: page_frag::page"][::core::mem::offset_of!(page_frag, page) - 0usize];
    ["Offset of field: page_frag::offset"][::core::mem::offset_of!(page_frag, offset) - 8usize];
    ["Offset of field: page_frag::size"][::core::mem::offset_of!(page_frag, size) - 12usize];
};
impl Default for page_frag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tlbflush_unmap_batch {
    pub arch: arch_tlbflush_unmap_batch,
    pub flush_required: bool_,
    pub writable: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tlbflush_unmap_batch"][::core::mem::size_of::<tlbflush_unmap_batch>() - 40usize];
    ["Alignment of tlbflush_unmap_batch"][::core::mem::align_of::<tlbflush_unmap_batch>() - 8usize];
    ["Offset of field: tlbflush_unmap_batch::arch"]
        [::core::mem::offset_of!(tlbflush_unmap_batch, arch) - 0usize];
    ["Offset of field: tlbflush_unmap_batch::flush_required"]
        [::core::mem::offset_of!(tlbflush_unmap_batch, flush_required) - 32usize];
    ["Offset of field: tlbflush_unmap_batch::writable"]
        [::core::mem::offset_of!(tlbflush_unmap_batch, writable) - 33usize];
};
#[doc = " typedef refcount_t - variant of atomic_t specialized for reference counts\n @refs: atomic_t counter field\n\n The counter saturates at REFCOUNT_SATURATED and will not move once\n there. This avoids wrapping the counter and causing 'spurious'\n use-after-free bugs."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct refcount_struct {
    pub refs: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of refcount_struct"][::core::mem::size_of::<refcount_struct>() - 4usize];
    ["Alignment of refcount_struct"][::core::mem::align_of::<refcount_struct>() - 4usize];
    ["Offset of field: refcount_struct::refs"]
        [::core::mem::offset_of!(refcount_struct, refs) - 0usize];
};
#[doc = " typedef refcount_t - variant of atomic_t specialized for reference counts\n @refs: atomic_t counter field\n\n The counter saturates at REFCOUNT_SATURATED and will not move once\n there. This avoids wrapping the counter and causing 'spurious'\n use-after-free bugs."]
pub type refcount_t = refcount_struct;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kref {
    pub refcount: refcount_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kref"][::core::mem::size_of::<kref>() - 4usize];
    ["Alignment of kref"][::core::mem::align_of::<kref>() - 4usize];
    ["Offset of field: kref::refcount"][::core::mem::offset_of!(kref, refcount) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    pub __rb_parent_color: core::ffi::c_ulong,
    pub rb_right: *mut rb_node,
    pub rb_left: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_node"][::core::mem::size_of::<rb_node>() - 24usize];
    ["Alignment of rb_node"][::core::mem::align_of::<rb_node>() - 8usize];
    ["Offset of field: rb_node::__rb_parent_color"]
        [::core::mem::offset_of!(rb_node, __rb_parent_color) - 0usize];
    ["Offset of field: rb_node::rb_right"][::core::mem::offset_of!(rb_node, rb_right) - 8usize];
    ["Offset of field: rb_node::rb_left"][::core::mem::offset_of!(rb_node, rb_left) - 16usize];
};
impl Default for rb_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root"][::core::mem::size_of::<rb_root>() - 8usize];
    ["Alignment of rb_root"][::core::mem::align_of::<rb_root>() - 8usize];
    ["Offset of field: rb_root::rb_node"][::core::mem::offset_of!(rb_root, rb_node) - 0usize];
};
impl Default for rb_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root_cached {
    pub rb_root: rb_root,
    pub rb_leftmost: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rb_root_cached"][::core::mem::size_of::<rb_root_cached>() - 16usize];
    ["Alignment of rb_root_cached"][::core::mem::align_of::<rb_root_cached>() - 8usize];
    ["Offset of field: rb_root_cached::rb_root"]
        [::core::mem::offset_of!(rb_root_cached, rb_root) - 0usize];
    ["Offset of field: rb_root_cached::rb_leftmost"]
        [::core::mem::offset_of!(rb_root_cached, rb_leftmost) - 8usize];
};
impl Default for rb_root_cached {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lockdep_map_p {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockdep_map_p"][::core::mem::size_of::<lockdep_map_p>() - 0usize];
    ["Alignment of lockdep_map_p"][::core::mem::align_of::<lockdep_map_p>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct maple_tree {
    pub __bindgen_anon_1: maple_tree__bindgen_ty_1,
    pub ma_root: *mut core::ffi::c_void,
    pub ma_flags: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union maple_tree__bindgen_ty_1 {
    pub ma_lock: spinlock_t,
    pub ma_external_lock: lockdep_map_p,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_tree__bindgen_ty_1"]
        [::core::mem::size_of::<maple_tree__bindgen_ty_1>() - 4usize];
    ["Alignment of maple_tree__bindgen_ty_1"]
        [::core::mem::align_of::<maple_tree__bindgen_ty_1>() - 4usize];
    ["Offset of field: maple_tree__bindgen_ty_1::ma_lock"]
        [::core::mem::offset_of!(maple_tree__bindgen_ty_1, ma_lock) - 0usize];
    ["Offset of field: maple_tree__bindgen_ty_1::ma_external_lock"]
        [::core::mem::offset_of!(maple_tree__bindgen_ty_1, ma_external_lock) - 0usize];
};
impl Default for maple_tree__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of maple_tree"][::core::mem::size_of::<maple_tree>() - 24usize];
    ["Alignment of maple_tree"][::core::mem::align_of::<maple_tree>() - 8usize];
    ["Offset of field: maple_tree::ma_root"][::core::mem::offset_of!(maple_tree, ma_root) - 8usize];
    ["Offset of field: maple_tree::ma_flags"]
        [::core::mem::offset_of!(maple_tree, ma_flags) - 16usize];
};
impl Default for maple_tree {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rw_semaphore {
    pub count: atomic_long_t,
    pub owner: atomic_long_t,
    pub osq: optimistic_spin_queue,
    pub wait_lock: raw_spinlock_t,
    pub wait_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rw_semaphore"][::core::mem::size_of::<rw_semaphore>() - 40usize];
    ["Alignment of rw_semaphore"][::core::mem::align_of::<rw_semaphore>() - 8usize];
    ["Offset of field: rw_semaphore::count"][::core::mem::offset_of!(rw_semaphore, count) - 0usize];
    ["Offset of field: rw_semaphore::owner"][::core::mem::offset_of!(rw_semaphore, owner) - 8usize];
    ["Offset of field: rw_semaphore::osq"][::core::mem::offset_of!(rw_semaphore, osq) - 16usize];
    ["Offset of field: rw_semaphore::wait_lock"]
        [::core::mem::offset_of!(rw_semaphore, wait_lock) - 20usize];
    ["Offset of field: rw_semaphore::wait_list"]
        [::core::mem::offset_of!(rw_semaphore, wait_list) - 24usize];
};
impl Default for rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct swait_queue_head {
    pub lock: raw_spinlock_t,
    pub task_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of swait_queue_head"][::core::mem::size_of::<swait_queue_head>() - 24usize];
    ["Alignment of swait_queue_head"][::core::mem::align_of::<swait_queue_head>() - 8usize];
    ["Offset of field: swait_queue_head::lock"]
        [::core::mem::offset_of!(swait_queue_head, lock) - 0usize];
    ["Offset of field: swait_queue_head::task_list"]
        [::core::mem::offset_of!(swait_queue_head, task_list) - 8usize];
};
impl Default for swait_queue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct completion {
    pub done: core::ffi::c_uint,
    pub wait: swait_queue_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of completion"][::core::mem::size_of::<completion>() - 32usize];
    ["Alignment of completion"][::core::mem::align_of::<completion>() - 8usize];
    ["Offset of field: completion::done"][::core::mem::offset_of!(completion, done) - 0usize];
    ["Offset of field: completion::wait"][::core::mem::offset_of!(completion, wait) - 8usize];
};
impl Default for completion {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type old_time32_t = s32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct old_timespec32 {
    pub tv_sec: old_time32_t,
    pub tv_nsec: s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of old_timespec32"][::core::mem::size_of::<old_timespec32>() - 8usize];
    ["Alignment of old_timespec32"][::core::mem::align_of::<old_timespec32>() - 4usize];
    ["Offset of field: old_timespec32::tv_sec"]
        [::core::mem::offset_of!(old_timespec32, tv_sec) - 0usize];
    ["Offset of field: old_timespec32::tv_nsec"]
        [::core::mem::offset_of!(old_timespec32, tv_nsec) - 4usize];
};
pub type ktime_t = s64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timer_list {
    pub entry: hlist_node,
    pub expires: core::ffi::c_ulong,
    pub function: ::core::option::Option<unsafe extern "C" fn(arg1: *mut timer_list)>,
    pub flags: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timer_list"][::core::mem::size_of::<timer_list>() - 40usize];
    ["Alignment of timer_list"][::core::mem::align_of::<timer_list>() - 8usize];
    ["Offset of field: timer_list::entry"][::core::mem::offset_of!(timer_list, entry) - 0usize];
    ["Offset of field: timer_list::expires"]
        [::core::mem::offset_of!(timer_list, expires) - 16usize];
    ["Offset of field: timer_list::function"]
        [::core::mem::offset_of!(timer_list, function) - 24usize];
    ["Offset of field: timer_list::flags"][::core::mem::offset_of!(timer_list, flags) - 32usize];
};
impl Default for timer_list {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_struct {
    _unused: [u8; 0],
}
pub type work_func_t = ::core::option::Option<unsafe extern "C" fn(work: *mut work_struct)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct work_struct {
    pub data: atomic_long_t,
    pub entry: list_head,
    pub func: work_func_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of work_struct"][::core::mem::size_of::<work_struct>() - 32usize];
    ["Alignment of work_struct"][::core::mem::align_of::<work_struct>() - 8usize];
    ["Offset of field: work_struct::data"][::core::mem::offset_of!(work_struct, data) - 0usize];
    ["Offset of field: work_struct::entry"][::core::mem::offset_of!(work_struct, entry) - 8usize];
    ["Offset of field: work_struct::func"][::core::mem::offset_of!(work_struct, func) - 24usize];
};
impl Default for work_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delayed_work {
    pub work: work_struct,
    pub timer: timer_list,
    pub wq: *mut workqueue_struct,
    pub cpu: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of delayed_work"][::core::mem::size_of::<delayed_work>() - 88usize];
    ["Alignment of delayed_work"][::core::mem::align_of::<delayed_work>() - 8usize];
    ["Offset of field: delayed_work::work"][::core::mem::offset_of!(delayed_work, work) - 0usize];
    ["Offset of field: delayed_work::timer"]
        [::core::mem::offset_of!(delayed_work, timer) - 32usize];
    ["Offset of field: delayed_work::wq"][::core::mem::offset_of!(delayed_work, wq) - 72usize];
    ["Offset of field: delayed_work::cpu"][::core::mem::offset_of!(delayed_work, cpu) - 80usize];
};
impl Default for delayed_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcu_segcblist {
    pub head: *mut callback_head,
    pub tails: [*mut *mut callback_head; 4usize],
    pub gp_seq: [core::ffi::c_ulong; 4usize],
    pub len: core::ffi::c_long,
    pub seglen: [core::ffi::c_long; 4usize],
    pub flags: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_segcblist"][::core::mem::size_of::<rcu_segcblist>() - 120usize];
    ["Alignment of rcu_segcblist"][::core::mem::align_of::<rcu_segcblist>() - 8usize];
    ["Offset of field: rcu_segcblist::head"][::core::mem::offset_of!(rcu_segcblist, head) - 0usize];
    ["Offset of field: rcu_segcblist::tails"]
        [::core::mem::offset_of!(rcu_segcblist, tails) - 8usize];
    ["Offset of field: rcu_segcblist::gp_seq"]
        [::core::mem::offset_of!(rcu_segcblist, gp_seq) - 40usize];
    ["Offset of field: rcu_segcblist::len"][::core::mem::offset_of!(rcu_segcblist, len) - 72usize];
    ["Offset of field: rcu_segcblist::seglen"]
        [::core::mem::offset_of!(rcu_segcblist, seglen) - 80usize];
    ["Offset of field: rcu_segcblist::flags"]
        [::core::mem::offset_of!(rcu_segcblist, flags) - 112usize];
};
impl Default for rcu_segcblist {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct srcu_data {
    pub srcu_lock_count: [core::ffi::c_ulong; 2usize],
    pub srcu_unlock_count: [core::ffi::c_ulong; 2usize],
    pub __bindgen_padding_0: [u32; 8usize],
    pub lock: spinlock_t,
    pub srcu_cblist: rcu_segcblist,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_cblist_invoking: bool_,
    pub delay_work: timer_list,
    pub work: work_struct,
    pub srcu_barrier_head: callback_head,
    pub mynode: *mut srcu_node,
    pub grpmask: core::ffi::c_ulong,
    pub cpu: core::ffi::c_int,
    pub ssp: *mut srcu_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_data"][::core::mem::size_of::<srcu_data>() - 384usize];
    ["Alignment of srcu_data"][::core::mem::align_of::<srcu_data>() - 64usize];
    ["Offset of field: srcu_data::srcu_lock_count"]
        [::core::mem::offset_of!(srcu_data, srcu_lock_count) - 0usize];
    ["Offset of field: srcu_data::srcu_unlock_count"]
        [::core::mem::offset_of!(srcu_data, srcu_unlock_count) - 16usize];
    ["Offset of field: srcu_data::lock"][::core::mem::offset_of!(srcu_data, lock) - 64usize];
    ["Offset of field: srcu_data::srcu_cblist"]
        [::core::mem::offset_of!(srcu_data, srcu_cblist) - 72usize];
    ["Offset of field: srcu_data::srcu_gp_seq_needed"]
        [::core::mem::offset_of!(srcu_data, srcu_gp_seq_needed) - 192usize];
    ["Offset of field: srcu_data::srcu_gp_seq_needed_exp"]
        [::core::mem::offset_of!(srcu_data, srcu_gp_seq_needed_exp) - 200usize];
    ["Offset of field: srcu_data::srcu_cblist_invoking"]
        [::core::mem::offset_of!(srcu_data, srcu_cblist_invoking) - 208usize];
    ["Offset of field: srcu_data::delay_work"]
        [::core::mem::offset_of!(srcu_data, delay_work) - 216usize];
    ["Offset of field: srcu_data::work"][::core::mem::offset_of!(srcu_data, work) - 256usize];
    ["Offset of field: srcu_data::srcu_barrier_head"]
        [::core::mem::offset_of!(srcu_data, srcu_barrier_head) - 288usize];
    ["Offset of field: srcu_data::mynode"][::core::mem::offset_of!(srcu_data, mynode) - 304usize];
    ["Offset of field: srcu_data::grpmask"][::core::mem::offset_of!(srcu_data, grpmask) - 312usize];
    ["Offset of field: srcu_data::cpu"][::core::mem::offset_of!(srcu_data, cpu) - 320usize];
    ["Offset of field: srcu_data::ssp"][::core::mem::offset_of!(srcu_data, ssp) - 328usize];
};
impl Default for srcu_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_node {
    pub lock: spinlock_t,
    pub srcu_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_data_have_cbs: [core::ffi::c_ulong; 4usize],
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_parent: *mut srcu_node,
    pub grplo: core::ffi::c_int,
    pub grphi: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_node"][::core::mem::size_of::<srcu_node>() - 96usize];
    ["Alignment of srcu_node"][::core::mem::align_of::<srcu_node>() - 8usize];
    ["Offset of field: srcu_node::lock"][::core::mem::offset_of!(srcu_node, lock) - 0usize];
    ["Offset of field: srcu_node::srcu_have_cbs"]
        [::core::mem::offset_of!(srcu_node, srcu_have_cbs) - 8usize];
    ["Offset of field: srcu_node::srcu_data_have_cbs"]
        [::core::mem::offset_of!(srcu_node, srcu_data_have_cbs) - 40usize];
    ["Offset of field: srcu_node::srcu_gp_seq_needed_exp"]
        [::core::mem::offset_of!(srcu_node, srcu_gp_seq_needed_exp) - 72usize];
    ["Offset of field: srcu_node::srcu_parent"]
        [::core::mem::offset_of!(srcu_node, srcu_parent) - 80usize];
    ["Offset of field: srcu_node::grplo"][::core::mem::offset_of!(srcu_node, grplo) - 88usize];
    ["Offset of field: srcu_node::grphi"][::core::mem::offset_of!(srcu_node, grphi) - 92usize];
};
impl Default for srcu_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct srcu_struct {
    pub node: *mut srcu_node,
    pub level: [*mut srcu_node; 3usize],
    pub srcu_size_state: core::ffi::c_int,
    pub srcu_cb_mutex: mutex,
    pub lock: spinlock_t,
    pub srcu_gp_mutex: mutex,
    pub srcu_idx: core::ffi::c_uint,
    pub srcu_gp_seq: core::ffi::c_ulong,
    pub srcu_gp_seq_needed: core::ffi::c_ulong,
    pub srcu_gp_seq_needed_exp: core::ffi::c_ulong,
    pub srcu_gp_start: core::ffi::c_ulong,
    pub srcu_last_gp_end: core::ffi::c_ulong,
    pub srcu_size_jiffies: core::ffi::c_ulong,
    pub srcu_n_lock_retries: core::ffi::c_ulong,
    pub srcu_n_exp_nodelay: core::ffi::c_ulong,
    pub sda: *mut srcu_data,
    pub sda_is_static: bool_,
    pub srcu_barrier_seq: core::ffi::c_ulong,
    pub srcu_barrier_mutex: mutex,
    pub srcu_barrier_completion: completion,
    pub srcu_barrier_cpu_cnt: atomic_t,
    pub reschedule_jiffies: core::ffi::c_ulong,
    pub reschedule_count: core::ffi::c_ulong,
    pub work: delayed_work,
    pub dep_map: lockdep_map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of srcu_struct"][::core::mem::size_of::<srcu_struct>() - 384usize];
    ["Alignment of srcu_struct"][::core::mem::align_of::<srcu_struct>() - 8usize];
    ["Offset of field: srcu_struct::node"][::core::mem::offset_of!(srcu_struct, node) - 0usize];
    ["Offset of field: srcu_struct::level"][::core::mem::offset_of!(srcu_struct, level) - 8usize];
    ["Offset of field: srcu_struct::srcu_size_state"]
        [::core::mem::offset_of!(srcu_struct, srcu_size_state) - 32usize];
    ["Offset of field: srcu_struct::srcu_cb_mutex"]
        [::core::mem::offset_of!(srcu_struct, srcu_cb_mutex) - 40usize];
    ["Offset of field: srcu_struct::lock"][::core::mem::offset_of!(srcu_struct, lock) - 72usize];
    ["Offset of field: srcu_struct::srcu_gp_mutex"]
        [::core::mem::offset_of!(srcu_struct, srcu_gp_mutex) - 80usize];
    ["Offset of field: srcu_struct::srcu_idx"]
        [::core::mem::offset_of!(srcu_struct, srcu_idx) - 112usize];
    ["Offset of field: srcu_struct::srcu_gp_seq"]
        [::core::mem::offset_of!(srcu_struct, srcu_gp_seq) - 120usize];
    ["Offset of field: srcu_struct::srcu_gp_seq_needed"]
        [::core::mem::offset_of!(srcu_struct, srcu_gp_seq_needed) - 128usize];
    ["Offset of field: srcu_struct::srcu_gp_seq_needed_exp"]
        [::core::mem::offset_of!(srcu_struct, srcu_gp_seq_needed_exp) - 136usize];
    ["Offset of field: srcu_struct::srcu_gp_start"]
        [::core::mem::offset_of!(srcu_struct, srcu_gp_start) - 144usize];
    ["Offset of field: srcu_struct::srcu_last_gp_end"]
        [::core::mem::offset_of!(srcu_struct, srcu_last_gp_end) - 152usize];
    ["Offset of field: srcu_struct::srcu_size_jiffies"]
        [::core::mem::offset_of!(srcu_struct, srcu_size_jiffies) - 160usize];
    ["Offset of field: srcu_struct::srcu_n_lock_retries"]
        [::core::mem::offset_of!(srcu_struct, srcu_n_lock_retries) - 168usize];
    ["Offset of field: srcu_struct::srcu_n_exp_nodelay"]
        [::core::mem::offset_of!(srcu_struct, srcu_n_exp_nodelay) - 176usize];
    ["Offset of field: srcu_struct::sda"][::core::mem::offset_of!(srcu_struct, sda) - 184usize];
    ["Offset of field: srcu_struct::sda_is_static"]
        [::core::mem::offset_of!(srcu_struct, sda_is_static) - 192usize];
    ["Offset of field: srcu_struct::srcu_barrier_seq"]
        [::core::mem::offset_of!(srcu_struct, srcu_barrier_seq) - 200usize];
    ["Offset of field: srcu_struct::srcu_barrier_mutex"]
        [::core::mem::offset_of!(srcu_struct, srcu_barrier_mutex) - 208usize];
    ["Offset of field: srcu_struct::srcu_barrier_completion"]
        [::core::mem::offset_of!(srcu_struct, srcu_barrier_completion) - 240usize];
    ["Offset of field: srcu_struct::srcu_barrier_cpu_cnt"]
        [::core::mem::offset_of!(srcu_struct, srcu_barrier_cpu_cnt) - 272usize];
    ["Offset of field: srcu_struct::reschedule_jiffies"]
        [::core::mem::offset_of!(srcu_struct, reschedule_jiffies) - 280usize];
    ["Offset of field: srcu_struct::reschedule_count"]
        [::core::mem::offset_of!(srcu_struct, reschedule_count) - 288usize];
    ["Offset of field: srcu_struct::work"][::core::mem::offset_of!(srcu_struct, work) - 296usize];
    ["Offset of field: srcu_struct::dep_map"]
        [::core::mem::offset_of!(srcu_struct, dep_map) - 384usize];
};
impl Default for srcu_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_uprobe_task {
    pub saved_scratch_register: core::ffi::c_ulong,
    pub saved_trap_nr: core::ffi::c_uint,
    pub saved_tf: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_uprobe_task"][::core::mem::size_of::<arch_uprobe_task>() - 16usize];
    ["Alignment of arch_uprobe_task"][::core::mem::align_of::<arch_uprobe_task>() - 8usize];
    ["Offset of field: arch_uprobe_task::saved_scratch_register"]
        [::core::mem::offset_of!(arch_uprobe_task, saved_scratch_register) - 0usize];
    ["Offset of field: arch_uprobe_task::saved_trap_nr"]
        [::core::mem::offset_of!(arch_uprobe_task, saved_trap_nr) - 8usize];
    ["Offset of field: arch_uprobe_task::saved_tf"]
        [::core::mem::offset_of!(arch_uprobe_task, saved_tf) - 12usize];
};
pub const uprobe_task_state_UTASK_RUNNING: uprobe_task_state = 0;
pub const uprobe_task_state_UTASK_SSTEP: uprobe_task_state = 1;
pub const uprobe_task_state_UTASK_SSTEP_ACK: uprobe_task_state = 2;
pub const uprobe_task_state_UTASK_SSTEP_TRAPPED: uprobe_task_state = 3;
pub type uprobe_task_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct uprobe_task {
    pub state: uprobe_task_state,
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1,
    pub active_uprobe: *mut uprobe,
    pub xol_vaddr: core::ffi::c_ulong,
    pub return_instances: *mut return_instance,
    pub depth: core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union uprobe_task__bindgen_ty_1 {
    pub __bindgen_anon_1: uprobe_task__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: uprobe_task__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_1 {
    pub autask: arch_uprobe_task,
    pub vaddr: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<uprobe_task__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<uprobe_task__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_1::autask"]
        [::core::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_1, autask) - 0usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_1::vaddr"]
        [::core::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_1, vaddr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobe_task__bindgen_ty_1__bindgen_ty_2 {
    pub dup_xol_work: callback_head,
    pub dup_xol_addr: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<uprobe_task__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<uprobe_task__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_2::dup_xol_work"]
        [::core::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_2, dup_xol_work) - 0usize];
    ["Offset of field: uprobe_task__bindgen_ty_1__bindgen_ty_2::dup_xol_addr"]
        [::core::mem::offset_of!(uprobe_task__bindgen_ty_1__bindgen_ty_2, dup_xol_addr) - 16usize];
};
impl Default for uprobe_task__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task__bindgen_ty_1"]
        [::core::mem::size_of::<uprobe_task__bindgen_ty_1>() - 24usize];
    ["Alignment of uprobe_task__bindgen_ty_1"]
        [::core::mem::align_of::<uprobe_task__bindgen_ty_1>() - 8usize];
};
impl Default for uprobe_task__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobe_task"][::core::mem::size_of::<uprobe_task>() - 64usize];
    ["Alignment of uprobe_task"][::core::mem::align_of::<uprobe_task>() - 8usize];
    ["Offset of field: uprobe_task::state"][::core::mem::offset_of!(uprobe_task, state) - 0usize];
    ["Offset of field: uprobe_task::active_uprobe"]
        [::core::mem::offset_of!(uprobe_task, active_uprobe) - 32usize];
    ["Offset of field: uprobe_task::xol_vaddr"]
        [::core::mem::offset_of!(uprobe_task, xol_vaddr) - 40usize];
    ["Offset of field: uprobe_task::return_instances"]
        [::core::mem::offset_of!(uprobe_task, return_instances) - 48usize];
    ["Offset of field: uprobe_task::depth"][::core::mem::offset_of!(uprobe_task, depth) - 56usize];
};
impl Default for uprobe_task {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct return_instance {
    pub uprobe: *mut uprobe,
    pub func: core::ffi::c_ulong,
    pub stack: core::ffi::c_ulong,
    pub orig_ret_vaddr: core::ffi::c_ulong,
    pub chained: bool_,
    pub next: *mut return_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of return_instance"][::core::mem::size_of::<return_instance>() - 48usize];
    ["Alignment of return_instance"][::core::mem::align_of::<return_instance>() - 8usize];
    ["Offset of field: return_instance::uprobe"]
        [::core::mem::offset_of!(return_instance, uprobe) - 0usize];
    ["Offset of field: return_instance::func"]
        [::core::mem::offset_of!(return_instance, func) - 8usize];
    ["Offset of field: return_instance::stack"]
        [::core::mem::offset_of!(return_instance, stack) - 16usize];
    ["Offset of field: return_instance::orig_ret_vaddr"]
        [::core::mem::offset_of!(return_instance, orig_ret_vaddr) - 24usize];
    ["Offset of field: return_instance::chained"]
        [::core::mem::offset_of!(return_instance, chained) - 32usize];
    ["Offset of field: return_instance::next"]
        [::core::mem::offset_of!(return_instance, next) - 40usize];
};
impl Default for return_instance {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xol_area {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uprobes_state {
    pub xol_area: *mut xol_area,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uprobes_state"][::core::mem::size_of::<uprobes_state>() - 8usize];
    ["Alignment of uprobes_state"][::core::mem::align_of::<uprobes_state>() - 8usize];
    ["Offset of field: uprobes_state::xol_area"]
        [::core::mem::offset_of!(uprobes_state, xol_area) - 0usize];
};
impl Default for uprobes_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_context_t {
    pub ctx_id: u64_,
    pub tlb_gen: atomic64_t,
    pub ldt_usr_sem: rw_semaphore,
    pub ldt: *mut ldt_struct,
    pub flags: core::ffi::c_ushort,
    pub lock: mutex,
    pub vdso: *mut core::ffi::c_void,
    pub vdso_image: *const vdso_image,
    pub perf_rdpmc_allowed: atomic_t,
    pub pkey_allocation_map: u16_,
    pub execute_only_pkey: s16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_context_t"][::core::mem::size_of::<mm_context_t>() - 128usize];
    ["Alignment of mm_context_t"][::core::mem::align_of::<mm_context_t>() - 8usize];
    ["Offset of field: mm_context_t::ctx_id"]
        [::core::mem::offset_of!(mm_context_t, ctx_id) - 0usize];
    ["Offset of field: mm_context_t::tlb_gen"]
        [::core::mem::offset_of!(mm_context_t, tlb_gen) - 8usize];
    ["Offset of field: mm_context_t::ldt_usr_sem"]
        [::core::mem::offset_of!(mm_context_t, ldt_usr_sem) - 16usize];
    ["Offset of field: mm_context_t::ldt"][::core::mem::offset_of!(mm_context_t, ldt) - 56usize];
    ["Offset of field: mm_context_t::flags"]
        [::core::mem::offset_of!(mm_context_t, flags) - 64usize];
    ["Offset of field: mm_context_t::lock"][::core::mem::offset_of!(mm_context_t, lock) - 72usize];
    ["Offset of field: mm_context_t::vdso"][::core::mem::offset_of!(mm_context_t, vdso) - 104usize];
    ["Offset of field: mm_context_t::vdso_image"]
        [::core::mem::offset_of!(mm_context_t, vdso_image) - 112usize];
    ["Offset of field: mm_context_t::perf_rdpmc_allowed"]
        [::core::mem::offset_of!(mm_context_t, perf_rdpmc_allowed) - 120usize];
    ["Offset of field: mm_context_t::pkey_allocation_map"]
        [::core::mem::offset_of!(mm_context_t, pkey_allocation_map) - 124usize];
    ["Offset of field: mm_context_t::execute_only_pkey"]
        [::core::mem::offset_of!(mm_context_t, execute_only_pkey) - 126usize];
};
impl Default for mm_context_t {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_cgroup {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct page {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_2,
    pub _refcount: atomic_t,
    pub memcg_data: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: page__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: page__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: page__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: page__bindgen_ty_1__bindgen_ty_5,
    pub __bindgen_anon_6: page__bindgen_ty_1__bindgen_ty_6,
    pub callback_head: callback_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub index: core::ffi::c_ulong,
    #[doc = " @private: Mapping-private opaque data.\n Usually used for buffer_heads if PagePrivate.\n Used for swp_entry_t if PageSwapCache.\n Indicates order in the buddy system if PageBuddy."]
    pub private: core::ffi::c_ulong,
}
#[doc = " @lru: Pageout list, eg. active_list protected by\n lruvec->lru_lock.  Sometimes used as a generic list\n by the page owner."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub buddy_list: list_head,
    pub pcp_list: list_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::__filler"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        __filler
    )
        - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::mlock_count"] [:: core :: mem :: offset_of ! (page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , mlock_count) - 8usize] ;
};
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::lru"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, lru) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::buddy_list"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        buddy_list
    ) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::pcp_list"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        pcp_list
    ) - 0usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_1>() - 40usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1::mapping"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1, mapping) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1::index"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1, index) - 24usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_1::private"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_1, private) - 32usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_2 {
    #[doc = " @pp_magic: magic value to avoid recycling non\n page_pool allocated pages."]
    pub pp_magic: core::ffi::c_ulong,
    pub pp: *mut page_pool,
    pub _pp_mapping_pad: core::ffi::c_ulong,
    pub dma_addr: core::ffi::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    #[doc = " dma_addr_upper: might require a 64-bit\n value on 32-bit architectures."]
    pub dma_addr_upper: core::ffi::c_ulong,
    #[doc = " For frag page support, not supported in\n 32-bit architectures with 64-bit DMA."]
    pub pp_frag_count: atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::dma_addr_upper"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        dma_addr_upper
    ) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::pp_frag_count"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        pp_frag_count
    ) - 0usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_2>() - 40usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::pp_magic"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, pp_magic) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::pp"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, pp) - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::_pp_mapping_pad"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, _pp_mapping_pad) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_2::dma_addr"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_2, dma_addr) - 24usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_3 {
    pub compound_head: core::ffi::c_ulong,
    pub compound_dtor: core::ffi::c_uchar,
    pub compound_order: core::ffi::c_uchar,
    pub compound_mapcount: atomic_t,
    pub compound_pincount: atomic_t,
    pub compound_nr: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_3>() - 24usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_head"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_head) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_dtor"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_dtor) - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_order"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_order) - 9usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_mapcount"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_mapcount) - 12usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_pincount"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_pincount) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_3::compound_nr"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_3, compound_nr) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_4 {
    pub _compound_pad_1: core::ffi::c_ulong,
    pub _compound_pad_2: core::ffi::c_ulong,
    pub deferred_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_4"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_4::_compound_pad_1"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_4, _compound_pad_1) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_4::_compound_pad_2"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_4, _compound_pad_2) - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_4::deferred_list"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_4, deferred_list) - 16usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_5 {
    pub _pt_pad_1: core::ffi::c_ulong,
    pub pmd_huge_pte: pgtable_t,
    pub _pt_pad_2: core::ffi::c_ulong,
    pub __bindgen_anon_1: page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub ptl: spinlock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub pt_mm: *mut mm_struct,
    pub pt_frag_refcount: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::pt_mm"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1, pt_mm) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::pt_frag_refcount"][::core::mem::offset_of!(
        page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        pt_frag_refcount
    )
        - 0usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_5"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_5>() - 40usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_5"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5::_pt_pad_1"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_5, _pt_pad_1) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5::pmd_huge_pte"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_5, pmd_huge_pte) - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5::_pt_pad_2"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_5, _pt_pad_2) - 16usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_5::ptl"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_5, ptl) - 32usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct page__bindgen_ty_1__bindgen_ty_6 {
    #[doc = " @pgmap: Points to the hosting device page map."]
    pub pgmap: *mut dev_pagemap,
    pub zone_device_data: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1__bindgen_ty_6"]
        [::core::mem::size_of::<page__bindgen_ty_1__bindgen_ty_6>() - 16usize];
    ["Alignment of page__bindgen_ty_1__bindgen_ty_6"]
        [::core::mem::align_of::<page__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_6::pgmap"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_6, pgmap) - 0usize];
    ["Offset of field: page__bindgen_ty_1__bindgen_ty_6::zone_device_data"]
        [::core::mem::offset_of!(page__bindgen_ty_1__bindgen_ty_6, zone_device_data) - 8usize];
};
impl Default for page__bindgen_ty_1__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_1"][::core::mem::size_of::<page__bindgen_ty_1>() - 40usize];
    ["Alignment of page__bindgen_ty_1"][::core::mem::align_of::<page__bindgen_ty_1>() - 8usize];
    ["Offset of field: page__bindgen_ty_1::callback_head"]
        [::core::mem::offset_of!(page__bindgen_ty_1, callback_head) - 0usize];
};
impl Default for page__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union page__bindgen_ty_2 {
    pub _mapcount: atomic_t,
    pub page_type: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page__bindgen_ty_2"][::core::mem::size_of::<page__bindgen_ty_2>() - 4usize];
    ["Alignment of page__bindgen_ty_2"][::core::mem::align_of::<page__bindgen_ty_2>() - 4usize];
    ["Offset of field: page__bindgen_ty_2::_mapcount"]
        [::core::mem::offset_of!(page__bindgen_ty_2, _mapcount) - 0usize];
    ["Offset of field: page__bindgen_ty_2::page_type"]
        [::core::mem::offset_of!(page__bindgen_ty_2, page_type) - 0usize];
};
impl Default for page__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page"][::core::mem::size_of::<page>() - 64usize];
    ["Alignment of page"][::core::mem::align_of::<page>() - 16usize];
    ["Offset of field: page::flags"][::core::mem::offset_of!(page, flags) - 0usize];
    ["Offset of field: page::_refcount"][::core::mem::offset_of!(page, _refcount) - 52usize];
    ["Offset of field: page::memcg_data"][::core::mem::offset_of!(page, memcg_data) - 56usize];
};
impl Default for page {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct folio - Represents a contiguous set of bytes.\n @flags: Identical to the page flags.\n @lru: Least Recently Used list; tracks how recently this folio was used.\n @mlock_count: Number of times this folio has been pinned by mlock().\n @mapping: The file this page belongs to, or refers to the anon_vma for\n    anonymous memory.\n @index: Offset within the file, in units of pages.  For anonymous memory,\n    this is the index from the beginning of the mmap.\n @private: Filesystem per-folio data (see folio_attach_private()).\n    Used for swp_entry_t if folio_test_swapcache().\n @_mapcount: Do not access this member directly.  Use folio_mapcount() to\n    find out how many times this folio is mapped by userspace.\n @_refcount: Do not access this member directly.  Use folio_ref_count()\n    to find how many references there are to this folio.\n @memcg_data: Memory Control Group data.\n @_flags_1: For large folios, additional page flags.\n @__head: Points to the folio.  Do not use.\n @_folio_dtor: Which destructor to use for this folio.\n @_folio_order: Do not use directly, call folio_order().\n @_total_mapcount: Do not use directly, call folio_entire_mapcount().\n @_pincount: Do not use directly, call folio_maybe_dma_pinned().\n @_folio_nr_pages: Do not use directly, call folio_nr_pages().\n\n A folio is a physically, virtually and logically contiguous set\n of bytes.  It is a power-of-two in size, and it is aligned to that\n same power-of-two.  It is at least as large as %PAGE_SIZE.  If it is\n in the page cache, it is at a file offset which is a multiple of that\n power-of-two.  It may be mapped into userspace at an address which is\n at an arbitrary page offset, but its kernel virtual address is aligned\n to its size."]
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct folio {
    pub __bindgen_anon_1: folio__bindgen_ty_1,
    pub _flags_1: core::ffi::c_ulong,
    pub __head: core::ffi::c_ulong,
    pub _folio_dtor: core::ffi::c_uchar,
    pub _folio_order: core::ffi::c_uchar,
    pub _total_mapcount: atomic_t,
    pub _pincount: atomic_t,
    pub _folio_nr_pages: core::ffi::c_uint,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1 {
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1,
    pub page: page,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1 {
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub mapping: *mut address_space,
    pub index: core::ffi::c_ulong,
    pub private: *mut core::ffi::c_void,
    pub _mapcount: atomic_t,
    pub _refcount: atomic_t,
    pub memcg_data: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub lru: list_head,
    pub __bindgen_anon_1: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __filler: *mut core::ffi::c_void,
    pub mlock_count: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::core::mem::size_of::<
        folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::__filler"][::core::mem::offset_of!(
        folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        __filler
    )
        - 0usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::mlock_count"] [:: core :: mem :: offset_of ! (folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , mlock_count) - 8usize] ;
};
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::lru"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1, lru) - 0usize];
};
impl Default for folio__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<folio__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of folio__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<folio__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::flags"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, flags) - 0usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::mapping"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, mapping) - 24usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::index"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, index) - 32usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::private"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, private) - 40usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::_mapcount"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, _mapcount) - 48usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::_refcount"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, _refcount) - 52usize];
    ["Offset of field: folio__bindgen_ty_1__bindgen_ty_1::memcg_data"]
        [::core::mem::offset_of!(folio__bindgen_ty_1__bindgen_ty_1, memcg_data) - 56usize];
};
impl Default for folio__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio__bindgen_ty_1"][::core::mem::size_of::<folio__bindgen_ty_1>() - 64usize];
    ["Alignment of folio__bindgen_ty_1"][::core::mem::align_of::<folio__bindgen_ty_1>() - 16usize];
    ["Offset of field: folio__bindgen_ty_1::page"]
        [::core::mem::offset_of!(folio__bindgen_ty_1, page) - 0usize];
};
impl Default for folio__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of folio"][::core::mem::size_of::<folio>() - 96usize];
    ["Alignment of folio"][::core::mem::align_of::<folio>() - 16usize];
    ["Offset of field: folio::_flags_1"][::core::mem::offset_of!(folio, _flags_1) - 64usize];
    ["Offset of field: folio::__head"][::core::mem::offset_of!(folio, __head) - 72usize];
    ["Offset of field: folio::_folio_dtor"][::core::mem::offset_of!(folio, _folio_dtor) - 80usize];
    ["Offset of field: folio::_folio_order"]
        [::core::mem::offset_of!(folio, _folio_order) - 81usize];
    ["Offset of field: folio::_total_mapcount"]
        [::core::mem::offset_of!(folio, _total_mapcount) - 84usize];
    ["Offset of field: folio::_pincount"][::core::mem::offset_of!(folio, _pincount) - 88usize];
    ["Offset of field: folio::_folio_nr_pages"]
        [::core::mem::offset_of!(folio, _folio_nr_pages) - 92usize];
};
impl Default for folio {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_userfaultfd_ctx {
    pub ctx: *mut userfaultfd_ctx,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_userfaultfd_ctx"][::core::mem::size_of::<vm_userfaultfd_ctx>() - 8usize];
    ["Alignment of vm_userfaultfd_ctx"][::core::mem::align_of::<vm_userfaultfd_ctx>() - 8usize];
    ["Offset of field: vm_userfaultfd_ctx::ctx"]
        [::core::mem::offset_of!(vm_userfaultfd_ctx, ctx) - 0usize];
};
impl Default for vm_userfaultfd_ctx {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct anon_vma_name {
    pub kref: kref,
    pub name: __IncompleteArrayField<core::ffi::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of anon_vma_name"][::core::mem::size_of::<anon_vma_name>() - 4usize];
    ["Alignment of anon_vma_name"][::core::mem::align_of::<anon_vma_name>() - 4usize];
    ["Offset of field: anon_vma_name::kref"][::core::mem::offset_of!(anon_vma_name, kref) - 0usize];
    ["Offset of field: anon_vma_name::name"][::core::mem::offset_of!(anon_vma_name, name) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_area_struct {
    pub vm_start: core::ffi::c_ulong,
    pub vm_end: core::ffi::c_ulong,
    pub vm_mm: *mut mm_struct,
    pub vm_page_prot: pgprot_t,
    pub vm_flags: core::ffi::c_ulong,
    pub __bindgen_anon_1: vm_area_struct__bindgen_ty_1,
    pub anon_vma_chain: list_head,
    pub anon_vma: *mut anon_vma,
    pub vm_ops: *const vm_operations_struct,
    pub vm_pgoff: core::ffi::c_ulong,
    pub vm_file: *mut file,
    pub vm_private_data: *mut core::ffi::c_void,
    pub swap_readahead_info: atomic_long_t,
    pub vm_userfaultfd_ctx: vm_userfaultfd_ctx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_area_struct__bindgen_ty_1 {
    pub shared: vm_area_struct__bindgen_ty_1__bindgen_ty_1,
    pub anon_name: *mut anon_vma_name,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_area_struct__bindgen_ty_1__bindgen_ty_1 {
    pub rb: rb_node,
    pub rb_subtree_last: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<vm_area_struct__bindgen_ty_1__bindgen_ty_1>() - 32usize];
    ["Alignment of vm_area_struct__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<vm_area_struct__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1__bindgen_ty_1::rb"]
        [::core::mem::offset_of!(vm_area_struct__bindgen_ty_1__bindgen_ty_1, rb) - 0usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1__bindgen_ty_1::rb_subtree_last"][::core::mem::offset_of!(
        vm_area_struct__bindgen_ty_1__bindgen_ty_1,
        rb_subtree_last
    ) - 24usize];
};
impl Default for vm_area_struct__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct__bindgen_ty_1"]
        [::core::mem::size_of::<vm_area_struct__bindgen_ty_1>() - 32usize];
    ["Alignment of vm_area_struct__bindgen_ty_1"]
        [::core::mem::align_of::<vm_area_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1::shared"]
        [::core::mem::offset_of!(vm_area_struct__bindgen_ty_1, shared) - 0usize];
    ["Offset of field: vm_area_struct__bindgen_ty_1::anon_name"]
        [::core::mem::offset_of!(vm_area_struct__bindgen_ty_1, anon_name) - 0usize];
};
impl Default for vm_area_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_area_struct"][::core::mem::size_of::<vm_area_struct>() - 144usize];
    ["Alignment of vm_area_struct"][::core::mem::align_of::<vm_area_struct>() - 8usize];
    ["Offset of field: vm_area_struct::vm_start"]
        [::core::mem::offset_of!(vm_area_struct, vm_start) - 0usize];
    ["Offset of field: vm_area_struct::vm_end"]
        [::core::mem::offset_of!(vm_area_struct, vm_end) - 8usize];
    ["Offset of field: vm_area_struct::vm_mm"]
        [::core::mem::offset_of!(vm_area_struct, vm_mm) - 16usize];
    ["Offset of field: vm_area_struct::vm_page_prot"]
        [::core::mem::offset_of!(vm_area_struct, vm_page_prot) - 24usize];
    ["Offset of field: vm_area_struct::vm_flags"]
        [::core::mem::offset_of!(vm_area_struct, vm_flags) - 32usize];
    ["Offset of field: vm_area_struct::anon_vma_chain"]
        [::core::mem::offset_of!(vm_area_struct, anon_vma_chain) - 72usize];
    ["Offset of field: vm_area_struct::anon_vma"]
        [::core::mem::offset_of!(vm_area_struct, anon_vma) - 88usize];
    ["Offset of field: vm_area_struct::vm_ops"]
        [::core::mem::offset_of!(vm_area_struct, vm_ops) - 96usize];
    ["Offset of field: vm_area_struct::vm_pgoff"]
        [::core::mem::offset_of!(vm_area_struct, vm_pgoff) - 104usize];
    ["Offset of field: vm_area_struct::vm_file"]
        [::core::mem::offset_of!(vm_area_struct, vm_file) - 112usize];
    ["Offset of field: vm_area_struct::vm_private_data"]
        [::core::mem::offset_of!(vm_area_struct, vm_private_data) - 120usize];
    ["Offset of field: vm_area_struct::swap_readahead_info"]
        [::core::mem::offset_of!(vm_area_struct, swap_readahead_info) - 128usize];
    ["Offset of field: vm_area_struct::vm_userfaultfd_ctx"]
        [::core::mem::offset_of!(vm_area_struct, vm_userfaultfd_ctx) - 136usize];
};
impl Default for vm_area_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kioctx_table {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct mm_struct {
    pub __bindgen_anon_1: mm_struct__bindgen_ty_1,
    pub cpu_bitmap: __IncompleteArrayField<core::ffi::c_ulong>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mm_struct__bindgen_ty_1 {
    pub mm_mt: maple_tree,
    pub get_unmapped_area: ::core::option::Option<
        unsafe extern "C" fn(
            filp: *mut file,
            addr: core::ffi::c_ulong,
            len: core::ffi::c_ulong,
            pgoff: core::ffi::c_ulong,
            flags: core::ffi::c_ulong,
        ) -> core::ffi::c_ulong,
    >,
    pub mmap_base: core::ffi::c_ulong,
    pub mmap_legacy_base: core::ffi::c_ulong,
    pub mmap_compat_base: core::ffi::c_ulong,
    pub mmap_compat_legacy_base: core::ffi::c_ulong,
    pub task_size: core::ffi::c_ulong,
    pub pgd: *mut pgd_t,
    #[doc = " @membarrier_state: Flags controlling membarrier behavior.\n\n This field is close to @pgd to hopefully fit in the same\n cache-line, which needs to be touched by switch_mm()."]
    pub membarrier_state: atomic_t,
    #[doc = " @mm_users: The number of users including userspace.\n\n Use mmget()/mmget_not_zero()/mmput() to modify. When this\n drops to 0 (i.e. when the task exits and there are no other\n temporary reference holders), we also release a reference on\n @mm_count (which may then free the &struct mm_struct if\n @mm_count also drops to 0)."]
    pub mm_users: atomic_t,
    #[doc = " @mm_count: The number of references to &struct mm_struct\n (@mm_users count as 1).\n\n Use mmgrab()/mmdrop() to modify. When this drops to 0, the\n &struct mm_struct is freed."]
    pub mm_count: atomic_t,
    pub pgtables_bytes: atomic_long_t,
    pub map_count: core::ffi::c_int,
    pub page_table_lock: spinlock_t,
    pub mmap_lock: rw_semaphore,
    pub mmlist: list_head,
    pub hiwater_rss: core::ffi::c_ulong,
    pub hiwater_vm: core::ffi::c_ulong,
    pub total_vm: core::ffi::c_ulong,
    pub locked_vm: core::ffi::c_ulong,
    pub pinned_vm: atomic64_t,
    pub data_vm: core::ffi::c_ulong,
    pub exec_vm: core::ffi::c_ulong,
    pub stack_vm: core::ffi::c_ulong,
    pub def_flags: core::ffi::c_ulong,
    #[doc = " @write_protect_seq: Locked when any thread is write\n protecting pages mapped by this mm to enforce a later COW,\n for instance during page table copying for fork()."]
    pub write_protect_seq: seqcount_t,
    pub arg_lock: spinlock_t,
    pub start_code: core::ffi::c_ulong,
    pub end_code: core::ffi::c_ulong,
    pub start_data: core::ffi::c_ulong,
    pub end_data: core::ffi::c_ulong,
    pub start_brk: core::ffi::c_ulong,
    pub brk: core::ffi::c_ulong,
    pub start_stack: core::ffi::c_ulong,
    pub arg_start: core::ffi::c_ulong,
    pub arg_end: core::ffi::c_ulong,
    pub env_start: core::ffi::c_ulong,
    pub env_end: core::ffi::c_ulong,
    pub saved_auxv: [core::ffi::c_ulong; 48usize],
    pub rss_stat: mm_rss_stat,
    pub binfmt: *mut linux_binfmt,
    pub context: mm_context_t,
    pub flags: core::ffi::c_ulong,
    pub ioctx_lock: spinlock_t,
    pub ioctx_table: *mut kioctx_table,
    pub owner: *mut task_struct,
    pub user_ns: *mut user_namespace,
    pub exe_file: *mut file,
    pub notifier_subscriptions: *mut mmu_notifier_subscriptions,
    pub tlb_flush_pending: atomic_t,
    pub tlb_flush_batched: atomic_t,
    pub uprobes_state: uprobes_state,
    pub hugetlb_usage: atomic_long_t,
    pub async_put_work: work_struct,
    pub ksm_merging_pages: core::ffi::c_ulong,
    pub ksm_rmap_items: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct__bindgen_ty_1"]
        [::core::mem::size_of::<mm_struct__bindgen_ty_1>() - 1016usize];
    ["Alignment of mm_struct__bindgen_ty_1"]
        [::core::mem::align_of::<mm_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_mt"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mm_mt) - 0usize];
    ["Offset of field: mm_struct__bindgen_ty_1::get_unmapped_area"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, get_unmapped_area) - 24usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_base"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_base) - 32usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_legacy_base"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_legacy_base) - 40usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_compat_base"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_compat_base) - 48usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_compat_legacy_base"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_compat_legacy_base) - 56usize];
    ["Offset of field: mm_struct__bindgen_ty_1::task_size"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, task_size) - 64usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pgd"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, pgd) - 72usize];
    ["Offset of field: mm_struct__bindgen_ty_1::membarrier_state"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, membarrier_state) - 80usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_users"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mm_users) - 84usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mm_count"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mm_count) - 88usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pgtables_bytes"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, pgtables_bytes) - 96usize];
    ["Offset of field: mm_struct__bindgen_ty_1::map_count"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, map_count) - 104usize];
    ["Offset of field: mm_struct__bindgen_ty_1::page_table_lock"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, page_table_lock) - 108usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmap_lock"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmap_lock) - 112usize];
    ["Offset of field: mm_struct__bindgen_ty_1::mmlist"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, mmlist) - 152usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hiwater_rss"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, hiwater_rss) - 168usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hiwater_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, hiwater_vm) - 176usize];
    ["Offset of field: mm_struct__bindgen_ty_1::total_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, total_vm) - 184usize];
    ["Offset of field: mm_struct__bindgen_ty_1::locked_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, locked_vm) - 192usize];
    ["Offset of field: mm_struct__bindgen_ty_1::pinned_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, pinned_vm) - 200usize];
    ["Offset of field: mm_struct__bindgen_ty_1::data_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, data_vm) - 208usize];
    ["Offset of field: mm_struct__bindgen_ty_1::exec_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, exec_vm) - 216usize];
    ["Offset of field: mm_struct__bindgen_ty_1::stack_vm"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, stack_vm) - 224usize];
    ["Offset of field: mm_struct__bindgen_ty_1::def_flags"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, def_flags) - 232usize];
    ["Offset of field: mm_struct__bindgen_ty_1::write_protect_seq"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, write_protect_seq) - 240usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_lock"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, arg_lock) - 244usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_code"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, start_code) - 248usize];
    ["Offset of field: mm_struct__bindgen_ty_1::end_code"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, end_code) - 256usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_data"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, start_data) - 264usize];
    ["Offset of field: mm_struct__bindgen_ty_1::end_data"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, end_data) - 272usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_brk"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, start_brk) - 280usize];
    ["Offset of field: mm_struct__bindgen_ty_1::brk"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, brk) - 288usize];
    ["Offset of field: mm_struct__bindgen_ty_1::start_stack"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, start_stack) - 296usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_start"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, arg_start) - 304usize];
    ["Offset of field: mm_struct__bindgen_ty_1::arg_end"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, arg_end) - 312usize];
    ["Offset of field: mm_struct__bindgen_ty_1::env_start"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, env_start) - 320usize];
    ["Offset of field: mm_struct__bindgen_ty_1::env_end"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, env_end) - 328usize];
    ["Offset of field: mm_struct__bindgen_ty_1::saved_auxv"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, saved_auxv) - 336usize];
    ["Offset of field: mm_struct__bindgen_ty_1::rss_stat"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, rss_stat) - 720usize];
    ["Offset of field: mm_struct__bindgen_ty_1::binfmt"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, binfmt) - 752usize];
    ["Offset of field: mm_struct__bindgen_ty_1::context"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, context) - 760usize];
    ["Offset of field: mm_struct__bindgen_ty_1::flags"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, flags) - 888usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ioctx_lock"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, ioctx_lock) - 896usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ioctx_table"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, ioctx_table) - 904usize];
    ["Offset of field: mm_struct__bindgen_ty_1::owner"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, owner) - 912usize];
    ["Offset of field: mm_struct__bindgen_ty_1::user_ns"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, user_ns) - 920usize];
    ["Offset of field: mm_struct__bindgen_ty_1::exe_file"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, exe_file) - 928usize];
    ["Offset of field: mm_struct__bindgen_ty_1::notifier_subscriptions"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, notifier_subscriptions) - 936usize];
    ["Offset of field: mm_struct__bindgen_ty_1::tlb_flush_pending"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, tlb_flush_pending) - 944usize];
    ["Offset of field: mm_struct__bindgen_ty_1::tlb_flush_batched"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, tlb_flush_batched) - 948usize];
    ["Offset of field: mm_struct__bindgen_ty_1::uprobes_state"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, uprobes_state) - 952usize];
    ["Offset of field: mm_struct__bindgen_ty_1::hugetlb_usage"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, hugetlb_usage) - 960usize];
    ["Offset of field: mm_struct__bindgen_ty_1::async_put_work"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, async_put_work) - 968usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ksm_merging_pages"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, ksm_merging_pages) - 1000usize];
    ["Offset of field: mm_struct__bindgen_ty_1::ksm_rmap_items"]
        [::core::mem::offset_of!(mm_struct__bindgen_ty_1, ksm_rmap_items) - 1008usize];
};
impl Default for mm_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mm_struct"][::core::mem::size_of::<mm_struct>() - 1016usize];
    ["Alignment of mm_struct"][::core::mem::align_of::<mm_struct>() - 8usize];
    ["Offset of field: mm_struct::cpu_bitmap"]
        [::core::mem::offset_of!(mm_struct, cpu_bitmap) - 1016usize];
};
impl Default for mm_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dev_pagemap {
    _unused: [u8; 0],
}
pub const pid_type_PIDTYPE_PID: pid_type = 0;
pub const pid_type_PIDTYPE_TGID: pid_type = 1;
pub const pid_type_PIDTYPE_PGID: pid_type = 2;
pub const pid_type_PIDTYPE_SID: pid_type = 3;
pub const pid_type_PIDTYPE_MAX: pid_type = 4;
pub type pid_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct upid {
    pub nr: core::ffi::c_int,
    pub ns: *mut pid_namespace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of upid"][::core::mem::size_of::<upid>() - 16usize];
    ["Alignment of upid"][::core::mem::align_of::<upid>() - 8usize];
    ["Offset of field: upid::nr"][::core::mem::offset_of!(upid, nr) - 0usize];
    ["Offset of field: upid::ns"][::core::mem::offset_of!(upid, ns) - 8usize];
};
impl Default for upid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pid {
    pub count: refcount_t,
    pub level: core::ffi::c_uint,
    pub lock: spinlock_t,
    pub tasks: [hlist_head; 4usize],
    pub inodes: hlist_head,
    pub wait_pidfd: wait_queue_head_t,
    pub rcu: callback_head,
    pub numbers: [upid; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pid"][::core::mem::size_of::<pid>() - 112usize];
    ["Alignment of pid"][::core::mem::align_of::<pid>() - 8usize];
    ["Offset of field: pid::count"][::core::mem::offset_of!(pid, count) - 0usize];
    ["Offset of field: pid::level"][::core::mem::offset_of!(pid, level) - 4usize];
    ["Offset of field: pid::lock"][::core::mem::offset_of!(pid, lock) - 8usize];
    ["Offset of field: pid::tasks"][::core::mem::offset_of!(pid, tasks) - 16usize];
    ["Offset of field: pid::inodes"][::core::mem::offset_of!(pid, inodes) - 48usize];
    ["Offset of field: pid::wait_pidfd"][::core::mem::offset_of!(pid, wait_pidfd) - 56usize];
    ["Offset of field: pid::rcu"][::core::mem::offset_of!(pid, rcu) - 80usize];
    ["Offset of field: pid::numbers"][::core::mem::offset_of!(pid, numbers) - 96usize];
};
impl Default for pid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pid_namespace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_namespace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kuid_t"][::core::mem::size_of::<kuid_t>() - 4usize];
    ["Alignment of kuid_t"][::core::mem::align_of::<kuid_t>() - 4usize];
    ["Offset of field: kuid_t::val"][::core::mem::offset_of!(kuid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kgid_t {
    pub val: gid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kgid_t"][::core::mem::size_of::<kgid_t>() - 4usize];
    ["Alignment of kgid_t"][::core::mem::align_of::<kgid_t>() - 4usize];
    ["Offset of field: kgid_t::val"][::core::mem::offset_of!(kgid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sem_undo_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysv_sem {
    pub undo_list: *mut sem_undo_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysv_sem"][::core::mem::size_of::<sysv_sem>() - 8usize];
    ["Alignment of sysv_sem"][::core::mem::align_of::<sysv_sem>() - 8usize];
    ["Offset of field: sysv_sem::undo_list"][::core::mem::offset_of!(sysv_sem, undo_list) - 0usize];
};
impl Default for sysv_sem {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysv_shm {
    pub shm_clist: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysv_shm"][::core::mem::size_of::<sysv_shm>() - 16usize];
    ["Alignment of sysv_shm"][::core::mem::align_of::<sysv_shm>() - 8usize];
    ["Offset of field: sysv_shm::shm_clist"][::core::mem::offset_of!(sysv_shm, shm_clist) - 0usize];
};
impl Default for sysv_shm {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plist_node {
    pub prio: core::ffi::c_int,
    pub prio_list: list_head,
    pub node_list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of plist_node"][::core::mem::size_of::<plist_node>() - 40usize];
    ["Alignment of plist_node"][::core::mem::align_of::<plist_node>() - 8usize];
    ["Offset of field: plist_node::prio"][::core::mem::offset_of!(plist_node, prio) - 0usize];
    ["Offset of field: plist_node::prio_list"]
        [::core::mem::offset_of!(plist_node, prio_list) - 8usize];
    ["Offset of field: plist_node::node_list"]
        [::core::mem::offset_of!(plist_node, node_list) - 24usize];
};
impl Default for plist_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerqueue_node {
    pub node: rb_node,
    pub expires: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerqueue_node"][::core::mem::size_of::<timerqueue_node>() - 32usize];
    ["Alignment of timerqueue_node"][::core::mem::align_of::<timerqueue_node>() - 8usize];
    ["Offset of field: timerqueue_node::node"]
        [::core::mem::offset_of!(timerqueue_node, node) - 0usize];
    ["Offset of field: timerqueue_node::expires"]
        [::core::mem::offset_of!(timerqueue_node, expires) - 24usize];
};
impl Default for timerqueue_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timerqueue_head {
    pub rb_root: rb_root_cached,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timerqueue_head"][::core::mem::size_of::<timerqueue_head>() - 16usize];
    ["Alignment of timerqueue_head"][::core::mem::align_of::<timerqueue_head>() - 8usize];
    ["Offset of field: timerqueue_head::rb_root"]
        [::core::mem::offset_of!(timerqueue_head, rb_root) - 0usize];
};
impl Default for timerqueue_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const hrtimer_restart_HRTIMER_NORESTART: hrtimer_restart = 0;
pub const hrtimer_restart_HRTIMER_RESTART: hrtimer_restart = 1;
pub type hrtimer_restart = i32;
#[doc = " struct hrtimer - the basic hrtimer structure\n @node:\ttimerqueue node, which also manages node.expires,\n\t\tthe absolute expiry time in the hrtimers internal\n\t\trepresentation. The time is related to the clock on\n\t\twhich the timer is based. Is setup by adding\n\t\tslack to the _softexpires value. For non range timers\n\t\tidentical to _softexpires.\n @_softexpires: the absolute earliest expiry time of the hrtimer.\n\t\tThe time which was given as expiry time when the timer\n\t\twas armed.\n @function:\ttimer expiry callback function\n @base:\tpointer to the timer base (per cpu and per clock)\n @state:\tstate information (See bit values above)\n @is_rel:\tSet if the timer was armed relative\n @is_soft:\tSet if hrtimer will be expired in soft interrupt context.\n @is_hard:\tSet if hrtimer will be expired in hard interrupt context\n\t\teven on RT.\n\n The hrtimer structure must be initialized by hrtimer_init()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer {
    pub node: timerqueue_node,
    pub _softexpires: ktime_t,
    pub function:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut hrtimer) -> hrtimer_restart>,
    pub base: *mut hrtimer_clock_base,
    pub state: u8_,
    pub is_rel: u8_,
    pub is_soft: u8_,
    pub is_hard: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer"][::core::mem::size_of::<hrtimer>() - 64usize];
    ["Alignment of hrtimer"][::core::mem::align_of::<hrtimer>() - 8usize];
    ["Offset of field: hrtimer::node"][::core::mem::offset_of!(hrtimer, node) - 0usize];
    ["Offset of field: hrtimer::_softexpires"]
        [::core::mem::offset_of!(hrtimer, _softexpires) - 32usize];
    ["Offset of field: hrtimer::function"][::core::mem::offset_of!(hrtimer, function) - 40usize];
    ["Offset of field: hrtimer::base"][::core::mem::offset_of!(hrtimer, base) - 48usize];
    ["Offset of field: hrtimer::state"][::core::mem::offset_of!(hrtimer, state) - 56usize];
    ["Offset of field: hrtimer::is_rel"][::core::mem::offset_of!(hrtimer, is_rel) - 57usize];
    ["Offset of field: hrtimer::is_soft"][::core::mem::offset_of!(hrtimer, is_soft) - 58usize];
    ["Offset of field: hrtimer::is_hard"][::core::mem::offset_of!(hrtimer, is_hard) - 59usize];
};
impl Default for hrtimer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct hrtimer_clock_base - the timer base for a specific clock\n @cpu_base:\t\tper cpu clock base\n @index:\t\tclock type index for per_cpu support when moving a\n\t\t\ttimer to a base on another cpu.\n @clockid:\t\tclock id for per_cpu support\n @seq:\t\tseqcount around __run_hrtimer\n @running:\t\tpointer to the currently running hrtimer\n @active:\t\tred black tree root node for the active timers\n @get_time:\t\tfunction to retrieve the current time of the clock\n @offset:\t\toffset of this clock to the monotonic base"]
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct hrtimer_clock_base {
    pub cpu_base: *mut hrtimer_cpu_base,
    pub index: core::ffi::c_uint,
    pub clockid: clockid_t,
    pub seq: seqcount_raw_spinlock_t,
    pub running: *mut hrtimer,
    pub active: timerqueue_head,
    pub get_time: ::core::option::Option<unsafe extern "C" fn() -> ktime_t>,
    pub offset: ktime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer_clock_base"][::core::mem::size_of::<hrtimer_clock_base>() - 64usize];
    ["Alignment of hrtimer_clock_base"][::core::mem::align_of::<hrtimer_clock_base>() - 64usize];
    ["Offset of field: hrtimer_clock_base::cpu_base"]
        [::core::mem::offset_of!(hrtimer_clock_base, cpu_base) - 0usize];
    ["Offset of field: hrtimer_clock_base::index"]
        [::core::mem::offset_of!(hrtimer_clock_base, index) - 8usize];
    ["Offset of field: hrtimer_clock_base::clockid"]
        [::core::mem::offset_of!(hrtimer_clock_base, clockid) - 12usize];
    ["Offset of field: hrtimer_clock_base::seq"]
        [::core::mem::offset_of!(hrtimer_clock_base, seq) - 16usize];
    ["Offset of field: hrtimer_clock_base::running"]
        [::core::mem::offset_of!(hrtimer_clock_base, running) - 24usize];
    ["Offset of field: hrtimer_clock_base::active"]
        [::core::mem::offset_of!(hrtimer_clock_base, active) - 32usize];
    ["Offset of field: hrtimer_clock_base::get_time"]
        [::core::mem::offset_of!(hrtimer_clock_base, get_time) - 48usize];
    ["Offset of field: hrtimer_clock_base::offset"]
        [::core::mem::offset_of!(hrtimer_clock_base, offset) - 56usize];
};
impl Default for hrtimer_clock_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct hrtimer_cpu_base - the per cpu clock bases\n @lock:\t\tlock protecting the base and associated clock bases\n\t\t\tand timers\n @cpu:\t\tcpu number\n @active_bases:\tBitfield to mark bases with active timers\n @clock_was_set_seq:\tSequence counter of clock was set events\n @hres_active:\tState of high resolution mode\n @in_hrtirq:\t\thrtimer_interrupt() is currently executing\n @hang_detected:\tThe last hrtimer interrupt detected a hang\n @softirq_activated:\tdisplays, if the softirq is raised - update of softirq\n\t\t\trelated settings is not required then.\n @nr_events:\t\tTotal number of hrtimer interrupt events\n @nr_retries:\t\tTotal number of hrtimer interrupt retries\n @nr_hangs:\t\tTotal number of hrtimer interrupt hangs\n @max_hang_time:\tMaximum time spent in hrtimer_interrupt\n @softirq_expiry_lock: Lock which is taken while softirq based hrtimer are\n\t\t\t expired\n @timer_waiters:\tA hrtimer_cancel() invocation waits for the timer\n\t\t\tcallback to finish.\n @expires_next:\tabsolute time of the next event, is required for remote\n\t\t\thrtimer enqueue; it is the total first expiry time (hard\n\t\t\tand soft hrtimer are taken into account)\n @next_timer:\t\tPointer to the first expiring timer\n @softirq_expires_next: Time to check, if soft queues needs also to be expired\n @softirq_next_timer: Pointer to the first expiring softirq based timer\n @clock_base:\t\tarray of clock bases for this cpu\n\n Note: next_timer is just an optimization for __remove_hrtimer().\n\t Do not dereference the pointer because it is not reliable on\n\t cross cpu removals."]
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct hrtimer_cpu_base {
    pub lock: raw_spinlock_t,
    pub cpu: core::ffi::c_uint,
    pub active_bases: core::ffi::c_uint,
    pub clock_was_set_seq: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub nr_events: core::ffi::c_uint,
    pub nr_retries: core::ffi::c_ushort,
    pub nr_hangs: core::ffi::c_ushort,
    pub max_hang_time: core::ffi::c_uint,
    pub expires_next: ktime_t,
    pub next_timer: *mut hrtimer,
    pub softirq_expires_next: ktime_t,
    pub softirq_next_timer: *mut hrtimer,
    pub clock_base: [hrtimer_clock_base; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hrtimer_cpu_base"][::core::mem::size_of::<hrtimer_cpu_base>() - 576usize];
    ["Alignment of hrtimer_cpu_base"][::core::mem::align_of::<hrtimer_cpu_base>() - 64usize];
    ["Offset of field: hrtimer_cpu_base::lock"]
        [::core::mem::offset_of!(hrtimer_cpu_base, lock) - 0usize];
    ["Offset of field: hrtimer_cpu_base::cpu"]
        [::core::mem::offset_of!(hrtimer_cpu_base, cpu) - 4usize];
    ["Offset of field: hrtimer_cpu_base::active_bases"]
        [::core::mem::offset_of!(hrtimer_cpu_base, active_bases) - 8usize];
    ["Offset of field: hrtimer_cpu_base::clock_was_set_seq"]
        [::core::mem::offset_of!(hrtimer_cpu_base, clock_was_set_seq) - 12usize];
    ["Offset of field: hrtimer_cpu_base::nr_events"]
        [::core::mem::offset_of!(hrtimer_cpu_base, nr_events) - 20usize];
    ["Offset of field: hrtimer_cpu_base::nr_retries"]
        [::core::mem::offset_of!(hrtimer_cpu_base, nr_retries) - 24usize];
    ["Offset of field: hrtimer_cpu_base::nr_hangs"]
        [::core::mem::offset_of!(hrtimer_cpu_base, nr_hangs) - 26usize];
    ["Offset of field: hrtimer_cpu_base::max_hang_time"]
        [::core::mem::offset_of!(hrtimer_cpu_base, max_hang_time) - 28usize];
    ["Offset of field: hrtimer_cpu_base::expires_next"]
        [::core::mem::offset_of!(hrtimer_cpu_base, expires_next) - 32usize];
    ["Offset of field: hrtimer_cpu_base::next_timer"]
        [::core::mem::offset_of!(hrtimer_cpu_base, next_timer) - 40usize];
    ["Offset of field: hrtimer_cpu_base::softirq_expires_next"]
        [::core::mem::offset_of!(hrtimer_cpu_base, softirq_expires_next) - 48usize];
    ["Offset of field: hrtimer_cpu_base::softirq_next_timer"]
        [::core::mem::offset_of!(hrtimer_cpu_base, softirq_next_timer) - 56usize];
    ["Offset of field: hrtimer_cpu_base::clock_base"]
        [::core::mem::offset_of!(hrtimer_cpu_base, clock_base) - 64usize];
};
impl Default for hrtimer_cpu_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl hrtimer_cpu_base {
    #[inline]
    pub fn hres_active(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hres_active(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_hrtirq(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_hrtirq(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hang_detected(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hang_detected(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn softirq_activated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_softirq_activated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hres_active: core::ffi::c_uint,
        in_hrtirq: core::ffi::c_uint,
        hang_detected: core::ffi::c_uint,
        softirq_activated: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hres_active: u32 = unsafe { ::core::mem::transmute(hres_active) };
            hres_active as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let in_hrtirq: u32 = unsafe { ::core::mem::transmute(in_hrtirq) };
            in_hrtirq as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let hang_detected: u32 = unsafe { ::core::mem::transmute(hang_detected) };
            hang_detected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let softirq_activated: u32 = unsafe { ::core::mem::transmute(softirq_activated) };
            softirq_activated as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seccomp_filter {
    _unused: [u8; 0],
}
#[doc = " struct seccomp - the state of a seccomp'ed process\n\n @mode:  indicates one of the valid values above for controlled\n         system calls available to a process.\n @filter: must always point to a valid seccomp-filter or NULL as it is\n          accessed without locking during system call entry.\n\n          @filter must only be accessed from the context of current as there\n          is no read locking."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct seccomp {
    pub mode: core::ffi::c_int,
    pub filter_count: atomic_t,
    pub filter: *mut seccomp_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of seccomp"][::core::mem::size_of::<seccomp>() - 16usize];
    ["Alignment of seccomp"][::core::mem::align_of::<seccomp>() - 8usize];
    ["Offset of field: seccomp::mode"][::core::mem::offset_of!(seccomp, mode) - 0usize];
    ["Offset of field: seccomp::filter_count"]
        [::core::mem::offset_of!(seccomp, filter_count) - 4usize];
    ["Offset of field: seccomp::filter"][::core::mem::offset_of!(seccomp, filter) - 8usize];
};
impl Default for seccomp {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: __kernel_ulong_t,
    pub rlim_max: __kernel_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::core::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::core::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::core::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::core::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigset_t {
    pub sig: [core::ffi::c_ulong; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigset_t"][::core::mem::size_of::<sigset_t>() - 8usize];
    ["Alignment of sigset_t"][::core::mem::align_of::<sigset_t>() - 8usize];
    ["Offset of field: sigset_t::sig"][::core::mem::offset_of!(sigset_t, sig) - 0usize];
};
pub type __signalfn_t = ::core::option::Option<unsafe extern "C" fn(arg1: core::ffi::c_int)>;
pub type __sighandler_t = __signalfn_t;
pub type __restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type __sigrestore_t = __restorefn_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: core::ffi::c_int,
    pub sival_ptr: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::core::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::core::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::core::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::core::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
impl Default for sigval {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields {
    pub _kill: __sifields__bindgen_ty_1,
    pub _timer: __sifields__bindgen_ty_2,
    pub _rt: __sifields__bindgen_ty_3,
    pub _sigchld: __sifields__bindgen_ty_4,
    pub _sigfault: __sifields__bindgen_ty_5,
    pub _sigpoll: __sifields__bindgen_ty_6,
    pub _sigsys: __sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_1 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_1"]
        [::core::mem::size_of::<__sifields__bindgen_ty_1>() - 8usize];
    ["Alignment of __sifields__bindgen_ty_1"]
        [::core::mem::align_of::<__sifields__bindgen_ty_1>() - 4usize];
    ["Offset of field: __sifields__bindgen_ty_1::_pid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_1, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_1::_uid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_1, _uid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_2 {
    pub _tid: __kernel_timer_t,
    pub _overrun: core::ffi::c_int,
    pub _sigval: sigval_t,
    pub _sys_private: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_2"]
        [::core::mem::size_of::<__sifields__bindgen_ty_2>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_2"]
        [::core::mem::align_of::<__sifields__bindgen_ty_2>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_2::_tid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_2, _tid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_2::_overrun"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_2, _overrun) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_2::_sigval"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_2, _sigval) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_2::_sys_private"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_2, _sys_private) - 16usize];
};
impl Default for __sifields__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_3 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _sigval: sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_3"]
        [::core::mem::size_of::<__sifields__bindgen_ty_3>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_3"]
        [::core::mem::align_of::<__sifields__bindgen_ty_3>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_3::_pid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_3, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_3::_uid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_3, _uid) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_3::_sigval"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_3, _sigval) - 8usize];
};
impl Default for __sifields__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_4 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _status: core::ffi::c_int,
    pub _utime: __kernel_clock_t,
    pub _stime: __kernel_clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_4"]
        [::core::mem::size_of::<__sifields__bindgen_ty_4>() - 32usize];
    ["Alignment of __sifields__bindgen_ty_4"]
        [::core::mem::align_of::<__sifields__bindgen_ty_4>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_4::_pid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_4, _pid) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_4::_uid"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_4, _uid) - 4usize];
    ["Offset of field: __sifields__bindgen_ty_4::_status"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_4, _status) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_4::_utime"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_4, _utime) - 16usize];
    ["Offset of field: __sifields__bindgen_ty_4::_stime"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_4, _stime) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5 {
    pub _addr: *mut core::ffi::c_void,
    pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
    pub _trapno: core::ffi::c_int,
    pub _addr_lsb: core::ffi::c_short,
    pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub _perf: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [core::ffi::c_char; 8usize],
    pub _lower: *mut core::ffi::c_void,
    pub _upper: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_dummy_bnd"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _dummy_bnd
    )
        - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _lower
    ) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
        _upper
    ) - 16usize];
};
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [core::ffi::c_char; 8usize],
    pub _pkey: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2"]
        [::core::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_dummy_pkey"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        _dummy_pkey
    )
        - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2::_pkey"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
        _pkey
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub _data: core::ffi::c_ulong,
    pub _type: __u32,
    pub _flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3"]
        [::core::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_data"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _data
    ) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_type"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _type
    ) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3::_flags"][::core::mem::offset_of!(
        __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
        _flags
    ) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5__bindgen_ty_1"]
        [::core::mem::size_of::<__sifields__bindgen_ty_5__bindgen_ty_1>() - 24usize];
    ["Alignment of __sifields__bindgen_ty_5__bindgen_ty_1"]
        [::core::mem::align_of::<__sifields__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_trapno"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _trapno) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_lsb"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_lsb) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_bnd"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_bnd) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_addr_pkey"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _addr_pkey) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_5__bindgen_ty_1::_perf"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5__bindgen_ty_1, _perf) - 0usize];
};
impl Default for __sifields__bindgen_ty_5__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_5"]
        [::core::mem::size_of::<__sifields__bindgen_ty_5>() - 32usize];
    ["Alignment of __sifields__bindgen_ty_5"]
        [::core::mem::align_of::<__sifields__bindgen_ty_5>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_5::_addr"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_5, _addr) - 0usize];
};
impl Default for __sifields__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sifields__bindgen_ty_6 {
    pub _band: core::ffi::c_long,
    pub _fd: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_6"]
        [::core::mem::size_of::<__sifields__bindgen_ty_6>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_6"]
        [::core::mem::align_of::<__sifields__bindgen_ty_6>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_6::_band"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_6, _band) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_6::_fd"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_6, _fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_7 {
    pub _call_addr: *mut core::ffi::c_void,
    pub _syscall: core::ffi::c_int,
    pub _arch: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields__bindgen_ty_7"]
        [::core::mem::size_of::<__sifields__bindgen_ty_7>() - 16usize];
    ["Alignment of __sifields__bindgen_ty_7"]
        [::core::mem::align_of::<__sifields__bindgen_ty_7>() - 8usize];
    ["Offset of field: __sifields__bindgen_ty_7::_call_addr"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_7, _call_addr) - 0usize];
    ["Offset of field: __sifields__bindgen_ty_7::_syscall"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_7, _syscall) - 8usize];
    ["Offset of field: __sifields__bindgen_ty_7::_arch"]
        [::core::mem::offset_of!(__sifields__bindgen_ty_7, _arch) - 12usize];
};
impl Default for __sifields__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sifields"][::core::mem::size_of::<__sifields>() - 32usize];
    ["Alignment of __sifields"][::core::mem::align_of::<__sifields>() - 8usize];
    ["Offset of field: __sifields::_kill"][::core::mem::offset_of!(__sifields, _kill) - 0usize];
    ["Offset of field: __sifields::_timer"][::core::mem::offset_of!(__sifields, _timer) - 0usize];
    ["Offset of field: __sifields::_rt"][::core::mem::offset_of!(__sifields, _rt) - 0usize];
    ["Offset of field: __sifields::_sigchld"]
        [::core::mem::offset_of!(__sifields, _sigchld) - 0usize];
    ["Offset of field: __sifields::_sigfault"]
        [::core::mem::offset_of!(__sifields, _sigfault) - 0usize];
    ["Offset of field: __sifields::_sigpoll"]
        [::core::mem::offset_of!(__sifields, _sigpoll) - 0usize];
    ["Offset of field: __sifields::_sigsys"][::core::mem::offset_of!(__sifields, _sigsys) - 0usize];
};
impl Default for __sifields {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo {
    pub __bindgen_anon_1: kernel_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_siginfo__bindgen_ty_1 {
    pub si_signo: core::ffi::c_int,
    pub si_errno: core::ffi::c_int,
    pub si_code: core::ffi::c_int,
    pub _sifields: __sifields,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_siginfo__bindgen_ty_1"]
        [::core::mem::size_of::<kernel_siginfo__bindgen_ty_1>() - 48usize];
    ["Alignment of kernel_siginfo__bindgen_ty_1"]
        [::core::mem::align_of::<kernel_siginfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_signo"]
        [::core::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_signo) - 0usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_errno"]
        [::core::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_errno) - 4usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::si_code"]
        [::core::mem::offset_of!(kernel_siginfo__bindgen_ty_1, si_code) - 8usize];
    ["Offset of field: kernel_siginfo__bindgen_ty_1::_sifields"]
        [::core::mem::offset_of!(kernel_siginfo__bindgen_ty_1, _sifields) - 16usize];
};
impl Default for kernel_siginfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_siginfo"][::core::mem::size_of::<kernel_siginfo>() - 48usize];
    ["Alignment of kernel_siginfo"][::core::mem::align_of::<kernel_siginfo>() - 8usize];
};
impl Default for kernel_siginfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type kernel_siginfo_t = kernel_siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucounts {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigpending {
    pub list: list_head,
    pub signal: sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigpending"][::core::mem::size_of::<sigpending>() - 24usize];
    ["Alignment of sigpending"][::core::mem::align_of::<sigpending>() - 8usize];
    ["Offset of field: sigpending::list"][::core::mem::offset_of!(sigpending, list) - 0usize];
    ["Offset of field: sigpending::signal"][::core::mem::offset_of!(sigpending, signal) - 16usize];
};
impl Default for sigpending {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigaction {
    pub sa_handler: __sighandler_t,
    pub sa_flags: core::ffi::c_ulong,
    pub sa_restorer: __sigrestore_t,
    pub sa_mask: sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::core::mem::size_of::<sigaction>() - 32usize];
    ["Alignment of sigaction"][::core::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::sa_handler"]
        [::core::mem::offset_of!(sigaction, sa_handler) - 0usize];
    ["Offset of field: sigaction::sa_flags"][::core::mem::offset_of!(sigaction, sa_flags) - 8usize];
    ["Offset of field: sigaction::sa_restorer"]
        [::core::mem::offset_of!(sigaction, sa_restorer) - 16usize];
    ["Offset of field: sigaction::sa_mask"][::core::mem::offset_of!(sigaction, sa_mask) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct k_sigaction {
    pub sa: sigaction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of k_sigaction"][::core::mem::size_of::<k_sigaction>() - 32usize];
    ["Alignment of k_sigaction"][::core::mem::align_of::<k_sigaction>() - 8usize];
    ["Offset of field: k_sigaction::sa"][::core::mem::offset_of!(k_sigaction, sa) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct syscall_user_dispatch {
    pub selector: *mut core::ffi::c_char,
    pub offset: core::ffi::c_ulong,
    pub len: core::ffi::c_ulong,
    pub on_dispatch: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of syscall_user_dispatch"][::core::mem::size_of::<syscall_user_dispatch>() - 32usize];
    ["Alignment of syscall_user_dispatch"]
        [::core::mem::align_of::<syscall_user_dispatch>() - 8usize];
    ["Offset of field: syscall_user_dispatch::selector"]
        [::core::mem::offset_of!(syscall_user_dispatch, selector) - 0usize];
    ["Offset of field: syscall_user_dispatch::offset"]
        [::core::mem::offset_of!(syscall_user_dispatch, offset) - 8usize];
    ["Offset of field: syscall_user_dispatch::len"]
        [::core::mem::offset_of!(syscall_user_dispatch, len) - 16usize];
    ["Offset of field: syscall_user_dispatch::on_dispatch"]
        [::core::mem::offset_of!(syscall_user_dispatch, on_dispatch) - 24usize];
};
impl Default for syscall_user_dispatch {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_io_accounting {
    pub rchar: u64_,
    pub wchar: u64_,
    pub syscr: u64_,
    pub syscw: u64_,
    pub read_bytes: u64_,
    pub write_bytes: u64_,
    pub cancelled_write_bytes: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_io_accounting"][::core::mem::size_of::<task_io_accounting>() - 56usize];
    ["Alignment of task_io_accounting"][::core::mem::align_of::<task_io_accounting>() - 8usize];
    ["Offset of field: task_io_accounting::rchar"]
        [::core::mem::offset_of!(task_io_accounting, rchar) - 0usize];
    ["Offset of field: task_io_accounting::wchar"]
        [::core::mem::offset_of!(task_io_accounting, wchar) - 8usize];
    ["Offset of field: task_io_accounting::syscr"]
        [::core::mem::offset_of!(task_io_accounting, syscr) - 16usize];
    ["Offset of field: task_io_accounting::syscw"]
        [::core::mem::offset_of!(task_io_accounting, syscw) - 24usize];
    ["Offset of field: task_io_accounting::read_bytes"]
        [::core::mem::offset_of!(task_io_accounting, read_bytes) - 32usize];
    ["Offset of field: task_io_accounting::write_bytes"]
        [::core::mem::offset_of!(task_io_accounting, write_bytes) - 40usize];
    ["Offset of field: task_io_accounting::cancelled_write_bytes"]
        [::core::mem::offset_of!(task_io_accounting, cancelled_write_bytes) - 48usize];
};
#[doc = " posix_cputimer_base - Container per posix CPU clock\n @nextevt:\t\tEarliest-expiration cache\n @tqhead:\t\ttimerqueue head for cpu_timers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cputimer_base {
    pub nextevt: u64_,
    pub tqhead: timerqueue_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimer_base"][::core::mem::size_of::<posix_cputimer_base>() - 24usize];
    ["Alignment of posix_cputimer_base"][::core::mem::align_of::<posix_cputimer_base>() - 8usize];
    ["Offset of field: posix_cputimer_base::nextevt"]
        [::core::mem::offset_of!(posix_cputimer_base, nextevt) - 0usize];
    ["Offset of field: posix_cputimer_base::tqhead"]
        [::core::mem::offset_of!(posix_cputimer_base, tqhead) - 8usize];
};
impl Default for posix_cputimer_base {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " posix_cputimers - Container for posix CPU timer related data\n @bases:\t\tBase container for posix CPU clocks\n @timers_active:\tTimers are queued.\n @expiry_active:\tTimer expiry is active. Used for\n\t\t\tprocess wide timers to avoid multiple\n\t\t\ttask trying to handle expiry concurrently\n\n Used in task_struct and signal_struct"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cputimers {
    pub bases: [posix_cputimer_base; 3usize],
    pub timers_active: core::ffi::c_uint,
    pub expiry_active: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimers"][::core::mem::size_of::<posix_cputimers>() - 80usize];
    ["Alignment of posix_cputimers"][::core::mem::align_of::<posix_cputimers>() - 8usize];
    ["Offset of field: posix_cputimers::bases"]
        [::core::mem::offset_of!(posix_cputimers, bases) - 0usize];
    ["Offset of field: posix_cputimers::timers_active"]
        [::core::mem::offset_of!(posix_cputimers, timers_active) - 72usize];
    ["Offset of field: posix_cputimers::expiry_active"]
        [::core::mem::offset_of!(posix_cputimers, expiry_active) - 76usize];
};
impl Default for posix_cputimers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " posix_cputimers_work - Container for task work based posix CPU timer expiry\n @work:\tThe task work to be scheduled\n @scheduled:  @work has been scheduled already, no further processing"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_cputimers_work {
    pub work: callback_head,
    pub scheduled: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of posix_cputimers_work"][::core::mem::size_of::<posix_cputimers_work>() - 24usize];
    ["Alignment of posix_cputimers_work"][::core::mem::align_of::<posix_cputimers_work>() - 8usize];
    ["Offset of field: posix_cputimers_work::work"]
        [::core::mem::offset_of!(posix_cputimers_work, work) - 0usize];
    ["Offset of field: posix_cputimers_work::scheduled"]
        [::core::mem::offset_of!(posix_cputimers_work, scheduled) - 16usize];
};
impl Default for posix_cputimers_work {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Default, Copy, Clone)]
pub struct rseq {
    pub cpu_id_start: __u32,
    pub cpu_id: __u32,
    pub rseq_cs: __u64,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rseq"][::core::mem::size_of::<rseq>() - 32usize];
    ["Alignment of rseq"][::core::mem::align_of::<rseq>() - 32usize];
    ["Offset of field: rseq::cpu_id_start"][::core::mem::offset_of!(rseq, cpu_id_start) - 0usize];
    ["Offset of field: rseq::cpu_id"][::core::mem::offset_of!(rseq, cpu_id) - 4usize];
    ["Offset of field: rseq::rseq_cs"][::core::mem::offset_of!(rseq, rseq_cs) - 8usize];
    ["Offset of field: rseq::flags"][::core::mem::offset_of!(rseq, flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct backing_dev_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bio_list {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blk_plug {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_local_storage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_run_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct capture_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cfs_rq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct futex_pi_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_task {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nameidata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsproxy {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct perf_event_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipe_inode_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reclaim_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct robust_list_head {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_delay_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_group {
    _unused: [u8; 0],
}
#[doc = " struct prev_cputime - snapshot of system and user cputime\n @utime: time spent in user mode\n @stime: time spent in system mode\n @lock: protects the above two fields\n\n Stores previous user/system time values such that we can guarantee\n monotonicity."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prev_cputime {
    pub utime: u64_,
    pub stime: u64_,
    pub lock: raw_spinlock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prev_cputime"][::core::mem::size_of::<prev_cputime>() - 24usize];
    ["Alignment of prev_cputime"][::core::mem::align_of::<prev_cputime>() - 8usize];
    ["Offset of field: prev_cputime::utime"][::core::mem::offset_of!(prev_cputime, utime) - 0usize];
    ["Offset of field: prev_cputime::stime"][::core::mem::offset_of!(prev_cputime, stime) - 8usize];
    ["Offset of field: prev_cputime::lock"][::core::mem::offset_of!(prev_cputime, lock) - 16usize];
};
impl Default for prev_cputime {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_info {
    pub pcount: core::ffi::c_ulong,
    pub run_delay: core::ffi::c_ulonglong,
    pub last_arrival: core::ffi::c_ulonglong,
    pub last_queued: core::ffi::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_info"][::core::mem::size_of::<sched_info>() - 32usize];
    ["Alignment of sched_info"][::core::mem::align_of::<sched_info>() - 8usize];
    ["Offset of field: sched_info::pcount"][::core::mem::offset_of!(sched_info, pcount) - 0usize];
    ["Offset of field: sched_info::run_delay"]
        [::core::mem::offset_of!(sched_info, run_delay) - 8usize];
    ["Offset of field: sched_info::last_arrival"]
        [::core::mem::offset_of!(sched_info, last_arrival) - 16usize];
    ["Offset of field: sched_info::last_queued"]
        [::core::mem::offset_of!(sched_info, last_queued) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct load_weight {
    pub weight: core::ffi::c_ulong,
    pub inv_weight: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of load_weight"][::core::mem::size_of::<load_weight>() - 16usize];
    ["Alignment of load_weight"][::core::mem::align_of::<load_weight>() - 8usize];
    ["Offset of field: load_weight::weight"][::core::mem::offset_of!(load_weight, weight) - 0usize];
    ["Offset of field: load_weight::inv_weight"]
        [::core::mem::offset_of!(load_weight, inv_weight) - 8usize];
};
#[doc = " struct util_est - Estimation utilization of FAIR tasks\n @enqueued: instantaneous estimated utilization of a task/cpu\n @ewma:     the Exponential Weighted Moving Average (EWMA)\n            utilization of a task\n\n Support data structure to track an Exponential Weighted Moving Average\n (EWMA) of a FAIR task's utilization. New samples are added to the moving\n average each time a task completes an activation. Sample's weight is chosen\n so that the EWMA will be relatively insensitive to transient changes to the\n task's workload.\n\n The enqueued attribute has a slightly different meaning for tasks and cpus:\n - task:   the task's util_avg at last task dequeue time\n - cfs_rq: the sum of util_est.enqueued for each RUNNABLE task on that CPU\n Thus, the util_est.enqueued of a task represents the contribution on the\n estimated utilization of the CPU where that task is currently enqueued.\n\n Only for tasks we track a moving average of the past instantaneous\n estimated utilization. This allows to absorb sporadic drops in utilization\n of an otherwise almost periodic task.\n\n The UTIL_AVG_UNCHANGED flag is used to synchronize util_est with util_avg\n updates. When a task is dequeued, its util_est should not be updated if its\n util_avg has not been updated in the meantime.\n This information is mapped into the MSB bit of util_est.enqueued at dequeue\n time. Since max value of util_est.enqueued for a task is 1024 (PELT util_avg\n for a task) it is safe to use MSB."]
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Default, Copy, Clone)]
pub struct util_est {
    pub enqueued: core::ffi::c_uint,
    pub ewma: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of util_est"][::core::mem::size_of::<util_est>() - 8usize];
    ["Alignment of util_est"][::core::mem::align_of::<util_est>() - 8usize];
    ["Offset of field: util_est::enqueued"][::core::mem::offset_of!(util_est, enqueued) - 0usize];
    ["Offset of field: util_est::ewma"][::core::mem::offset_of!(util_est, ewma) - 4usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_avg {
    pub last_update_time: u64_,
    pub load_sum: u64_,
    pub runnable_sum: u64_,
    pub util_sum: u32_,
    pub period_contrib: u32_,
    pub load_avg: core::ffi::c_ulong,
    pub runnable_avg: core::ffi::c_ulong,
    pub util_avg: core::ffi::c_ulong,
    pub util_est: util_est,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_avg"][::core::mem::size_of::<sched_avg>() - 64usize];
    ["Alignment of sched_avg"][::core::mem::align_of::<sched_avg>() - 64usize];
    ["Offset of field: sched_avg::last_update_time"]
        [::core::mem::offset_of!(sched_avg, last_update_time) - 0usize];
    ["Offset of field: sched_avg::load_sum"][::core::mem::offset_of!(sched_avg, load_sum) - 8usize];
    ["Offset of field: sched_avg::runnable_sum"]
        [::core::mem::offset_of!(sched_avg, runnable_sum) - 16usize];
    ["Offset of field: sched_avg::util_sum"]
        [::core::mem::offset_of!(sched_avg, util_sum) - 24usize];
    ["Offset of field: sched_avg::period_contrib"]
        [::core::mem::offset_of!(sched_avg, period_contrib) - 28usize];
    ["Offset of field: sched_avg::load_avg"]
        [::core::mem::offset_of!(sched_avg, load_avg) - 32usize];
    ["Offset of field: sched_avg::runnable_avg"]
        [::core::mem::offset_of!(sched_avg, runnable_avg) - 40usize];
    ["Offset of field: sched_avg::util_avg"]
        [::core::mem::offset_of!(sched_avg, util_avg) - 48usize];
    ["Offset of field: sched_avg::util_est"]
        [::core::mem::offset_of!(sched_avg, util_est) - 56usize];
};
impl Default for sched_avg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_statistics {
    pub wait_start: u64_,
    pub wait_max: u64_,
    pub wait_count: u64_,
    pub wait_sum: u64_,
    pub iowait_count: u64_,
    pub iowait_sum: u64_,
    pub sleep_start: u64_,
    pub sleep_max: u64_,
    pub sum_sleep_runtime: s64,
    pub block_start: u64_,
    pub block_max: u64_,
    pub sum_block_runtime: s64,
    pub exec_max: u64_,
    pub slice_max: u64_,
    pub nr_migrations_cold: u64_,
    pub nr_failed_migrations_affine: u64_,
    pub nr_failed_migrations_running: u64_,
    pub nr_failed_migrations_hot: u64_,
    pub nr_forced_migrations: u64_,
    pub nr_wakeups: u64_,
    pub nr_wakeups_sync: u64_,
    pub nr_wakeups_migrate: u64_,
    pub nr_wakeups_local: u64_,
    pub nr_wakeups_remote: u64_,
    pub nr_wakeups_affine: u64_,
    pub nr_wakeups_affine_attempts: u64_,
    pub nr_wakeups_passive: u64_,
    pub nr_wakeups_idle: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_statistics"][::core::mem::size_of::<sched_statistics>() - 256usize];
    ["Alignment of sched_statistics"][::core::mem::align_of::<sched_statistics>() - 64usize];
    ["Offset of field: sched_statistics::wait_start"]
        [::core::mem::offset_of!(sched_statistics, wait_start) - 0usize];
    ["Offset of field: sched_statistics::wait_max"]
        [::core::mem::offset_of!(sched_statistics, wait_max) - 8usize];
    ["Offset of field: sched_statistics::wait_count"]
        [::core::mem::offset_of!(sched_statistics, wait_count) - 16usize];
    ["Offset of field: sched_statistics::wait_sum"]
        [::core::mem::offset_of!(sched_statistics, wait_sum) - 24usize];
    ["Offset of field: sched_statistics::iowait_count"]
        [::core::mem::offset_of!(sched_statistics, iowait_count) - 32usize];
    ["Offset of field: sched_statistics::iowait_sum"]
        [::core::mem::offset_of!(sched_statistics, iowait_sum) - 40usize];
    ["Offset of field: sched_statistics::sleep_start"]
        [::core::mem::offset_of!(sched_statistics, sleep_start) - 48usize];
    ["Offset of field: sched_statistics::sleep_max"]
        [::core::mem::offset_of!(sched_statistics, sleep_max) - 56usize];
    ["Offset of field: sched_statistics::sum_sleep_runtime"]
        [::core::mem::offset_of!(sched_statistics, sum_sleep_runtime) - 64usize];
    ["Offset of field: sched_statistics::block_start"]
        [::core::mem::offset_of!(sched_statistics, block_start) - 72usize];
    ["Offset of field: sched_statistics::block_max"]
        [::core::mem::offset_of!(sched_statistics, block_max) - 80usize];
    ["Offset of field: sched_statistics::sum_block_runtime"]
        [::core::mem::offset_of!(sched_statistics, sum_block_runtime) - 88usize];
    ["Offset of field: sched_statistics::exec_max"]
        [::core::mem::offset_of!(sched_statistics, exec_max) - 96usize];
    ["Offset of field: sched_statistics::slice_max"]
        [::core::mem::offset_of!(sched_statistics, slice_max) - 104usize];
    ["Offset of field: sched_statistics::nr_migrations_cold"]
        [::core::mem::offset_of!(sched_statistics, nr_migrations_cold) - 112usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_affine"]
        [::core::mem::offset_of!(sched_statistics, nr_failed_migrations_affine) - 120usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_running"]
        [::core::mem::offset_of!(sched_statistics, nr_failed_migrations_running) - 128usize];
    ["Offset of field: sched_statistics::nr_failed_migrations_hot"]
        [::core::mem::offset_of!(sched_statistics, nr_failed_migrations_hot) - 136usize];
    ["Offset of field: sched_statistics::nr_forced_migrations"]
        [::core::mem::offset_of!(sched_statistics, nr_forced_migrations) - 144usize];
    ["Offset of field: sched_statistics::nr_wakeups"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups) - 152usize];
    ["Offset of field: sched_statistics::nr_wakeups_sync"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_sync) - 160usize];
    ["Offset of field: sched_statistics::nr_wakeups_migrate"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_migrate) - 168usize];
    ["Offset of field: sched_statistics::nr_wakeups_local"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_local) - 176usize];
    ["Offset of field: sched_statistics::nr_wakeups_remote"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_remote) - 184usize];
    ["Offset of field: sched_statistics::nr_wakeups_affine"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_affine) - 192usize];
    ["Offset of field: sched_statistics::nr_wakeups_affine_attempts"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_affine_attempts) - 200usize];
    ["Offset of field: sched_statistics::nr_wakeups_passive"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_passive) - 208usize];
    ["Offset of field: sched_statistics::nr_wakeups_idle"]
        [::core::mem::offset_of!(sched_statistics, nr_wakeups_idle) - 216usize];
};
impl Default for sched_statistics {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct sched_entity {
    pub load: load_weight,
    pub run_node: rb_node,
    pub group_node: list_head,
    pub on_rq: core::ffi::c_uint,
    pub exec_start: u64_,
    pub sum_exec_runtime: u64_,
    pub vruntime: u64_,
    pub prev_sum_exec_runtime: u64_,
    pub nr_migrations: u64_,
    pub depth: core::ffi::c_int,
    pub parent: *mut sched_entity,
    pub cfs_rq: *mut cfs_rq,
    pub my_q: *mut cfs_rq,
    pub runnable_weight: core::ffi::c_ulong,
    pub __bindgen_padding_0: [u64; 6usize],
    pub avg: sched_avg,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_entity"][::core::mem::size_of::<sched_entity>() - 256usize];
    ["Alignment of sched_entity"][::core::mem::align_of::<sched_entity>() - 64usize];
    ["Offset of field: sched_entity::load"][::core::mem::offset_of!(sched_entity, load) - 0usize];
    ["Offset of field: sched_entity::run_node"]
        [::core::mem::offset_of!(sched_entity, run_node) - 16usize];
    ["Offset of field: sched_entity::group_node"]
        [::core::mem::offset_of!(sched_entity, group_node) - 40usize];
    ["Offset of field: sched_entity::on_rq"]
        [::core::mem::offset_of!(sched_entity, on_rq) - 56usize];
    ["Offset of field: sched_entity::exec_start"]
        [::core::mem::offset_of!(sched_entity, exec_start) - 64usize];
    ["Offset of field: sched_entity::sum_exec_runtime"]
        [::core::mem::offset_of!(sched_entity, sum_exec_runtime) - 72usize];
    ["Offset of field: sched_entity::vruntime"]
        [::core::mem::offset_of!(sched_entity, vruntime) - 80usize];
    ["Offset of field: sched_entity::prev_sum_exec_runtime"]
        [::core::mem::offset_of!(sched_entity, prev_sum_exec_runtime) - 88usize];
    ["Offset of field: sched_entity::nr_migrations"]
        [::core::mem::offset_of!(sched_entity, nr_migrations) - 96usize];
    ["Offset of field: sched_entity::depth"]
        [::core::mem::offset_of!(sched_entity, depth) - 104usize];
    ["Offset of field: sched_entity::parent"]
        [::core::mem::offset_of!(sched_entity, parent) - 112usize];
    ["Offset of field: sched_entity::cfs_rq"]
        [::core::mem::offset_of!(sched_entity, cfs_rq) - 120usize];
    ["Offset of field: sched_entity::my_q"][::core::mem::offset_of!(sched_entity, my_q) - 128usize];
    ["Offset of field: sched_entity::runnable_weight"]
        [::core::mem::offset_of!(sched_entity, runnable_weight) - 136usize];
    ["Offset of field: sched_entity::avg"][::core::mem::offset_of!(sched_entity, avg) - 192usize];
};
impl Default for sched_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_rt_entity {
    pub run_list: list_head,
    pub timeout: core::ffi::c_ulong,
    pub watchdog_stamp: core::ffi::c_ulong,
    pub time_slice: core::ffi::c_uint,
    pub on_rq: core::ffi::c_ushort,
    pub on_list: core::ffi::c_ushort,
    pub back: *mut sched_rt_entity,
    pub parent: *mut sched_rt_entity,
    pub rt_rq: *mut rt_rq,
    pub my_q: *mut rt_rq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_rt_entity"][::core::mem::size_of::<sched_rt_entity>() - 72usize];
    ["Alignment of sched_rt_entity"][::core::mem::align_of::<sched_rt_entity>() - 8usize];
    ["Offset of field: sched_rt_entity::run_list"]
        [::core::mem::offset_of!(sched_rt_entity, run_list) - 0usize];
    ["Offset of field: sched_rt_entity::timeout"]
        [::core::mem::offset_of!(sched_rt_entity, timeout) - 16usize];
    ["Offset of field: sched_rt_entity::watchdog_stamp"]
        [::core::mem::offset_of!(sched_rt_entity, watchdog_stamp) - 24usize];
    ["Offset of field: sched_rt_entity::time_slice"]
        [::core::mem::offset_of!(sched_rt_entity, time_slice) - 32usize];
    ["Offset of field: sched_rt_entity::on_rq"]
        [::core::mem::offset_of!(sched_rt_entity, on_rq) - 36usize];
    ["Offset of field: sched_rt_entity::on_list"]
        [::core::mem::offset_of!(sched_rt_entity, on_list) - 38usize];
    ["Offset of field: sched_rt_entity::back"]
        [::core::mem::offset_of!(sched_rt_entity, back) - 40usize];
    ["Offset of field: sched_rt_entity::parent"]
        [::core::mem::offset_of!(sched_rt_entity, parent) - 48usize];
    ["Offset of field: sched_rt_entity::rt_rq"]
        [::core::mem::offset_of!(sched_rt_entity, rt_rq) - 56usize];
    ["Offset of field: sched_rt_entity::my_q"]
        [::core::mem::offset_of!(sched_rt_entity, my_q) - 64usize];
};
impl Default for sched_rt_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_dl_entity {
    pub rb_node: rb_node,
    pub dl_runtime: u64_,
    pub dl_deadline: u64_,
    pub dl_period: u64_,
    pub dl_bw: u64_,
    pub dl_density: u64_,
    pub runtime: s64,
    pub deadline: u64_,
    pub flags: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub dl_timer: hrtimer,
    pub inactive_timer: hrtimer,
    pub pi_se: *mut sched_dl_entity,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_dl_entity"][::core::mem::size_of::<sched_dl_entity>() - 224usize];
    ["Alignment of sched_dl_entity"][::core::mem::align_of::<sched_dl_entity>() - 8usize];
    ["Offset of field: sched_dl_entity::rb_node"]
        [::core::mem::offset_of!(sched_dl_entity, rb_node) - 0usize];
    ["Offset of field: sched_dl_entity::dl_runtime"]
        [::core::mem::offset_of!(sched_dl_entity, dl_runtime) - 24usize];
    ["Offset of field: sched_dl_entity::dl_deadline"]
        [::core::mem::offset_of!(sched_dl_entity, dl_deadline) - 32usize];
    ["Offset of field: sched_dl_entity::dl_period"]
        [::core::mem::offset_of!(sched_dl_entity, dl_period) - 40usize];
    ["Offset of field: sched_dl_entity::dl_bw"]
        [::core::mem::offset_of!(sched_dl_entity, dl_bw) - 48usize];
    ["Offset of field: sched_dl_entity::dl_density"]
        [::core::mem::offset_of!(sched_dl_entity, dl_density) - 56usize];
    ["Offset of field: sched_dl_entity::runtime"]
        [::core::mem::offset_of!(sched_dl_entity, runtime) - 64usize];
    ["Offset of field: sched_dl_entity::deadline"]
        [::core::mem::offset_of!(sched_dl_entity, deadline) - 72usize];
    ["Offset of field: sched_dl_entity::flags"]
        [::core::mem::offset_of!(sched_dl_entity, flags) - 80usize];
    ["Offset of field: sched_dl_entity::dl_timer"]
        [::core::mem::offset_of!(sched_dl_entity, dl_timer) - 88usize];
    ["Offset of field: sched_dl_entity::inactive_timer"]
        [::core::mem::offset_of!(sched_dl_entity, inactive_timer) - 152usize];
    ["Offset of field: sched_dl_entity::pi_se"]
        [::core::mem::offset_of!(sched_dl_entity, pi_se) - 216usize];
};
impl Default for sched_dl_entity {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl sched_dl_entity {
    #[inline]
    pub fn dl_throttled(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_throttled(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_yielded(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_yielded(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_non_contending(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_non_contending(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dl_overrun(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dl_overrun(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dl_throttled: core::ffi::c_uint,
        dl_yielded: core::ffi::c_uint,
        dl_non_contending: core::ffi::c_uint,
        dl_overrun: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dl_throttled: u32 = unsafe { ::core::mem::transmute(dl_throttled) };
            dl_throttled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dl_yielded: u32 = unsafe { ::core::mem::transmute(dl_yielded) };
            dl_yielded as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let dl_non_contending: u32 = unsafe { ::core::mem::transmute(dl_non_contending) };
            dl_non_contending as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dl_overrun: u32 = unsafe { ::core::mem::transmute(dl_overrun) };
            dl_overrun as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rcu_special {
    pub b: rcu_special__bindgen_ty_1,
    pub s: u32_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rcu_special__bindgen_ty_1 {
    pub blocked: u8_,
    pub need_qs: u8_,
    pub exp_hint: u8_,
    pub need_mb: u8_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_special__bindgen_ty_1"]
        [::core::mem::size_of::<rcu_special__bindgen_ty_1>() - 4usize];
    ["Alignment of rcu_special__bindgen_ty_1"]
        [::core::mem::align_of::<rcu_special__bindgen_ty_1>() - 1usize];
    ["Offset of field: rcu_special__bindgen_ty_1::blocked"]
        [::core::mem::offset_of!(rcu_special__bindgen_ty_1, blocked) - 0usize];
    ["Offset of field: rcu_special__bindgen_ty_1::need_qs"]
        [::core::mem::offset_of!(rcu_special__bindgen_ty_1, need_qs) - 1usize];
    ["Offset of field: rcu_special__bindgen_ty_1::exp_hint"]
        [::core::mem::offset_of!(rcu_special__bindgen_ty_1, exp_hint) - 2usize];
    ["Offset of field: rcu_special__bindgen_ty_1::need_mb"]
        [::core::mem::offset_of!(rcu_special__bindgen_ty_1, need_mb) - 3usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_special"][::core::mem::size_of::<rcu_special>() - 4usize];
    ["Alignment of rcu_special"][::core::mem::align_of::<rcu_special>() - 4usize];
    ["Offset of field: rcu_special::b"][::core::mem::offset_of!(rcu_special, b) - 0usize];
    ["Offset of field: rcu_special::s"][::core::mem::offset_of!(rcu_special, s) - 0usize];
};
impl Default for rcu_special {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wake_q_node {
    pub next: *mut wake_q_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wake_q_node"][::core::mem::size_of::<wake_q_node>() - 8usize];
    ["Alignment of wake_q_node"][::core::mem::align_of::<wake_q_node>() - 8usize];
    ["Offset of field: wake_q_node::next"][::core::mem::offset_of!(wake_q_node, next) - 0usize];
};
impl Default for wake_q_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kmap_ctrl {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kmap_ctrl"][::core::mem::size_of::<kmap_ctrl>() - 0usize];
    ["Alignment of kmap_ctrl"][::core::mem::align_of::<kmap_ctrl>() - 1usize];
};
#[repr(C)]
#[repr(align(64))]
pub struct task_struct {
    pub thread_info: thread_info,
    pub __state: core::ffi::c_uint,
    pub stack: *mut core::ffi::c_void,
    pub usage: refcount_t,
    pub flags: core::ffi::c_uint,
    pub ptrace: core::ffi::c_uint,
    pub on_cpu: core::ffi::c_int,
    pub wake_entry: __call_single_node,
    pub wakee_flips: core::ffi::c_uint,
    pub wakee_flip_decay_ts: core::ffi::c_ulong,
    pub last_wakee: *mut task_struct,
    pub recent_used_cpu: core::ffi::c_int,
    pub wake_cpu: core::ffi::c_int,
    pub on_rq: core::ffi::c_int,
    pub prio: core::ffi::c_int,
    pub static_prio: core::ffi::c_int,
    pub normal_prio: core::ffi::c_int,
    pub rt_priority: core::ffi::c_uint,
    pub __bindgen_padding_0: [u64; 0usize],
    pub se: sched_entity,
    pub rt: sched_rt_entity,
    pub dl: sched_dl_entity,
    pub sched_class: *mut sched_class,
    pub sched_task_group: *mut task_group,
    pub __bindgen_padding_1: u64,
    pub stats: sched_statistics,
    pub preempt_notifiers: hlist_head,
    pub policy: core::ffi::c_uint,
    pub nr_cpus_allowed: core::ffi::c_int,
    pub cpus_ptr: *const cpumask_t,
    pub user_cpus_ptr: *mut cpumask_t,
    pub cpus_mask: cpumask_t,
    pub migration_pending: *mut core::ffi::c_void,
    pub migration_disabled: core::ffi::c_ushort,
    pub migration_flags: core::ffi::c_ushort,
    pub trc_reader_nesting: core::ffi::c_int,
    pub trc_ipi_to_cpu: core::ffi::c_int,
    pub trc_reader_special: rcu_special,
    pub trc_holdout_list: list_head,
    pub trc_blkd_node: list_head,
    pub trc_blkd_cpu: core::ffi::c_int,
    pub sched_info: sched_info,
    pub tasks: list_head,
    pub pushable_tasks: plist_node,
    pub pushable_dl_tasks: rb_node,
    pub mm: *mut mm_struct,
    pub active_mm: *mut mm_struct,
    pub rss_stat: task_rss_stat,
    pub exit_state: core::ffi::c_int,
    pub exit_code: core::ffi::c_int,
    pub exit_signal: core::ffi::c_int,
    pub pdeath_signal: core::ffi::c_int,
    pub jobctl: core::ffi::c_ulong,
    pub personality: core::ffi::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
    pub atomic_flags: core::ffi::c_ulong,
    pub restart_block: restart_block,
    pub pid: pid_t,
    pub tgid: pid_t,
    pub stack_canary: core::ffi::c_ulong,
    pub real_parent: *mut task_struct,
    pub parent: *mut task_struct,
    pub children: list_head,
    pub sibling: list_head,
    pub group_leader: *mut task_struct,
    pub ptraced: list_head,
    pub ptrace_entry: list_head,
    pub thread_pid: *mut pid,
    pub pid_links: [hlist_node; 4usize],
    pub thread_group: list_head,
    pub thread_node: list_head,
    pub vfork_done: *mut completion,
    pub set_child_tid: *mut core::ffi::c_int,
    pub clear_child_tid: *mut core::ffi::c_int,
    pub worker_private: *mut core::ffi::c_void,
    pub utime: u64_,
    pub stime: u64_,
    pub gtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub start_time: u64_,
    pub start_boottime: u64_,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub posix_cputimers: posix_cputimers,
    pub posix_cputimers_work: posix_cputimers_work,
    pub ptracer_cred: *const cred,
    pub real_cred: *const cred,
    pub cred: *const cred,
    pub cached_requested_key: *mut key,
    pub comm: [core::ffi::c_char; 16usize],
    pub nameidata: *mut nameidata,
    pub sysvsem: sysv_sem,
    pub sysvshm: sysv_shm,
    pub fs: *mut fs_struct,
    pub files: *mut files_struct,
    pub io_uring: *mut io_uring_task,
    pub nsproxy: *mut nsproxy,
    pub signal: *mut signal_struct,
    pub sighand: *mut sighand_struct,
    pub blocked: sigset_t,
    pub real_blocked: sigset_t,
    pub saved_sigmask: sigset_t,
    pub pending: sigpending,
    pub sas_ss_sp: core::ffi::c_ulong,
    pub sas_ss_size: usize,
    pub sas_ss_flags: core::ffi::c_uint,
    pub task_works: *mut callback_head,
    pub audit_context: *mut audit_context,
    pub loginuid: kuid_t,
    pub sessionid: core::ffi::c_uint,
    pub seccomp: seccomp,
    pub syscall_dispatch: syscall_user_dispatch,
    pub parent_exec_id: u64_,
    pub self_exec_id: u64_,
    pub alloc_lock: spinlock_t,
    pub pi_lock: raw_spinlock_t,
    pub wake_q: wake_q_node,
    pub pi_waiters: rb_root_cached,
    pub pi_top_task: *mut task_struct,
    pub pi_blocked_on: *mut rt_mutex_waiter,
    pub journal_info: *mut core::ffi::c_void,
    pub bio_list: *mut bio_list,
    pub plug: *mut blk_plug,
    pub reclaim_state: *mut reclaim_state,
    pub backing_dev_info: *mut backing_dev_info,
    pub io_context: *mut io_context,
    pub capture_control: *mut capture_control,
    pub ptrace_message: core::ffi::c_ulong,
    pub last_siginfo: *mut kernel_siginfo_t,
    pub ioac: task_io_accounting,
    pub acct_rss_mem1: u64_,
    pub acct_vm_mem1: u64_,
    pub acct_timexpd: u64_,
    pub mems_allowed: nodemask_t,
    pub mems_allowed_seq: seqcount_spinlock_t,
    pub cpuset_mem_spread_rotor: core::ffi::c_int,
    pub cpuset_slab_spread_rotor: core::ffi::c_int,
    pub cgroups: *mut css_set,
    pub cg_list: list_head,
    pub robust_list: *mut robust_list_head,
    pub compat_robust_list: *mut compat_robust_list_head,
    pub pi_state_list: list_head,
    pub pi_state_cache: *mut futex_pi_state,
    pub futex_exit_mutex: mutex,
    pub futex_state: core::ffi::c_uint,
    pub perf_event_ctxp: [*mut perf_event_context; 2usize],
    pub perf_event_mutex: mutex,
    pub perf_event_list: list_head,
    pub rseq: *mut rseq,
    pub rseq_sig: u32_,
    pub rseq_event_mask: core::ffi::c_ulong,
    pub tlb_ubc: tlbflush_unmap_batch,
    pub __bindgen_anon_1: task_struct__bindgen_ty_1,
    pub splice_pipe: *mut pipe_inode_info,
    pub task_frag: page_frag,
    pub delays: *mut task_delay_info,
    pub nr_dirtied: core::ffi::c_int,
    pub nr_dirtied_pause: core::ffi::c_int,
    pub dirty_paused_when: core::ffi::c_ulong,
    pub timer_slack_ns: u64_,
    pub default_timer_slack_ns: u64_,
    pub curr_ret_stack: core::ffi::c_int,
    pub curr_ret_depth: core::ffi::c_int,
    pub ret_stack: *mut ftrace_ret_stack,
    pub ftrace_timestamp: core::ffi::c_ulonglong,
    pub trace_overrun: atomic_t,
    pub tracing_graph_pause: atomic_t,
    pub trace_recursion: core::ffi::c_ulong,
    pub memcg_in_oom: *mut mem_cgroup,
    pub memcg_oom_gfp_mask: gfp_t,
    pub memcg_oom_order: core::ffi::c_int,
    pub memcg_nr_pages_over_high: core::ffi::c_uint,
    pub active_memcg: *mut mem_cgroup,
    pub throttle_queue: *mut request_queue,
    pub utask: *mut uprobe_task,
    pub kmap_ctrl: kmap_ctrl,
    pub pagefault_disabled: core::ffi::c_int,
    pub oom_reaper_list: *mut task_struct,
    pub oom_reaper_timer: timer_list,
    pub stack_vm_area: *mut vm_struct,
    pub stack_refcount: refcount_t,
    pub security: *mut core::ffi::c_void,
    pub bpf_storage: *mut bpf_local_storage,
    pub bpf_ctx: *mut bpf_run_ctx,
    pub mce_vaddr: *mut core::ffi::c_void,
    pub mce_kflags: __u64,
    pub mce_addr: u64_,
    pub _bitfield_align_2: [u64; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub mce_kill_me: callback_head,
    pub mce_count: core::ffi::c_int,
    pub kretprobe_instances: llist_head,
    pub rethooks: llist_head,
    pub l1d_flush_kill: callback_head,
    pub thread: thread_struct,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union task_struct__bindgen_ty_1 {
    pub rcu_users: refcount_t,
    pub rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_struct__bindgen_ty_1"]
        [::core::mem::size_of::<task_struct__bindgen_ty_1>() - 16usize];
    ["Alignment of task_struct__bindgen_ty_1"]
        [::core::mem::align_of::<task_struct__bindgen_ty_1>() - 8usize];
    ["Offset of field: task_struct__bindgen_ty_1::rcu_users"]
        [::core::mem::offset_of!(task_struct__bindgen_ty_1, rcu_users) - 0usize];
    ["Offset of field: task_struct__bindgen_ty_1::rcu"]
        [::core::mem::offset_of!(task_struct__bindgen_ty_1, rcu) - 0usize];
};
impl Default for task_struct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_struct"][::core::mem::size_of::<task_struct>() - 7296usize];
    ["Alignment of task_struct"][::core::mem::align_of::<task_struct>() - 64usize];
    ["Offset of field: task_struct::thread_info"]
        [::core::mem::offset_of!(task_struct, thread_info) - 0usize];
    ["Offset of field: task_struct::__state"]
        [::core::mem::offset_of!(task_struct, __state) - 24usize];
    ["Offset of field: task_struct::stack"][::core::mem::offset_of!(task_struct, stack) - 32usize];
    ["Offset of field: task_struct::usage"][::core::mem::offset_of!(task_struct, usage) - 40usize];
    ["Offset of field: task_struct::flags"][::core::mem::offset_of!(task_struct, flags) - 44usize];
    ["Offset of field: task_struct::ptrace"]
        [::core::mem::offset_of!(task_struct, ptrace) - 48usize];
    ["Offset of field: task_struct::on_cpu"]
        [::core::mem::offset_of!(task_struct, on_cpu) - 52usize];
    ["Offset of field: task_struct::wake_entry"]
        [::core::mem::offset_of!(task_struct, wake_entry) - 56usize];
    ["Offset of field: task_struct::wakee_flips"]
        [::core::mem::offset_of!(task_struct, wakee_flips) - 72usize];
    ["Offset of field: task_struct::wakee_flip_decay_ts"]
        [::core::mem::offset_of!(task_struct, wakee_flip_decay_ts) - 80usize];
    ["Offset of field: task_struct::last_wakee"]
        [::core::mem::offset_of!(task_struct, last_wakee) - 88usize];
    ["Offset of field: task_struct::recent_used_cpu"]
        [::core::mem::offset_of!(task_struct, recent_used_cpu) - 96usize];
    ["Offset of field: task_struct::wake_cpu"]
        [::core::mem::offset_of!(task_struct, wake_cpu) - 100usize];
    ["Offset of field: task_struct::on_rq"][::core::mem::offset_of!(task_struct, on_rq) - 104usize];
    ["Offset of field: task_struct::prio"][::core::mem::offset_of!(task_struct, prio) - 108usize];
    ["Offset of field: task_struct::static_prio"]
        [::core::mem::offset_of!(task_struct, static_prio) - 112usize];
    ["Offset of field: task_struct::normal_prio"]
        [::core::mem::offset_of!(task_struct, normal_prio) - 116usize];
    ["Offset of field: task_struct::rt_priority"]
        [::core::mem::offset_of!(task_struct, rt_priority) - 120usize];
    ["Offset of field: task_struct::se"][::core::mem::offset_of!(task_struct, se) - 128usize];
    ["Offset of field: task_struct::rt"][::core::mem::offset_of!(task_struct, rt) - 384usize];
    ["Offset of field: task_struct::dl"][::core::mem::offset_of!(task_struct, dl) - 456usize];
    ["Offset of field: task_struct::sched_class"]
        [::core::mem::offset_of!(task_struct, sched_class) - 680usize];
    ["Offset of field: task_struct::sched_task_group"]
        [::core::mem::offset_of!(task_struct, sched_task_group) - 688usize];
    ["Offset of field: task_struct::stats"][::core::mem::offset_of!(task_struct, stats) - 704usize];
    ["Offset of field: task_struct::preempt_notifiers"]
        [::core::mem::offset_of!(task_struct, preempt_notifiers) - 960usize];
    ["Offset of field: task_struct::policy"]
        [::core::mem::offset_of!(task_struct, policy) - 968usize];
    ["Offset of field: task_struct::nr_cpus_allowed"]
        [::core::mem::offset_of!(task_struct, nr_cpus_allowed) - 972usize];
    ["Offset of field: task_struct::cpus_ptr"]
        [::core::mem::offset_of!(task_struct, cpus_ptr) - 976usize];
    ["Offset of field: task_struct::user_cpus_ptr"]
        [::core::mem::offset_of!(task_struct, user_cpus_ptr) - 984usize];
    ["Offset of field: task_struct::cpus_mask"]
        [::core::mem::offset_of!(task_struct, cpus_mask) - 992usize];
    ["Offset of field: task_struct::migration_pending"]
        [::core::mem::offset_of!(task_struct, migration_pending) - 1024usize];
    ["Offset of field: task_struct::migration_disabled"]
        [::core::mem::offset_of!(task_struct, migration_disabled) - 1032usize];
    ["Offset of field: task_struct::migration_flags"]
        [::core::mem::offset_of!(task_struct, migration_flags) - 1034usize];
    ["Offset of field: task_struct::trc_reader_nesting"]
        [::core::mem::offset_of!(task_struct, trc_reader_nesting) - 1036usize];
    ["Offset of field: task_struct::trc_ipi_to_cpu"]
        [::core::mem::offset_of!(task_struct, trc_ipi_to_cpu) - 1040usize];
    ["Offset of field: task_struct::trc_reader_special"]
        [::core::mem::offset_of!(task_struct, trc_reader_special) - 1044usize];
    ["Offset of field: task_struct::trc_holdout_list"]
        [::core::mem::offset_of!(task_struct, trc_holdout_list) - 1048usize];
    ["Offset of field: task_struct::trc_blkd_node"]
        [::core::mem::offset_of!(task_struct, trc_blkd_node) - 1064usize];
    ["Offset of field: task_struct::trc_blkd_cpu"]
        [::core::mem::offset_of!(task_struct, trc_blkd_cpu) - 1080usize];
    ["Offset of field: task_struct::sched_info"]
        [::core::mem::offset_of!(task_struct, sched_info) - 1088usize];
    ["Offset of field: task_struct::tasks"]
        [::core::mem::offset_of!(task_struct, tasks) - 1120usize];
    ["Offset of field: task_struct::pushable_tasks"]
        [::core::mem::offset_of!(task_struct, pushable_tasks) - 1136usize];
    ["Offset of field: task_struct::pushable_dl_tasks"]
        [::core::mem::offset_of!(task_struct, pushable_dl_tasks) - 1176usize];
    ["Offset of field: task_struct::mm"][::core::mem::offset_of!(task_struct, mm) - 1200usize];
    ["Offset of field: task_struct::active_mm"]
        [::core::mem::offset_of!(task_struct, active_mm) - 1208usize];
    ["Offset of field: task_struct::rss_stat"]
        [::core::mem::offset_of!(task_struct, rss_stat) - 1216usize];
    ["Offset of field: task_struct::exit_state"]
        [::core::mem::offset_of!(task_struct, exit_state) - 1236usize];
    ["Offset of field: task_struct::exit_code"]
        [::core::mem::offset_of!(task_struct, exit_code) - 1240usize];
    ["Offset of field: task_struct::exit_signal"]
        [::core::mem::offset_of!(task_struct, exit_signal) - 1244usize];
    ["Offset of field: task_struct::pdeath_signal"]
        [::core::mem::offset_of!(task_struct, pdeath_signal) - 1248usize];
    ["Offset of field: task_struct::jobctl"]
        [::core::mem::offset_of!(task_struct, jobctl) - 1256usize];
    ["Offset of field: task_struct::personality"]
        [::core::mem::offset_of!(task_struct, personality) - 1264usize];
    ["Offset of field: task_struct::atomic_flags"]
        [::core::mem::offset_of!(task_struct, atomic_flags) - 1280usize];
    ["Offset of field: task_struct::restart_block"]
        [::core::mem::offset_of!(task_struct, restart_block) - 1288usize];
    ["Offset of field: task_struct::pid"][::core::mem::offset_of!(task_struct, pid) - 1344usize];
    ["Offset of field: task_struct::tgid"][::core::mem::offset_of!(task_struct, tgid) - 1348usize];
    ["Offset of field: task_struct::stack_canary"]
        [::core::mem::offset_of!(task_struct, stack_canary) - 1352usize];
    ["Offset of field: task_struct::real_parent"]
        [::core::mem::offset_of!(task_struct, real_parent) - 1360usize];
    ["Offset of field: task_struct::parent"]
        [::core::mem::offset_of!(task_struct, parent) - 1368usize];
    ["Offset of field: task_struct::children"]
        [::core::mem::offset_of!(task_struct, children) - 1376usize];
    ["Offset of field: task_struct::sibling"]
        [::core::mem::offset_of!(task_struct, sibling) - 1392usize];
    ["Offset of field: task_struct::group_leader"]
        [::core::mem::offset_of!(task_struct, group_leader) - 1408usize];
    ["Offset of field: task_struct::ptraced"]
        [::core::mem::offset_of!(task_struct, ptraced) - 1416usize];
    ["Offset of field: task_struct::ptrace_entry"]
        [::core::mem::offset_of!(task_struct, ptrace_entry) - 1432usize];
    ["Offset of field: task_struct::thread_pid"]
        [::core::mem::offset_of!(task_struct, thread_pid) - 1448usize];
    ["Offset of field: task_struct::pid_links"]
        [::core::mem::offset_of!(task_struct, pid_links) - 1456usize];
    ["Offset of field: task_struct::thread_group"]
        [::core::mem::offset_of!(task_struct, thread_group) - 1520usize];
    ["Offset of field: task_struct::thread_node"]
        [::core::mem::offset_of!(task_struct, thread_node) - 1536usize];
    ["Offset of field: task_struct::vfork_done"]
        [::core::mem::offset_of!(task_struct, vfork_done) - 1552usize];
    ["Offset of field: task_struct::set_child_tid"]
        [::core::mem::offset_of!(task_struct, set_child_tid) - 1560usize];
    ["Offset of field: task_struct::clear_child_tid"]
        [::core::mem::offset_of!(task_struct, clear_child_tid) - 1568usize];
    ["Offset of field: task_struct::worker_private"]
        [::core::mem::offset_of!(task_struct, worker_private) - 1576usize];
    ["Offset of field: task_struct::utime"]
        [::core::mem::offset_of!(task_struct, utime) - 1584usize];
    ["Offset of field: task_struct::stime"]
        [::core::mem::offset_of!(task_struct, stime) - 1592usize];
    ["Offset of field: task_struct::gtime"]
        [::core::mem::offset_of!(task_struct, gtime) - 1600usize];
    ["Offset of field: task_struct::prev_cputime"]
        [::core::mem::offset_of!(task_struct, prev_cputime) - 1608usize];
    ["Offset of field: task_struct::nvcsw"]
        [::core::mem::offset_of!(task_struct, nvcsw) - 1632usize];
    ["Offset of field: task_struct::nivcsw"]
        [::core::mem::offset_of!(task_struct, nivcsw) - 1640usize];
    ["Offset of field: task_struct::start_time"]
        [::core::mem::offset_of!(task_struct, start_time) - 1648usize];
    ["Offset of field: task_struct::start_boottime"]
        [::core::mem::offset_of!(task_struct, start_boottime) - 1656usize];
    ["Offset of field: task_struct::min_flt"]
        [::core::mem::offset_of!(task_struct, min_flt) - 1664usize];
    ["Offset of field: task_struct::maj_flt"]
        [::core::mem::offset_of!(task_struct, maj_flt) - 1672usize];
    ["Offset of field: task_struct::posix_cputimers"]
        [::core::mem::offset_of!(task_struct, posix_cputimers) - 1680usize];
    ["Offset of field: task_struct::posix_cputimers_work"]
        [::core::mem::offset_of!(task_struct, posix_cputimers_work) - 1760usize];
    ["Offset of field: task_struct::ptracer_cred"]
        [::core::mem::offset_of!(task_struct, ptracer_cred) - 1784usize];
    ["Offset of field: task_struct::real_cred"]
        [::core::mem::offset_of!(task_struct, real_cred) - 1792usize];
    ["Offset of field: task_struct::cred"][::core::mem::offset_of!(task_struct, cred) - 1800usize];
    ["Offset of field: task_struct::cached_requested_key"]
        [::core::mem::offset_of!(task_struct, cached_requested_key) - 1808usize];
    ["Offset of field: task_struct::comm"][::core::mem::offset_of!(task_struct, comm) - 1816usize];
    ["Offset of field: task_struct::nameidata"]
        [::core::mem::offset_of!(task_struct, nameidata) - 1832usize];
    ["Offset of field: task_struct::sysvsem"]
        [::core::mem::offset_of!(task_struct, sysvsem) - 1840usize];
    ["Offset of field: task_struct::sysvshm"]
        [::core::mem::offset_of!(task_struct, sysvshm) - 1848usize];
    ["Offset of field: task_struct::fs"][::core::mem::offset_of!(task_struct, fs) - 1864usize];
    ["Offset of field: task_struct::files"]
        [::core::mem::offset_of!(task_struct, files) - 1872usize];
    ["Offset of field: task_struct::io_uring"]
        [::core::mem::offset_of!(task_struct, io_uring) - 1880usize];
    ["Offset of field: task_struct::nsproxy"]
        [::core::mem::offset_of!(task_struct, nsproxy) - 1888usize];
    ["Offset of field: task_struct::signal"]
        [::core::mem::offset_of!(task_struct, signal) - 1896usize];
    ["Offset of field: task_struct::sighand"]
        [::core::mem::offset_of!(task_struct, sighand) - 1904usize];
    ["Offset of field: task_struct::blocked"]
        [::core::mem::offset_of!(task_struct, blocked) - 1912usize];
    ["Offset of field: task_struct::real_blocked"]
        [::core::mem::offset_of!(task_struct, real_blocked) - 1920usize];
    ["Offset of field: task_struct::saved_sigmask"]
        [::core::mem::offset_of!(task_struct, saved_sigmask) - 1928usize];
    ["Offset of field: task_struct::pending"]
        [::core::mem::offset_of!(task_struct, pending) - 1936usize];
    ["Offset of field: task_struct::sas_ss_sp"]
        [::core::mem::offset_of!(task_struct, sas_ss_sp) - 1960usize];
    ["Offset of field: task_struct::sas_ss_size"]
        [::core::mem::offset_of!(task_struct, sas_ss_size) - 1968usize];
    ["Offset of field: task_struct::sas_ss_flags"]
        [::core::mem::offset_of!(task_struct, sas_ss_flags) - 1976usize];
    ["Offset of field: task_struct::task_works"]
        [::core::mem::offset_of!(task_struct, task_works) - 1984usize];
    ["Offset of field: task_struct::audit_context"]
        [::core::mem::offset_of!(task_struct, audit_context) - 1992usize];
    ["Offset of field: task_struct::loginuid"]
        [::core::mem::offset_of!(task_struct, loginuid) - 2000usize];
    ["Offset of field: task_struct::sessionid"]
        [::core::mem::offset_of!(task_struct, sessionid) - 2004usize];
    ["Offset of field: task_struct::seccomp"]
        [::core::mem::offset_of!(task_struct, seccomp) - 2008usize];
    ["Offset of field: task_struct::syscall_dispatch"]
        [::core::mem::offset_of!(task_struct, syscall_dispatch) - 2024usize];
    ["Offset of field: task_struct::parent_exec_id"]
        [::core::mem::offset_of!(task_struct, parent_exec_id) - 2056usize];
    ["Offset of field: task_struct::self_exec_id"]
        [::core::mem::offset_of!(task_struct, self_exec_id) - 2064usize];
    ["Offset of field: task_struct::alloc_lock"]
        [::core::mem::offset_of!(task_struct, alloc_lock) - 2072usize];
    ["Offset of field: task_struct::pi_lock"]
        [::core::mem::offset_of!(task_struct, pi_lock) - 2076usize];
    ["Offset of field: task_struct::wake_q"]
        [::core::mem::offset_of!(task_struct, wake_q) - 2080usize];
    ["Offset of field: task_struct::pi_waiters"]
        [::core::mem::offset_of!(task_struct, pi_waiters) - 2088usize];
    ["Offset of field: task_struct::pi_top_task"]
        [::core::mem::offset_of!(task_struct, pi_top_task) - 2104usize];
    ["Offset of field: task_struct::pi_blocked_on"]
        [::core::mem::offset_of!(task_struct, pi_blocked_on) - 2112usize];
    ["Offset of field: task_struct::journal_info"]
        [::core::mem::offset_of!(task_struct, journal_info) - 2120usize];
    ["Offset of field: task_struct::bio_list"]
        [::core::mem::offset_of!(task_struct, bio_list) - 2128usize];
    ["Offset of field: task_struct::plug"][::core::mem::offset_of!(task_struct, plug) - 2136usize];
    ["Offset of field: task_struct::reclaim_state"]
        [::core::mem::offset_of!(task_struct, reclaim_state) - 2144usize];
    ["Offset of field: task_struct::backing_dev_info"]
        [::core::mem::offset_of!(task_struct, backing_dev_info) - 2152usize];
    ["Offset of field: task_struct::io_context"]
        [::core::mem::offset_of!(task_struct, io_context) - 2160usize];
    ["Offset of field: task_struct::capture_control"]
        [::core::mem::offset_of!(task_struct, capture_control) - 2168usize];
    ["Offset of field: task_struct::ptrace_message"]
        [::core::mem::offset_of!(task_struct, ptrace_message) - 2176usize];
    ["Offset of field: task_struct::last_siginfo"]
        [::core::mem::offset_of!(task_struct, last_siginfo) - 2184usize];
    ["Offset of field: task_struct::ioac"][::core::mem::offset_of!(task_struct, ioac) - 2192usize];
    ["Offset of field: task_struct::acct_rss_mem1"]
        [::core::mem::offset_of!(task_struct, acct_rss_mem1) - 2248usize];
    ["Offset of field: task_struct::acct_vm_mem1"]
        [::core::mem::offset_of!(task_struct, acct_vm_mem1) - 2256usize];
    ["Offset of field: task_struct::acct_timexpd"]
        [::core::mem::offset_of!(task_struct, acct_timexpd) - 2264usize];
    ["Offset of field: task_struct::mems_allowed"]
        [::core::mem::offset_of!(task_struct, mems_allowed) - 2272usize];
    ["Offset of field: task_struct::mems_allowed_seq"]
        [::core::mem::offset_of!(task_struct, mems_allowed_seq) - 2280usize];
    ["Offset of field: task_struct::cpuset_mem_spread_rotor"]
        [::core::mem::offset_of!(task_struct, cpuset_mem_spread_rotor) - 2284usize];
    ["Offset of field: task_struct::cpuset_slab_spread_rotor"]
        [::core::mem::offset_of!(task_struct, cpuset_slab_spread_rotor) - 2288usize];
    ["Offset of field: task_struct::cgroups"]
        [::core::mem::offset_of!(task_struct, cgroups) - 2296usize];
    ["Offset of field: task_struct::cg_list"]
        [::core::mem::offset_of!(task_struct, cg_list) - 2304usize];
    ["Offset of field: task_struct::robust_list"]
        [::core::mem::offset_of!(task_struct, robust_list) - 2320usize];
    ["Offset of field: task_struct::compat_robust_list"]
        [::core::mem::offset_of!(task_struct, compat_robust_list) - 2328usize];
    ["Offset of field: task_struct::pi_state_list"]
        [::core::mem::offset_of!(task_struct, pi_state_list) - 2336usize];
    ["Offset of field: task_struct::pi_state_cache"]
        [::core::mem::offset_of!(task_struct, pi_state_cache) - 2352usize];
    ["Offset of field: task_struct::futex_exit_mutex"]
        [::core::mem::offset_of!(task_struct, futex_exit_mutex) - 2360usize];
    ["Offset of field: task_struct::futex_state"]
        [::core::mem::offset_of!(task_struct, futex_state) - 2392usize];
    ["Offset of field: task_struct::perf_event_ctxp"]
        [::core::mem::offset_of!(task_struct, perf_event_ctxp) - 2400usize];
    ["Offset of field: task_struct::perf_event_mutex"]
        [::core::mem::offset_of!(task_struct, perf_event_mutex) - 2416usize];
    ["Offset of field: task_struct::perf_event_list"]
        [::core::mem::offset_of!(task_struct, perf_event_list) - 2448usize];
    ["Offset of field: task_struct::rseq"][::core::mem::offset_of!(task_struct, rseq) - 2464usize];
    ["Offset of field: task_struct::rseq_sig"]
        [::core::mem::offset_of!(task_struct, rseq_sig) - 2472usize];
    ["Offset of field: task_struct::rseq_event_mask"]
        [::core::mem::offset_of!(task_struct, rseq_event_mask) - 2480usize];
    ["Offset of field: task_struct::tlb_ubc"]
        [::core::mem::offset_of!(task_struct, tlb_ubc) - 2488usize];
    ["Offset of field: task_struct::splice_pipe"]
        [::core::mem::offset_of!(task_struct, splice_pipe) - 2544usize];
    ["Offset of field: task_struct::task_frag"]
        [::core::mem::offset_of!(task_struct, task_frag) - 2552usize];
    ["Offset of field: task_struct::delays"]
        [::core::mem::offset_of!(task_struct, delays) - 2568usize];
    ["Offset of field: task_struct::nr_dirtied"]
        [::core::mem::offset_of!(task_struct, nr_dirtied) - 2576usize];
    ["Offset of field: task_struct::nr_dirtied_pause"]
        [::core::mem::offset_of!(task_struct, nr_dirtied_pause) - 2580usize];
    ["Offset of field: task_struct::dirty_paused_when"]
        [::core::mem::offset_of!(task_struct, dirty_paused_when) - 2584usize];
    ["Offset of field: task_struct::timer_slack_ns"]
        [::core::mem::offset_of!(task_struct, timer_slack_ns) - 2592usize];
    ["Offset of field: task_struct::default_timer_slack_ns"]
        [::core::mem::offset_of!(task_struct, default_timer_slack_ns) - 2600usize];
    ["Offset of field: task_struct::curr_ret_stack"]
        [::core::mem::offset_of!(task_struct, curr_ret_stack) - 2608usize];
    ["Offset of field: task_struct::curr_ret_depth"]
        [::core::mem::offset_of!(task_struct, curr_ret_depth) - 2612usize];
    ["Offset of field: task_struct::ret_stack"]
        [::core::mem::offset_of!(task_struct, ret_stack) - 2616usize];
    ["Offset of field: task_struct::ftrace_timestamp"]
        [::core::mem::offset_of!(task_struct, ftrace_timestamp) - 2624usize];
    ["Offset of field: task_struct::trace_overrun"]
        [::core::mem::offset_of!(task_struct, trace_overrun) - 2632usize];
    ["Offset of field: task_struct::tracing_graph_pause"]
        [::core::mem::offset_of!(task_struct, tracing_graph_pause) - 2636usize];
    ["Offset of field: task_struct::trace_recursion"]
        [::core::mem::offset_of!(task_struct, trace_recursion) - 2640usize];
    ["Offset of field: task_struct::memcg_in_oom"]
        [::core::mem::offset_of!(task_struct, memcg_in_oom) - 2648usize];
    ["Offset of field: task_struct::memcg_oom_gfp_mask"]
        [::core::mem::offset_of!(task_struct, memcg_oom_gfp_mask) - 2656usize];
    ["Offset of field: task_struct::memcg_oom_order"]
        [::core::mem::offset_of!(task_struct, memcg_oom_order) - 2660usize];
    ["Offset of field: task_struct::memcg_nr_pages_over_high"]
        [::core::mem::offset_of!(task_struct, memcg_nr_pages_over_high) - 2664usize];
    ["Offset of field: task_struct::active_memcg"]
        [::core::mem::offset_of!(task_struct, active_memcg) - 2672usize];
    ["Offset of field: task_struct::throttle_queue"]
        [::core::mem::offset_of!(task_struct, throttle_queue) - 2680usize];
    ["Offset of field: task_struct::utask"]
        [::core::mem::offset_of!(task_struct, utask) - 2688usize];
    ["Offset of field: task_struct::kmap_ctrl"]
        [::core::mem::offset_of!(task_struct, kmap_ctrl) - 2696usize];
    ["Offset of field: task_struct::pagefault_disabled"]
        [::core::mem::offset_of!(task_struct, pagefault_disabled) - 2696usize];
    ["Offset of field: task_struct::oom_reaper_list"]
        [::core::mem::offset_of!(task_struct, oom_reaper_list) - 2704usize];
    ["Offset of field: task_struct::oom_reaper_timer"]
        [::core::mem::offset_of!(task_struct, oom_reaper_timer) - 2712usize];
    ["Offset of field: task_struct::stack_vm_area"]
        [::core::mem::offset_of!(task_struct, stack_vm_area) - 2752usize];
    ["Offset of field: task_struct::stack_refcount"]
        [::core::mem::offset_of!(task_struct, stack_refcount) - 2760usize];
    ["Offset of field: task_struct::security"]
        [::core::mem::offset_of!(task_struct, security) - 2768usize];
    ["Offset of field: task_struct::bpf_storage"]
        [::core::mem::offset_of!(task_struct, bpf_storage) - 2776usize];
    ["Offset of field: task_struct::bpf_ctx"]
        [::core::mem::offset_of!(task_struct, bpf_ctx) - 2784usize];
    ["Offset of field: task_struct::mce_vaddr"]
        [::core::mem::offset_of!(task_struct, mce_vaddr) - 2792usize];
    ["Offset of field: task_struct::mce_kflags"]
        [::core::mem::offset_of!(task_struct, mce_kflags) - 2800usize];
    ["Offset of field: task_struct::mce_addr"]
        [::core::mem::offset_of!(task_struct, mce_addr) - 2808usize];
    ["Offset of field: task_struct::mce_kill_me"]
        [::core::mem::offset_of!(task_struct, mce_kill_me) - 2824usize];
    ["Offset of field: task_struct::mce_count"]
        [::core::mem::offset_of!(task_struct, mce_count) - 2840usize];
    ["Offset of field: task_struct::kretprobe_instances"]
        [::core::mem::offset_of!(task_struct, kretprobe_instances) - 2848usize];
    ["Offset of field: task_struct::rethooks"]
        [::core::mem::offset_of!(task_struct, rethooks) - 2856usize];
    ["Offset of field: task_struct::l1d_flush_kill"]
        [::core::mem::offset_of!(task_struct, l1d_flush_kill) - 2864usize];
    ["Offset of field: task_struct::thread"]
        [::core::mem::offset_of!(task_struct, thread) - 2880usize];
};
impl Default for task_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl task_struct {
    #[inline]
    pub fn sched_reset_on_fork(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_reset_on_fork(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_contributes_to_load(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_contributes_to_load(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_migrated(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_migrated(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sched_remote_wakeup(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sched_remote_wakeup(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_execve(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_execve(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_iowait(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_iowait(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restore_sigmask(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restore_sigmask(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_user_fault(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_user_fault(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_cgroup_migration(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_cgroup_migration(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frozen(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frozen(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_memdelay(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_memdelay(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_eventfd(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_eventfd(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reported_split_lock(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reported_split_lock(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_thrashing(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_thrashing(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sched_reset_on_fork: core::ffi::c_uint,
        sched_contributes_to_load: core::ffi::c_uint,
        sched_migrated: core::ffi::c_uint,
        sched_remote_wakeup: core::ffi::c_uint,
        in_execve: core::ffi::c_uint,
        in_iowait: core::ffi::c_uint,
        restore_sigmask: core::ffi::c_uint,
        in_user_fault: core::ffi::c_uint,
        no_cgroup_migration: core::ffi::c_uint,
        frozen: core::ffi::c_uint,
        use_memdelay: core::ffi::c_uint,
        in_eventfd: core::ffi::c_uint,
        reported_split_lock: core::ffi::c_uint,
        in_thrashing: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sched_reset_on_fork: u32 = unsafe { ::core::mem::transmute(sched_reset_on_fork) };
            sched_reset_on_fork as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sched_contributes_to_load: u32 =
                unsafe { ::core::mem::transmute(sched_contributes_to_load) };
            sched_contributes_to_load as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sched_migrated: u32 = unsafe { ::core::mem::transmute(sched_migrated) };
            sched_migrated as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let sched_remote_wakeup: u32 = unsafe { ::core::mem::transmute(sched_remote_wakeup) };
            sched_remote_wakeup as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let in_execve: u32 = unsafe { ::core::mem::transmute(in_execve) };
            in_execve as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let in_iowait: u32 = unsafe { ::core::mem::transmute(in_iowait) };
            in_iowait as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let restore_sigmask: u32 = unsafe { ::core::mem::transmute(restore_sigmask) };
            restore_sigmask as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let in_user_fault: u32 = unsafe { ::core::mem::transmute(in_user_fault) };
            in_user_fault as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let no_cgroup_migration: u32 = unsafe { ::core::mem::transmute(no_cgroup_migration) };
            no_cgroup_migration as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let frozen: u32 = unsafe { ::core::mem::transmute(frozen) };
            frozen as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let use_memdelay: u32 = unsafe { ::core::mem::transmute(use_memdelay) };
            use_memdelay as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let in_eventfd: u32 = unsafe { ::core::mem::transmute(in_eventfd) };
            in_eventfd as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let reported_split_lock: u32 = unsafe { ::core::mem::transmute(reported_split_lock) };
            reported_split_lock as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let in_thrashing: u32 = unsafe { ::core::mem::transmute(in_thrashing) };
            in_thrashing as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn mce_ripv(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_ripv(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mce_whole_page(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_mce_whole_page(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __mce_reserved(&self) -> __u64 {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 62u8) as u64) }
    }
    #[inline]
    pub fn set___mce_reserved(&mut self, val: __u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 62u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        mce_ripv: __u64,
        mce_whole_page: __u64,
        __mce_reserved: __u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mce_ripv: u64 = unsafe { ::core::mem::transmute(mce_ripv) };
            mce_ripv as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mce_whole_page: u64 = unsafe { ::core::mem::transmute(mce_whole_page) };
            mce_whole_page as u64
        });
        __bindgen_bitfield_unit.set(2usize, 62u8, {
            let __mce_reserved: u64 = unsafe { ::core::mem::transmute(__mce_reserved) };
            __mce_reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xarray {
    pub xa_lock: spinlock_t,
    pub xa_flags: gfp_t,
    pub xa_head: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xarray"][::core::mem::size_of::<xarray>() - 16usize];
    ["Alignment of xarray"][::core::mem::align_of::<xarray>() - 8usize];
    ["Offset of field: xarray::xa_lock"][::core::mem::offset_of!(xarray, xa_lock) - 0usize];
    ["Offset of field: xarray::xa_flags"][::core::mem::offset_of!(xarray, xa_flags) - 4usize];
    ["Offset of field: xarray::xa_head"][::core::mem::offset_of!(xarray, xa_head) - 8usize];
};
impl Default for xarray {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_operations_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poll_table_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_context {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_open_node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_iattrs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_dir {
    pub subdirs: core::ffi::c_ulong,
    pub children: rb_root,
    pub root: *mut kernfs_root,
    pub rev: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_dir"][::core::mem::size_of::<kernfs_elem_dir>() - 32usize];
    ["Alignment of kernfs_elem_dir"][::core::mem::align_of::<kernfs_elem_dir>() - 8usize];
    ["Offset of field: kernfs_elem_dir::subdirs"]
        [::core::mem::offset_of!(kernfs_elem_dir, subdirs) - 0usize];
    ["Offset of field: kernfs_elem_dir::children"]
        [::core::mem::offset_of!(kernfs_elem_dir, children) - 8usize];
    ["Offset of field: kernfs_elem_dir::root"]
        [::core::mem::offset_of!(kernfs_elem_dir, root) - 16usize];
    ["Offset of field: kernfs_elem_dir::rev"]
        [::core::mem::offset_of!(kernfs_elem_dir, rev) - 24usize];
};
impl Default for kernfs_elem_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_symlink {
    pub target_kn: *mut kernfs_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_symlink"][::core::mem::size_of::<kernfs_elem_symlink>() - 8usize];
    ["Alignment of kernfs_elem_symlink"][::core::mem::align_of::<kernfs_elem_symlink>() - 8usize];
    ["Offset of field: kernfs_elem_symlink::target_kn"]
        [::core::mem::offset_of!(kernfs_elem_symlink, target_kn) - 0usize];
};
impl Default for kernfs_elem_symlink {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernfs_elem_attr {
    pub ops: *const kernfs_ops,
    pub open: *mut kernfs_open_node,
    pub size: loff_t,
    pub notify_next: *mut kernfs_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_elem_attr"][::core::mem::size_of::<kernfs_elem_attr>() - 32usize];
    ["Alignment of kernfs_elem_attr"][::core::mem::align_of::<kernfs_elem_attr>() - 8usize];
    ["Offset of field: kernfs_elem_attr::ops"]
        [::core::mem::offset_of!(kernfs_elem_attr, ops) - 0usize];
    ["Offset of field: kernfs_elem_attr::open"]
        [::core::mem::offset_of!(kernfs_elem_attr, open) - 8usize];
    ["Offset of field: kernfs_elem_attr::size"]
        [::core::mem::offset_of!(kernfs_elem_attr, size) - 16usize];
    ["Offset of field: kernfs_elem_attr::notify_next"]
        [::core::mem::offset_of!(kernfs_elem_attr, notify_next) - 24usize];
};
impl Default for kernfs_elem_attr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_node {
    pub count: atomic_t,
    pub active: atomic_t,
    pub parent: *mut kernfs_node,
    pub name: *const core::ffi::c_char,
    pub rb: rb_node,
    pub ns: *const core::ffi::c_void,
    pub hash: core::ffi::c_uint,
    pub __bindgen_anon_1: kernfs_node__bindgen_ty_1,
    pub priv_: *mut core::ffi::c_void,
    pub id: u64_,
    pub flags: core::ffi::c_ushort,
    pub mode: umode_t,
    pub iattr: *mut kernfs_iattrs,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernfs_node__bindgen_ty_1 {
    pub dir: kernfs_elem_dir,
    pub symlink: kernfs_elem_symlink,
    pub attr: kernfs_elem_attr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_node__bindgen_ty_1"]
        [::core::mem::size_of::<kernfs_node__bindgen_ty_1>() - 32usize];
    ["Alignment of kernfs_node__bindgen_ty_1"]
        [::core::mem::align_of::<kernfs_node__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::dir"]
        [::core::mem::offset_of!(kernfs_node__bindgen_ty_1, dir) - 0usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::symlink"]
        [::core::mem::offset_of!(kernfs_node__bindgen_ty_1, symlink) - 0usize];
    ["Offset of field: kernfs_node__bindgen_ty_1::attr"]
        [::core::mem::offset_of!(kernfs_node__bindgen_ty_1, attr) - 0usize];
};
impl Default for kernfs_node__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_node"][::core::mem::size_of::<kernfs_node>() - 128usize];
    ["Alignment of kernfs_node"][::core::mem::align_of::<kernfs_node>() - 8usize];
    ["Offset of field: kernfs_node::count"][::core::mem::offset_of!(kernfs_node, count) - 0usize];
    ["Offset of field: kernfs_node::active"][::core::mem::offset_of!(kernfs_node, active) - 4usize];
    ["Offset of field: kernfs_node::parent"][::core::mem::offset_of!(kernfs_node, parent) - 8usize];
    ["Offset of field: kernfs_node::name"][::core::mem::offset_of!(kernfs_node, name) - 16usize];
    ["Offset of field: kernfs_node::rb"][::core::mem::offset_of!(kernfs_node, rb) - 24usize];
    ["Offset of field: kernfs_node::ns"][::core::mem::offset_of!(kernfs_node, ns) - 48usize];
    ["Offset of field: kernfs_node::hash"][::core::mem::offset_of!(kernfs_node, hash) - 56usize];
    ["Offset of field: kernfs_node::priv_"][::core::mem::offset_of!(kernfs_node, priv_) - 96usize];
    ["Offset of field: kernfs_node::id"][::core::mem::offset_of!(kernfs_node, id) - 104usize];
    ["Offset of field: kernfs_node::flags"][::core::mem::offset_of!(kernfs_node, flags) - 112usize];
    ["Offset of field: kernfs_node::mode"][::core::mem::offset_of!(kernfs_node, mode) - 114usize];
    ["Offset of field: kernfs_node::iattr"][::core::mem::offset_of!(kernfs_node, iattr) - 120usize];
};
impl Default for kernfs_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernfs_open_file {
    pub kn: *mut kernfs_node,
    pub file: *mut file,
    pub seq_file: *mut seq_file,
    pub priv_: *mut core::ffi::c_void,
    pub mutex: mutex,
    pub prealloc_mutex: mutex,
    pub event: core::ffi::c_int,
    pub list: list_head,
    pub prealloc_buf: *mut core::ffi::c_char,
    pub atomic_write_len: usize,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub vm_ops: *const vm_operations_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_open_file"][::core::mem::size_of::<kernfs_open_file>() - 152usize];
    ["Alignment of kernfs_open_file"][::core::mem::align_of::<kernfs_open_file>() - 8usize];
    ["Offset of field: kernfs_open_file::kn"]
        [::core::mem::offset_of!(kernfs_open_file, kn) - 0usize];
    ["Offset of field: kernfs_open_file::file"]
        [::core::mem::offset_of!(kernfs_open_file, file) - 8usize];
    ["Offset of field: kernfs_open_file::seq_file"]
        [::core::mem::offset_of!(kernfs_open_file, seq_file) - 16usize];
    ["Offset of field: kernfs_open_file::priv_"]
        [::core::mem::offset_of!(kernfs_open_file, priv_) - 24usize];
    ["Offset of field: kernfs_open_file::mutex"]
        [::core::mem::offset_of!(kernfs_open_file, mutex) - 32usize];
    ["Offset of field: kernfs_open_file::prealloc_mutex"]
        [::core::mem::offset_of!(kernfs_open_file, prealloc_mutex) - 64usize];
    ["Offset of field: kernfs_open_file::event"]
        [::core::mem::offset_of!(kernfs_open_file, event) - 96usize];
    ["Offset of field: kernfs_open_file::list"]
        [::core::mem::offset_of!(kernfs_open_file, list) - 104usize];
    ["Offset of field: kernfs_open_file::prealloc_buf"]
        [::core::mem::offset_of!(kernfs_open_file, prealloc_buf) - 120usize];
    ["Offset of field: kernfs_open_file::atomic_write_len"]
        [::core::mem::offset_of!(kernfs_open_file, atomic_write_len) - 128usize];
    ["Offset of field: kernfs_open_file::vm_ops"]
        [::core::mem::offset_of!(kernfs_open_file, vm_ops) - 144usize];
};
impl Default for kernfs_open_file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kernfs_open_file {
    #[inline]
    pub fn mmapped(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mmapped(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn released(&self) -> bool_ {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_released(&mut self, val: bool_) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(mmapped: bool_, released: bool_) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mmapped: u8 = unsafe { ::core::mem::transmute(mmapped) };
            mmapped as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let released: u8 = unsafe { ::core::mem::transmute(released) };
            released as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernfs_ops {
    pub open:
        ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file) -> core::ffi::c_int>,
    pub release: ::core::option::Option<unsafe extern "C" fn(of: *mut kernfs_open_file)>,
    pub seq_show: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void) -> core::ffi::c_int,
    >,
    pub seq_start: ::core::option::Option<
        unsafe extern "C" fn(sf: *mut seq_file, ppos: *mut loff_t) -> *mut core::ffi::c_void,
    >,
    pub seq_next: ::core::option::Option<
        unsafe extern "C" fn(
            sf: *mut seq_file,
            v: *mut core::ffi::c_void,
            ppos: *mut loff_t,
        ) -> *mut core::ffi::c_void,
    >,
    pub seq_stop:
        ::core::option::Option<unsafe extern "C" fn(sf: *mut seq_file, v: *mut core::ffi::c_void)>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub atomic_write_len: usize,
    pub prealloc: bool_,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            buf: *mut core::ffi::c_char,
            bytes: usize,
            off: loff_t,
        ) -> isize,
    >,
    pub poll: ::core::option::Option<
        unsafe extern "C" fn(of: *mut kernfs_open_file, pt: *mut poll_table_struct) -> __poll_t,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            of: *mut kernfs_open_file,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernfs_ops"][::core::mem::size_of::<kernfs_ops>() - 96usize];
    ["Alignment of kernfs_ops"][::core::mem::align_of::<kernfs_ops>() - 8usize];
    ["Offset of field: kernfs_ops::open"][::core::mem::offset_of!(kernfs_ops, open) - 0usize];
    ["Offset of field: kernfs_ops::release"][::core::mem::offset_of!(kernfs_ops, release) - 8usize];
    ["Offset of field: kernfs_ops::seq_show"]
        [::core::mem::offset_of!(kernfs_ops, seq_show) - 16usize];
    ["Offset of field: kernfs_ops::seq_start"]
        [::core::mem::offset_of!(kernfs_ops, seq_start) - 24usize];
    ["Offset of field: kernfs_ops::seq_next"]
        [::core::mem::offset_of!(kernfs_ops, seq_next) - 32usize];
    ["Offset of field: kernfs_ops::seq_stop"]
        [::core::mem::offset_of!(kernfs_ops, seq_stop) - 40usize];
    ["Offset of field: kernfs_ops::read"][::core::mem::offset_of!(kernfs_ops, read) - 48usize];
    ["Offset of field: kernfs_ops::atomic_write_len"]
        [::core::mem::offset_of!(kernfs_ops, atomic_write_len) - 56usize];
    ["Offset of field: kernfs_ops::prealloc"]
        [::core::mem::offset_of!(kernfs_ops, prealloc) - 64usize];
    ["Offset of field: kernfs_ops::write"][::core::mem::offset_of!(kernfs_ops, write) - 72usize];
    ["Offset of field: kernfs_ops::poll"][::core::mem::offset_of!(kernfs_ops, poll) - 80usize];
    ["Offset of field: kernfs_ops::mmap"][::core::mem::offset_of!(kernfs_ops, mmap) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock {
    _unused: [u8; 0],
}
pub const kobj_ns_type_KOBJ_NS_TYPE_NONE: kobj_ns_type = 0;
pub const kobj_ns_type_KOBJ_NS_TYPE_NET: kobj_ns_type = 1;
pub const kobj_ns_type_KOBJ_NS_TYPES: kobj_ns_type = 2;
pub type kobj_ns_type = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_ns_type_operations {
    pub type_: kobj_ns_type,
    pub current_may_mount: ::core::option::Option<unsafe extern "C" fn() -> bool_>,
    pub grab_current_ns: ::core::option::Option<unsafe extern "C" fn() -> *mut core::ffi::c_void>,
    pub netlink_ns:
        ::core::option::Option<unsafe extern "C" fn(sk: *mut sock) -> *const core::ffi::c_void>,
    pub initial_ns: ::core::option::Option<unsafe extern "C" fn() -> *const core::ffi::c_void>,
    pub drop_ns: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_ns_type_operations"]
        [::core::mem::size_of::<kobj_ns_type_operations>() - 48usize];
    ["Alignment of kobj_ns_type_operations"]
        [::core::mem::align_of::<kobj_ns_type_operations>() - 8usize];
    ["Offset of field: kobj_ns_type_operations::type_"]
        [::core::mem::offset_of!(kobj_ns_type_operations, type_) - 0usize];
    ["Offset of field: kobj_ns_type_operations::current_may_mount"]
        [::core::mem::offset_of!(kobj_ns_type_operations, current_may_mount) - 8usize];
    ["Offset of field: kobj_ns_type_operations::grab_current_ns"]
        [::core::mem::offset_of!(kobj_ns_type_operations, grab_current_ns) - 16usize];
    ["Offset of field: kobj_ns_type_operations::netlink_ns"]
        [::core::mem::offset_of!(kobj_ns_type_operations, netlink_ns) - 24usize];
    ["Offset of field: kobj_ns_type_operations::initial_ns"]
        [::core::mem::offset_of!(kobj_ns_type_operations, initial_ns) - 32usize];
    ["Offset of field: kobj_ns_type_operations::drop_ns"]
        [::core::mem::offset_of!(kobj_ns_type_operations, drop_ns) - 40usize];
};
impl Default for kobj_ns_type_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kstat {
    pub result_mask: u32_,
    pub mode: umode_t,
    pub nlink: core::ffi::c_uint,
    pub blksize: u32,
    pub attributes: u64_,
    pub attributes_mask: u64_,
    pub ino: u64_,
    pub dev: dev_t,
    pub rdev: dev_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub size: loff_t,
    pub atime: timespec64,
    pub mtime: timespec64,
    pub ctime: timespec64,
    pub btime: timespec64,
    pub blocks: u64_,
    pub mnt_id: u64_,
    pub dio_mem_align: u32_,
    pub dio_offset_align: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kstat"][::core::mem::size_of::<kstat>() - 152usize];
    ["Alignment of kstat"][::core::mem::align_of::<kstat>() - 8usize];
    ["Offset of field: kstat::result_mask"][::core::mem::offset_of!(kstat, result_mask) - 0usize];
    ["Offset of field: kstat::mode"][::core::mem::offset_of!(kstat, mode) - 4usize];
    ["Offset of field: kstat::nlink"][::core::mem::offset_of!(kstat, nlink) - 8usize];
    ["Offset of field: kstat::blksize"][::core::mem::offset_of!(kstat, blksize) - 12usize];
    ["Offset of field: kstat::attributes"][::core::mem::offset_of!(kstat, attributes) - 16usize];
    ["Offset of field: kstat::attributes_mask"]
        [::core::mem::offset_of!(kstat, attributes_mask) - 24usize];
    ["Offset of field: kstat::ino"][::core::mem::offset_of!(kstat, ino) - 32usize];
    ["Offset of field: kstat::dev"][::core::mem::offset_of!(kstat, dev) - 40usize];
    ["Offset of field: kstat::rdev"][::core::mem::offset_of!(kstat, rdev) - 44usize];
    ["Offset of field: kstat::uid"][::core::mem::offset_of!(kstat, uid) - 48usize];
    ["Offset of field: kstat::gid"][::core::mem::offset_of!(kstat, gid) - 52usize];
    ["Offset of field: kstat::size"][::core::mem::offset_of!(kstat, size) - 56usize];
    ["Offset of field: kstat::atime"][::core::mem::offset_of!(kstat, atime) - 64usize];
    ["Offset of field: kstat::mtime"][::core::mem::offset_of!(kstat, mtime) - 80usize];
    ["Offset of field: kstat::ctime"][::core::mem::offset_of!(kstat, ctime) - 96usize];
    ["Offset of field: kstat::btime"][::core::mem::offset_of!(kstat, btime) - 112usize];
    ["Offset of field: kstat::blocks"][::core::mem::offset_of!(kstat, blocks) - 128usize];
    ["Offset of field: kstat::mnt_id"][::core::mem::offset_of!(kstat, mnt_id) - 136usize];
    ["Offset of field: kstat::dio_mem_align"]
        [::core::mem::offset_of!(kstat, dio_mem_align) - 144usize];
    ["Offset of field: kstat::dio_offset_align"]
        [::core::mem::offset_of!(kstat, dio_offset_align) - 148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute {
    pub name: *const core::ffi::c_char,
    pub mode: umode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of attribute"][::core::mem::size_of::<attribute>() - 16usize];
    ["Alignment of attribute"][::core::mem::align_of::<attribute>() - 8usize];
    ["Offset of field: attribute::name"][::core::mem::offset_of!(attribute, name) - 0usize];
    ["Offset of field: attribute::mode"][::core::mem::offset_of!(attribute, mode) - 8usize];
};
impl Default for attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct attribute_group - data structure used to declare an attribute group.\n @name:\tOptional: Attribute group name\n\t\tIf specified, the attribute group will be created in\n\t\ta new subdirectory with this name.\n @is_visible:\tOptional: Function to return permissions associated with an\n\t\tattribute of the group. Will be called repeatedly for each\n\t\tnon-binary attribute in the group. Only read/write\n\t\tpermissions as well as SYSFS_PREALLOC are accepted. Must\n\t\treturn 0 if an attribute is not visible. The returned value\n\t\twill replace static permissions defined in struct attribute.\n @is_bin_visible:\n\t\tOptional: Function to return permissions associated with a\n\t\tbinary attribute of the group. Will be called repeatedly\n\t\tfor each binary attribute in the group. Only read/write\n\t\tpermissions as well as SYSFS_PREALLOC are accepted. Must\n\t\treturn 0 if a binary attribute is not visible. The returned\n\t\tvalue will replace static permissions defined in\n\t\tstruct bin_attribute.\n @attrs:\tPointer to NULL terminated list of attributes.\n @bin_attrs:\tPointer to NULL terminated list of binary attributes.\n\t\tEither attrs or bin_attrs or both must be provided."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribute_group {
    pub name: *const core::ffi::c_char,
    pub is_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub is_bin_visible: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut bin_attribute,
            arg3: core::ffi::c_int,
        ) -> umode_t,
    >,
    pub attrs: *mut *mut attribute,
    pub bin_attrs: *mut *mut bin_attribute,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of attribute_group"][::core::mem::size_of::<attribute_group>() - 40usize];
    ["Alignment of attribute_group"][::core::mem::align_of::<attribute_group>() - 8usize];
    ["Offset of field: attribute_group::name"]
        [::core::mem::offset_of!(attribute_group, name) - 0usize];
    ["Offset of field: attribute_group::is_visible"]
        [::core::mem::offset_of!(attribute_group, is_visible) - 8usize];
    ["Offset of field: attribute_group::is_bin_visible"]
        [::core::mem::offset_of!(attribute_group, is_bin_visible) - 16usize];
    ["Offset of field: attribute_group::attrs"]
        [::core::mem::offset_of!(attribute_group, attrs) - 24usize];
    ["Offset of field: attribute_group::bin_attrs"]
        [::core::mem::offset_of!(attribute_group, bin_attrs) - 32usize];
};
impl Default for attribute_group {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bin_attribute {
    pub attr: attribute,
    pub size: usize,
    pub private: *mut core::ffi::c_void,
    pub f_mapping: ::core::option::Option<unsafe extern "C" fn() -> *mut address_space>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            arg3: *mut bin_attribute,
            arg4: *mut core::ffi::c_char,
            arg5: loff_t,
            arg6: usize,
        ) -> isize,
    >,
    pub mmap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            arg2: *mut kobject,
            attr: *mut bin_attribute,
            vma: *mut vm_area_struct,
        ) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bin_attribute"][::core::mem::size_of::<bin_attribute>() - 64usize];
    ["Alignment of bin_attribute"][::core::mem::align_of::<bin_attribute>() - 8usize];
    ["Offset of field: bin_attribute::attr"][::core::mem::offset_of!(bin_attribute, attr) - 0usize];
    ["Offset of field: bin_attribute::size"]
        [::core::mem::offset_of!(bin_attribute, size) - 16usize];
    ["Offset of field: bin_attribute::private"]
        [::core::mem::offset_of!(bin_attribute, private) - 24usize];
    ["Offset of field: bin_attribute::f_mapping"]
        [::core::mem::offset_of!(bin_attribute, f_mapping) - 32usize];
    ["Offset of field: bin_attribute::read"]
        [::core::mem::offset_of!(bin_attribute, read) - 40usize];
    ["Offset of field: bin_attribute::write"]
        [::core::mem::offset_of!(bin_attribute, write) - 48usize];
    ["Offset of field: bin_attribute::mmap"]
        [::core::mem::offset_of!(bin_attribute, mmap) - 56usize];
};
impl Default for bin_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sysfs_ops {
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut kobject,
            arg2: *mut attribute,
            arg3: *const core::ffi::c_char,
            arg4: usize,
        ) -> isize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sysfs_ops"][::core::mem::size_of::<sysfs_ops>() - 16usize];
    ["Alignment of sysfs_ops"][::core::mem::align_of::<sysfs_ops>() - 8usize];
    ["Offset of field: sysfs_ops::show"][::core::mem::offset_of!(sysfs_ops, show) - 0usize];
    ["Offset of field: sysfs_ops::store"][::core::mem::offset_of!(sysfs_ops, store) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobject {
    pub name: *const core::ffi::c_char,
    pub entry: list_head,
    pub parent: *mut kobject,
    pub kset: *mut kset,
    pub ktype: *const kobj_type,
    pub sd: *mut kernfs_node,
    pub kref: kref,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobject"][::core::mem::size_of::<kobject>() - 64usize];
    ["Alignment of kobject"][::core::mem::align_of::<kobject>() - 8usize];
    ["Offset of field: kobject::name"][::core::mem::offset_of!(kobject, name) - 0usize];
    ["Offset of field: kobject::entry"][::core::mem::offset_of!(kobject, entry) - 8usize];
    ["Offset of field: kobject::parent"][::core::mem::offset_of!(kobject, parent) - 24usize];
    ["Offset of field: kobject::kset"][::core::mem::offset_of!(kobject, kset) - 32usize];
    ["Offset of field: kobject::ktype"][::core::mem::offset_of!(kobject, ktype) - 40usize];
    ["Offset of field: kobject::sd"][::core::mem::offset_of!(kobject, sd) - 48usize];
    ["Offset of field: kobject::kref"][::core::mem::offset_of!(kobject, kref) - 56usize];
};
impl Default for kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl kobject {
    #[inline]
    pub fn state_initialized(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_initialized(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_in_sysfs(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_in_sysfs(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_add_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_add_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn state_remove_uevent_sent(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_state_remove_uevent_sent(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uevent_suppress(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uevent_suppress(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state_initialized: core::ffi::c_uint,
        state_in_sysfs: core::ffi::c_uint,
        state_add_uevent_sent: core::ffi::c_uint,
        state_remove_uevent_sent: core::ffi::c_uint,
        uevent_suppress: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let state_initialized: u32 = unsafe { ::core::mem::transmute(state_initialized) };
            state_initialized as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let state_in_sysfs: u32 = unsafe { ::core::mem::transmute(state_in_sysfs) };
            state_in_sysfs as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let state_add_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_add_uevent_sent) };
            state_add_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let state_remove_uevent_sent: u32 =
                unsafe { ::core::mem::transmute(state_remove_uevent_sent) };
            state_remove_uevent_sent as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uevent_suppress: u32 = unsafe { ::core::mem::transmute(uevent_suppress) };
            uevent_suppress as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_type {
    pub release: ::core::option::Option<unsafe extern "C" fn(kobj: *mut kobject)>,
    pub sysfs_ops: *const sysfs_ops,
    pub default_groups: *mut *const attribute_group,
    pub child_ns_type: ::core::option::Option<
        unsafe extern "C" fn(kobj: *mut kobject) -> *const kobj_ns_type_operations,
    >,
    pub namespace: ::core::option::Option<
        unsafe extern "C" fn(kobj: *mut kobject) -> *const core::ffi::c_void,
    >,
    pub get_ownership: ::core::option::Option<
        unsafe extern "C" fn(kobj: *mut kobject, uid: *mut kuid_t, gid: *mut kgid_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_type"][::core::mem::size_of::<kobj_type>() - 48usize];
    ["Alignment of kobj_type"][::core::mem::align_of::<kobj_type>() - 8usize];
    ["Offset of field: kobj_type::release"][::core::mem::offset_of!(kobj_type, release) - 0usize];
    ["Offset of field: kobj_type::sysfs_ops"]
        [::core::mem::offset_of!(kobj_type, sysfs_ops) - 8usize];
    ["Offset of field: kobj_type::default_groups"]
        [::core::mem::offset_of!(kobj_type, default_groups) - 16usize];
    ["Offset of field: kobj_type::child_ns_type"]
        [::core::mem::offset_of!(kobj_type, child_ns_type) - 24usize];
    ["Offset of field: kobj_type::namespace"]
        [::core::mem::offset_of!(kobj_type, namespace) - 32usize];
    ["Offset of field: kobj_type::get_ownership"]
        [::core::mem::offset_of!(kobj_type, get_ownership) - 40usize];
};
impl Default for kobj_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kobj_uevent_env {
    pub argv: [*mut core::ffi::c_char; 3usize],
    pub envp: [*mut core::ffi::c_char; 64usize],
    pub envp_idx: core::ffi::c_int,
    pub buf: [core::ffi::c_char; 2048usize],
    pub buflen: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kobj_uevent_env"][::core::mem::size_of::<kobj_uevent_env>() - 2592usize];
    ["Alignment of kobj_uevent_env"][::core::mem::align_of::<kobj_uevent_env>() - 8usize];
    ["Offset of field: kobj_uevent_env::argv"]
        [::core::mem::offset_of!(kobj_uevent_env, argv) - 0usize];
    ["Offset of field: kobj_uevent_env::envp"]
        [::core::mem::offset_of!(kobj_uevent_env, envp) - 24usize];
    ["Offset of field: kobj_uevent_env::envp_idx"]
        [::core::mem::offset_of!(kobj_uevent_env, envp_idx) - 536usize];
    ["Offset of field: kobj_uevent_env::buf"]
        [::core::mem::offset_of!(kobj_uevent_env, buf) - 540usize];
    ["Offset of field: kobj_uevent_env::buflen"]
        [::core::mem::offset_of!(kobj_uevent_env, buflen) - 2588usize];
};
impl Default for kobj_uevent_env {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kset_uevent_ops {
    pub filter:
        ::core::option::Option<unsafe extern "C" fn(kobj: *mut kobject) -> core::ffi::c_int>,
    pub name: ::core::option::Option<
        unsafe extern "C" fn(kobj: *mut kobject) -> *const core::ffi::c_char,
    >,
    pub uevent: ::core::option::Option<
        unsafe extern "C" fn(kobj: *mut kobject, env: *mut kobj_uevent_env) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kset_uevent_ops"][::core::mem::size_of::<kset_uevent_ops>() - 24usize];
    ["Alignment of kset_uevent_ops"][::core::mem::align_of::<kset_uevent_ops>() - 8usize];
    ["Offset of field: kset_uevent_ops::filter"]
        [::core::mem::offset_of!(kset_uevent_ops, filter) - 0usize];
    ["Offset of field: kset_uevent_ops::name"]
        [::core::mem::offset_of!(kset_uevent_ops, name) - 8usize];
    ["Offset of field: kset_uevent_ops::uevent"]
        [::core::mem::offset_of!(kset_uevent_ops, uevent) - 16usize];
};
#[doc = " struct kset - a set of kobjects of a specific type, belonging to a specific subsystem.\n\n A kset defines a group of kobjects.  They can be individually\n different \"types\" but overall these kobjects all want to be grouped\n together and operated on in the same manner.  ksets are used to\n define the attribute callbacks and other common events that happen to\n a kobject.\n\n @list: the list of all kobjects for this kset\n @list_lock: a lock for iterating over the kobjects\n @kobj: the embedded kobject for this kset (recursion, isn't it fun...)\n @uevent_ops: the set of uevent operations for this kset.  These are\n called whenever a kobject has something happen to it so that the kset\n can add new environment variables, or filter out the uevents if so\n desired."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kset {
    pub list: list_head,
    pub list_lock: spinlock_t,
    pub kobj: kobject,
    pub uevent_ops: *const kset_uevent_ops,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kset"][::core::mem::size_of::<kset>() - 96usize];
    ["Alignment of kset"][::core::mem::align_of::<kset>() - 8usize];
    ["Offset of field: kset::list"][::core::mem::offset_of!(kset, list) - 0usize];
    ["Offset of field: kset::list_lock"][::core::mem::offset_of!(kset, list_lock) - 16usize];
    ["Offset of field: kset::kobj"][::core::mem::offset_of!(kset, kobj) - 24usize];
    ["Offset of field: kset::uevent_ops"][::core::mem::offset_of!(kset, uevent_ops) - 88usize];
};
impl Default for kset {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type proc_handler = ::core::option::Option<
    unsafe extern "C" fn(
        ctl: *mut ctl_table,
        write: core::ffi::c_int,
        buffer: *mut core::ffi::c_void,
        lenp: *mut usize,
        ppos: *mut loff_t,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_poll {
    pub event: atomic_t,
    pub wait: wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_poll"][::core::mem::size_of::<ctl_table_poll>() - 32usize];
    ["Alignment of ctl_table_poll"][::core::mem::align_of::<ctl_table_poll>() - 8usize];
    ["Offset of field: ctl_table_poll::event"]
        [::core::mem::offset_of!(ctl_table_poll, event) - 0usize];
    ["Offset of field: ctl_table_poll::wait"]
        [::core::mem::offset_of!(ctl_table_poll, wait) - 8usize];
};
impl Default for ctl_table_poll {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_table {
    pub procname: *const core::ffi::c_char,
    pub data: *mut core::ffi::c_void,
    pub maxlen: core::ffi::c_int,
    pub mode: umode_t,
    pub child: *mut ctl_table,
    pub proc_handler: proc_handler,
    pub poll: *mut ctl_table_poll,
    pub extra1: *mut core::ffi::c_void,
    pub extra2: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table"][::core::mem::size_of::<ctl_table>() - 64usize];
    ["Alignment of ctl_table"][::core::mem::align_of::<ctl_table>() - 8usize];
    ["Offset of field: ctl_table::procname"][::core::mem::offset_of!(ctl_table, procname) - 0usize];
    ["Offset of field: ctl_table::data"][::core::mem::offset_of!(ctl_table, data) - 8usize];
    ["Offset of field: ctl_table::maxlen"][::core::mem::offset_of!(ctl_table, maxlen) - 16usize];
    ["Offset of field: ctl_table::mode"][::core::mem::offset_of!(ctl_table, mode) - 20usize];
    ["Offset of field: ctl_table::child"][::core::mem::offset_of!(ctl_table, child) - 24usize];
    ["Offset of field: ctl_table::proc_handler"]
        [::core::mem::offset_of!(ctl_table, proc_handler) - 32usize];
    ["Offset of field: ctl_table::poll"][::core::mem::offset_of!(ctl_table, poll) - 40usize];
    ["Offset of field: ctl_table::extra1"][::core::mem::offset_of!(ctl_table, extra1) - 48usize];
    ["Offset of field: ctl_table::extra2"][::core::mem::offset_of!(ctl_table, extra2) - 56usize];
};
impl Default for ctl_table {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_node {
    pub node: rb_node,
    pub header: *mut ctl_table_header,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_node"][::core::mem::size_of::<ctl_node>() - 32usize];
    ["Alignment of ctl_node"][::core::mem::align_of::<ctl_node>() - 8usize];
    ["Offset of field: ctl_node::node"][::core::mem::offset_of!(ctl_node, node) - 0usize];
    ["Offset of field: ctl_node::header"][::core::mem::offset_of!(ctl_node, header) - 24usize];
};
impl Default for ctl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_header {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1,
    pub unregistering: *mut completion,
    pub ctl_table_arg: *mut ctl_table,
    pub root: *mut ctl_table_root,
    pub set: *mut ctl_table_set,
    pub parent: *mut ctl_dir,
    pub node: *mut ctl_node,
    pub inodes: hlist_head,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ctl_table_header__bindgen_ty_1 {
    pub __bindgen_anon_1: ctl_table_header__bindgen_ty_1__bindgen_ty_1,
    pub rcu: callback_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    pub ctl_table: *mut ctl_table,
    pub used: core::ffi::c_int,
    pub count: core::ffi::c_int,
    pub nreg: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<ctl_table_header__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of ctl_table_header__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<ctl_table_header__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::ctl_table"]
        [::core::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, ctl_table) - 0usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::used"]
        [::core::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, used) - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::count"]
        [::core::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, count) - 12usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1__bindgen_ty_1::nreg"]
        [::core::mem::offset_of!(ctl_table_header__bindgen_ty_1__bindgen_ty_1, nreg) - 16usize];
};
impl Default for ctl_table_header__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header__bindgen_ty_1"]
        [::core::mem::size_of::<ctl_table_header__bindgen_ty_1>() - 24usize];
    ["Alignment of ctl_table_header__bindgen_ty_1"]
        [::core::mem::align_of::<ctl_table_header__bindgen_ty_1>() - 8usize];
    ["Offset of field: ctl_table_header__bindgen_ty_1::rcu"]
        [::core::mem::offset_of!(ctl_table_header__bindgen_ty_1, rcu) - 0usize];
};
impl Default for ctl_table_header__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_header"][::core::mem::size_of::<ctl_table_header>() - 80usize];
    ["Alignment of ctl_table_header"][::core::mem::align_of::<ctl_table_header>() - 8usize];
    ["Offset of field: ctl_table_header::unregistering"]
        [::core::mem::offset_of!(ctl_table_header, unregistering) - 24usize];
    ["Offset of field: ctl_table_header::ctl_table_arg"]
        [::core::mem::offset_of!(ctl_table_header, ctl_table_arg) - 32usize];
    ["Offset of field: ctl_table_header::root"]
        [::core::mem::offset_of!(ctl_table_header, root) - 40usize];
    ["Offset of field: ctl_table_header::set"]
        [::core::mem::offset_of!(ctl_table_header, set) - 48usize];
    ["Offset of field: ctl_table_header::parent"]
        [::core::mem::offset_of!(ctl_table_header, parent) - 56usize];
    ["Offset of field: ctl_table_header::node"]
        [::core::mem::offset_of!(ctl_table_header, node) - 64usize];
    ["Offset of field: ctl_table_header::inodes"]
        [::core::mem::offset_of!(ctl_table_header, inodes) - 72usize];
};
impl Default for ctl_table_header {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_dir {
    pub header: ctl_table_header,
    pub root: rb_root,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_dir"][::core::mem::size_of::<ctl_dir>() - 88usize];
    ["Alignment of ctl_dir"][::core::mem::align_of::<ctl_dir>() - 8usize];
    ["Offset of field: ctl_dir::header"][::core::mem::offset_of!(ctl_dir, header) - 0usize];
    ["Offset of field: ctl_dir::root"][::core::mem::offset_of!(ctl_dir, root) - 80usize];
};
impl Default for ctl_dir {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_set {
    pub is_seen:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ctl_table_set) -> core::ffi::c_int>,
    pub dir: ctl_dir,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_set"][::core::mem::size_of::<ctl_table_set>() - 96usize];
    ["Alignment of ctl_table_set"][::core::mem::align_of::<ctl_table_set>() - 8usize];
    ["Offset of field: ctl_table_set::is_seen"]
        [::core::mem::offset_of!(ctl_table_set, is_seen) - 0usize];
    ["Offset of field: ctl_table_set::dir"][::core::mem::offset_of!(ctl_table_set, dir) - 8usize];
};
impl Default for ctl_table_set {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ctl_table_root {
    pub default_set: ctl_table_set,
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(root: *mut ctl_table_root) -> *mut ctl_table_set,
    >,
    pub set_ownership: ::core::option::Option<
        unsafe extern "C" fn(
            head: *mut ctl_table_header,
            table: *mut ctl_table,
            uid: *mut kuid_t,
            gid: *mut kgid_t,
        ),
    >,
    pub permissions: ::core::option::Option<
        unsafe extern "C" fn(
            head: *mut ctl_table_header,
            table: *mut ctl_table,
        ) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctl_table_root"][::core::mem::size_of::<ctl_table_root>() - 120usize];
    ["Alignment of ctl_table_root"][::core::mem::align_of::<ctl_table_root>() - 8usize];
    ["Offset of field: ctl_table_root::default_set"]
        [::core::mem::offset_of!(ctl_table_root, default_set) - 0usize];
    ["Offset of field: ctl_table_root::lookup"]
        [::core::mem::offset_of!(ctl_table_root, lookup) - 96usize];
    ["Offset of field: ctl_table_root::set_ownership"]
        [::core::mem::offset_of!(ctl_table_root, set_ownership) - 104usize];
    ["Offset of field: ctl_table_root::permissions"]
        [::core::mem::offset_of!(ctl_table_root, permissions) - 112usize];
};
impl Default for ctl_table_root {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn register_sysctl(
        path: *const core::ffi::c_char,
        table: *mut ctl_table,
    ) -> *mut ctl_table_header;
}
extern "C" {
    pub fn unregister_sysctl_table(table: *mut ctl_table_header);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vdso_image {
    pub data: *mut core::ffi::c_void,
    pub size: core::ffi::c_ulong,
    pub alt: core::ffi::c_ulong,
    pub alt_len: core::ffi::c_ulong,
    pub extable_base: core::ffi::c_ulong,
    pub extable_len: core::ffi::c_ulong,
    pub extable: *const core::ffi::c_void,
    pub sym_vvar_start: core::ffi::c_long,
    pub sym_vvar_page: core::ffi::c_long,
    pub sym_pvclock_page: core::ffi::c_long,
    pub sym_hvclock_page: core::ffi::c_long,
    pub sym_timens_page: core::ffi::c_long,
    pub sym_VDSO32_NOTE_MASK: core::ffi::c_long,
    pub sym___kernel_sigreturn: core::ffi::c_long,
    pub sym___kernel_rt_sigreturn: core::ffi::c_long,
    pub sym___kernel_vsyscall: core::ffi::c_long,
    pub sym_int80_landing_pad: core::ffi::c_long,
    pub sym_vdso32_sigreturn_landing_pad: core::ffi::c_long,
    pub sym_vdso32_rt_sigreturn_landing_pad: core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vdso_image"][::core::mem::size_of::<vdso_image>() - 152usize];
    ["Alignment of vdso_image"][::core::mem::align_of::<vdso_image>() - 8usize];
    ["Offset of field: vdso_image::data"][::core::mem::offset_of!(vdso_image, data) - 0usize];
    ["Offset of field: vdso_image::size"][::core::mem::offset_of!(vdso_image, size) - 8usize];
    ["Offset of field: vdso_image::alt"][::core::mem::offset_of!(vdso_image, alt) - 16usize];
    ["Offset of field: vdso_image::alt_len"]
        [::core::mem::offset_of!(vdso_image, alt_len) - 24usize];
    ["Offset of field: vdso_image::extable_base"]
        [::core::mem::offset_of!(vdso_image, extable_base) - 32usize];
    ["Offset of field: vdso_image::extable_len"]
        [::core::mem::offset_of!(vdso_image, extable_len) - 40usize];
    ["Offset of field: vdso_image::extable"]
        [::core::mem::offset_of!(vdso_image, extable) - 48usize];
    ["Offset of field: vdso_image::sym_vvar_start"]
        [::core::mem::offset_of!(vdso_image, sym_vvar_start) - 56usize];
    ["Offset of field: vdso_image::sym_vvar_page"]
        [::core::mem::offset_of!(vdso_image, sym_vvar_page) - 64usize];
    ["Offset of field: vdso_image::sym_pvclock_page"]
        [::core::mem::offset_of!(vdso_image, sym_pvclock_page) - 72usize];
    ["Offset of field: vdso_image::sym_hvclock_page"]
        [::core::mem::offset_of!(vdso_image, sym_hvclock_page) - 80usize];
    ["Offset of field: vdso_image::sym_timens_page"]
        [::core::mem::offset_of!(vdso_image, sym_timens_page) - 88usize];
    ["Offset of field: vdso_image::sym_VDSO32_NOTE_MASK"]
        [::core::mem::offset_of!(vdso_image, sym_VDSO32_NOTE_MASK) - 96usize];
    ["Offset of field: vdso_image::sym___kernel_sigreturn"]
        [::core::mem::offset_of!(vdso_image, sym___kernel_sigreturn) - 104usize];
    ["Offset of field: vdso_image::sym___kernel_rt_sigreturn"]
        [::core::mem::offset_of!(vdso_image, sym___kernel_rt_sigreturn) - 112usize];
    ["Offset of field: vdso_image::sym___kernel_vsyscall"]
        [::core::mem::offset_of!(vdso_image, sym___kernel_vsyscall) - 120usize];
    ["Offset of field: vdso_image::sym_int80_landing_pad"]
        [::core::mem::offset_of!(vdso_image, sym_int80_landing_pad) - 128usize];
    ["Offset of field: vdso_image::sym_vdso32_sigreturn_landing_pad"]
        [::core::mem::offset_of!(vdso_image, sym_vdso32_sigreturn_landing_pad) - 136usize];
    ["Offset of field: vdso_image::sym_vdso32_rt_sigreturn_landing_pad"]
        [::core::mem::offset_of!(vdso_image, sym_vdso32_rt_sigreturn_landing_pad) - 144usize];
};
impl Default for vdso_image {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type Elf64_Addr = __u64;
pub type Elf64_Half = __u16;
pub type Elf64_Word = __u32;
pub type Elf64_Xword = __u64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct elf64_sym {
    pub st_name: Elf64_Word,
    pub st_info: core::ffi::c_uchar,
    pub st_other: core::ffi::c_uchar,
    pub st_shndx: Elf64_Half,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf64_sym"][::core::mem::size_of::<elf64_sym>() - 24usize];
    ["Alignment of elf64_sym"][::core::mem::align_of::<elf64_sym>() - 8usize];
    ["Offset of field: elf64_sym::st_name"][::core::mem::offset_of!(elf64_sym, st_name) - 0usize];
    ["Offset of field: elf64_sym::st_info"][::core::mem::offset_of!(elf64_sym, st_info) - 4usize];
    ["Offset of field: elf64_sym::st_other"][::core::mem::offset_of!(elf64_sym, st_other) - 5usize];
    ["Offset of field: elf64_sym::st_shndx"][::core::mem::offset_of!(elf64_sym, st_shndx) - 6usize];
    ["Offset of field: elf64_sym::st_value"][::core::mem::offset_of!(elf64_sym, st_value) - 8usize];
    ["Offset of field: elf64_sym::st_size"][::core::mem::offset_of!(elf64_sym, st_size) - 16usize];
};
pub type Elf64_Sym = elf64_sym;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernel_param_ops {
    pub flags: core::ffi::c_uint,
    pub set: ::core::option::Option<
        unsafe extern "C" fn(
            val: *const core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub get: ::core::option::Option<
        unsafe extern "C" fn(
            buffer: *mut core::ffi::c_char,
            kp: *const kernel_param,
        ) -> core::ffi::c_int,
    >,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg: *mut core::ffi::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param_ops"][::core::mem::size_of::<kernel_param_ops>() - 32usize];
    ["Alignment of kernel_param_ops"][::core::mem::align_of::<kernel_param_ops>() - 8usize];
    ["Offset of field: kernel_param_ops::flags"]
        [::core::mem::offset_of!(kernel_param_ops, flags) - 0usize];
    ["Offset of field: kernel_param_ops::set"]
        [::core::mem::offset_of!(kernel_param_ops, set) - 8usize];
    ["Offset of field: kernel_param_ops::get"]
        [::core::mem::offset_of!(kernel_param_ops, get) - 16usize];
    ["Offset of field: kernel_param_ops::free"]
        [::core::mem::offset_of!(kernel_param_ops, free) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kernel_param {
    pub name: *const core::ffi::c_char,
    pub mod_: *mut module,
    pub ops: *const kernel_param_ops,
    pub perm: u16_,
    pub level: s8,
    pub flags: u8_,
    pub __bindgen_anon_1: kernel_param__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kernel_param__bindgen_ty_1 {
    pub arg: *mut core::ffi::c_void,
    pub str_: *const kparam_string,
    pub arr: *const kparam_array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param__bindgen_ty_1"]
        [::core::mem::size_of::<kernel_param__bindgen_ty_1>() - 8usize];
    ["Alignment of kernel_param__bindgen_ty_1"]
        [::core::mem::align_of::<kernel_param__bindgen_ty_1>() - 8usize];
    ["Offset of field: kernel_param__bindgen_ty_1::arg"]
        [::core::mem::offset_of!(kernel_param__bindgen_ty_1, arg) - 0usize];
    ["Offset of field: kernel_param__bindgen_ty_1::str_"]
        [::core::mem::offset_of!(kernel_param__bindgen_ty_1, str_) - 0usize];
    ["Offset of field: kernel_param__bindgen_ty_1::arr"]
        [::core::mem::offset_of!(kernel_param__bindgen_ty_1, arr) - 0usize];
};
impl Default for kernel_param__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_param"][::core::mem::size_of::<kernel_param>() - 40usize];
    ["Alignment of kernel_param"][::core::mem::align_of::<kernel_param>() - 8usize];
    ["Offset of field: kernel_param::name"][::core::mem::offset_of!(kernel_param, name) - 0usize];
    ["Offset of field: kernel_param::mod_"][::core::mem::offset_of!(kernel_param, mod_) - 8usize];
    ["Offset of field: kernel_param::ops"][::core::mem::offset_of!(kernel_param, ops) - 16usize];
    ["Offset of field: kernel_param::perm"][::core::mem::offset_of!(kernel_param, perm) - 24usize];
    ["Offset of field: kernel_param::level"]
        [::core::mem::offset_of!(kernel_param, level) - 26usize];
    ["Offset of field: kernel_param::flags"]
        [::core::mem::offset_of!(kernel_param, flags) - 27usize];
};
impl Default for kernel_param {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kparam_string {
    pub maxlen: core::ffi::c_uint,
    pub string: *mut core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kparam_string"][::core::mem::size_of::<kparam_string>() - 16usize];
    ["Alignment of kparam_string"][::core::mem::align_of::<kparam_string>() - 8usize];
    ["Offset of field: kparam_string::maxlen"]
        [::core::mem::offset_of!(kparam_string, maxlen) - 0usize];
    ["Offset of field: kparam_string::string"]
        [::core::mem::offset_of!(kparam_string, string) - 8usize];
};
impl Default for kparam_string {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kparam_array {
    pub max: core::ffi::c_uint,
    pub elemsize: core::ffi::c_uint,
    pub num: *mut core::ffi::c_uint,
    pub ops: *const kernel_param_ops,
    pub elem: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kparam_array"][::core::mem::size_of::<kparam_array>() - 32usize];
    ["Alignment of kparam_array"][::core::mem::align_of::<kparam_array>() - 8usize];
    ["Offset of field: kparam_array::max"][::core::mem::offset_of!(kparam_array, max) - 0usize];
    ["Offset of field: kparam_array::elemsize"]
        [::core::mem::offset_of!(kparam_array, elemsize) - 4usize];
    ["Offset of field: kparam_array::num"][::core::mem::offset_of!(kparam_array, num) - 8usize];
    ["Offset of field: kparam_array::ops"][::core::mem::offset_of!(kparam_array, ops) - 16usize];
    ["Offset of field: kparam_array::elem"][::core::mem::offset_of!(kparam_array, elem) - 24usize];
};
impl Default for kparam_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct latch_tree_node {
    pub node: [rb_node; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of latch_tree_node"][::core::mem::size_of::<latch_tree_node>() - 48usize];
    ["Alignment of latch_tree_node"][::core::mem::align_of::<latch_tree_node>() - 8usize];
    ["Offset of field: latch_tree_node::node"]
        [::core::mem::offset_of!(latch_tree_node, node) - 0usize];
};
impl Default for latch_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_arch_specific {
    pub num_orcs: core::ffi::c_uint,
    pub orc_unwind_ip: *mut core::ffi::c_int,
    pub orc_unwind: *mut orc_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_arch_specific"][::core::mem::size_of::<mod_arch_specific>() - 24usize];
    ["Alignment of mod_arch_specific"][::core::mem::align_of::<mod_arch_specific>() - 8usize];
    ["Offset of field: mod_arch_specific::num_orcs"]
        [::core::mem::offset_of!(mod_arch_specific, num_orcs) - 0usize];
    ["Offset of field: mod_arch_specific::orc_unwind_ip"]
        [::core::mem::offset_of!(mod_arch_specific, orc_unwind_ip) - 8usize];
    ["Offset of field: mod_arch_specific::orc_unwind"]
        [::core::mem::offset_of!(mod_arch_specific, orc_unwind) - 16usize];
};
impl Default for mod_arch_specific {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_kobject {
    pub kobj: kobject,
    pub mod_: *mut module,
    pub drivers_dir: *mut kobject,
    pub mp: *mut module_param_attrs,
    pub kobj_completion: *mut completion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_kobject"][::core::mem::size_of::<module_kobject>() - 96usize];
    ["Alignment of module_kobject"][::core::mem::align_of::<module_kobject>() - 8usize];
    ["Offset of field: module_kobject::kobj"]
        [::core::mem::offset_of!(module_kobject, kobj) - 0usize];
    ["Offset of field: module_kobject::mod_"]
        [::core::mem::offset_of!(module_kobject, mod_) - 64usize];
    ["Offset of field: module_kobject::drivers_dir"]
        [::core::mem::offset_of!(module_kobject, drivers_dir) - 72usize];
    ["Offset of field: module_kobject::mp"][::core::mem::offset_of!(module_kobject, mp) - 80usize];
    ["Offset of field: module_kobject::kobj_completion"]
        [::core::mem::offset_of!(module_kobject, kobj_completion) - 88usize];
};
impl Default for module_kobject {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_attribute {
    pub attr: attribute,
    pub show: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *mut core::ffi::c_char,
        ) -> isize,
    >,
    pub store: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut module_attribute,
            arg2: *mut module_kobject,
            arg3: *const core::ffi::c_char,
            count: usize,
        ) -> isize,
    >,
    pub setup: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut module, arg2: *const core::ffi::c_char),
    >,
    pub test: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module) -> core::ffi::c_int>,
    pub free: ::core::option::Option<unsafe extern "C" fn(arg1: *mut module)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_attribute"][::core::mem::size_of::<module_attribute>() - 56usize];
    ["Alignment of module_attribute"][::core::mem::align_of::<module_attribute>() - 8usize];
    ["Offset of field: module_attribute::attr"]
        [::core::mem::offset_of!(module_attribute, attr) - 0usize];
    ["Offset of field: module_attribute::show"]
        [::core::mem::offset_of!(module_attribute, show) - 16usize];
    ["Offset of field: module_attribute::store"]
        [::core::mem::offset_of!(module_attribute, store) - 24usize];
    ["Offset of field: module_attribute::setup"]
        [::core::mem::offset_of!(module_attribute, setup) - 32usize];
    ["Offset of field: module_attribute::test"]
        [::core::mem::offset_of!(module_attribute, test) - 40usize];
    ["Offset of field: module_attribute::free"]
        [::core::mem::offset_of!(module_attribute, free) - 48usize];
};
impl Default for module_attribute {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const module_state_MODULE_STATE_LIVE: module_state = 0;
pub const module_state_MODULE_STATE_COMING: module_state = 1;
pub const module_state_MODULE_STATE_GOING: module_state = 2;
pub const module_state_MODULE_STATE_UNFORMED: module_state = 3;
pub type module_state = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_tree_node {
    pub mod_: *mut module,
    pub node: latch_tree_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_tree_node"][::core::mem::size_of::<mod_tree_node>() - 56usize];
    ["Alignment of mod_tree_node"][::core::mem::align_of::<mod_tree_node>() - 8usize];
    ["Offset of field: mod_tree_node::mod_"][::core::mem::offset_of!(mod_tree_node, mod_) - 0usize];
    ["Offset of field: mod_tree_node::node"][::core::mem::offset_of!(mod_tree_node, node) - 8usize];
};
impl Default for mod_tree_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module_layout {
    pub base: *mut core::ffi::c_void,
    pub size: core::ffi::c_uint,
    pub text_size: core::ffi::c_uint,
    pub ro_size: core::ffi::c_uint,
    pub ro_after_init_size: core::ffi::c_uint,
    pub mtn: mod_tree_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of module_layout"][::core::mem::size_of::<module_layout>() - 80usize];
    ["Alignment of module_layout"][::core::mem::align_of::<module_layout>() - 8usize];
    ["Offset of field: module_layout::base"][::core::mem::offset_of!(module_layout, base) - 0usize];
    ["Offset of field: module_layout::size"][::core::mem::offset_of!(module_layout, size) - 8usize];
    ["Offset of field: module_layout::text_size"]
        [::core::mem::offset_of!(module_layout, text_size) - 12usize];
    ["Offset of field: module_layout::ro_size"]
        [::core::mem::offset_of!(module_layout, ro_size) - 16usize];
    ["Offset of field: module_layout::ro_after_init_size"]
        [::core::mem::offset_of!(module_layout, ro_after_init_size) - 20usize];
    ["Offset of field: module_layout::mtn"][::core::mem::offset_of!(module_layout, mtn) - 24usize];
};
impl Default for module_layout {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mod_kallsyms {
    pub symtab: *mut Elf64_Sym,
    pub num_symtab: core::ffi::c_uint,
    pub strtab: *mut core::ffi::c_char,
    pub typetab: *mut core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mod_kallsyms"][::core::mem::size_of::<mod_kallsyms>() - 32usize];
    ["Alignment of mod_kallsyms"][::core::mem::align_of::<mod_kallsyms>() - 8usize];
    ["Offset of field: mod_kallsyms::symtab"]
        [::core::mem::offset_of!(mod_kallsyms, symtab) - 0usize];
    ["Offset of field: mod_kallsyms::num_symtab"]
        [::core::mem::offset_of!(mod_kallsyms, num_symtab) - 8usize];
    ["Offset of field: mod_kallsyms::strtab"]
        [::core::mem::offset_of!(mod_kallsyms, strtab) - 16usize];
    ["Offset of field: mod_kallsyms::typetab"]
        [::core::mem::offset_of!(mod_kallsyms, typetab) - 24usize];
};
impl Default for mod_kallsyms {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cdev {
    pub kobj: kobject,
    pub owner: *mut module,
    pub ops: *const file_operations,
    pub list: list_head,
    pub dev: dev_t,
    pub count: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cdev"][::core::mem::size_of::<cdev>() - 104usize];
    ["Alignment of cdev"][::core::mem::align_of::<cdev>() - 8usize];
    ["Offset of field: cdev::kobj"][::core::mem::offset_of!(cdev, kobj) - 0usize];
    ["Offset of field: cdev::owner"][::core::mem::offset_of!(cdev, owner) - 64usize];
    ["Offset of field: cdev::ops"][::core::mem::offset_of!(cdev, ops) - 72usize];
    ["Offset of field: cdev::list"][::core::mem::offset_of!(cdev, list) - 80usize];
    ["Offset of field: cdev::dev"][::core::mem::offset_of!(cdev, dev) - 96usize];
    ["Offset of field: cdev::count"][::core::mem::offset_of!(cdev, count) - 100usize];
};
impl Default for cdev {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cdev_init(arg1: *mut cdev, arg2: *const file_operations);
}
extern "C" {
    pub fn cdev_add(arg1: *mut cdev, arg2: dev_t, arg3: core::ffi::c_uint) -> core::ffi::c_int;
}
extern "C" {
    pub fn cdev_del(arg1: *mut cdev);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_bl_head {
    pub first: *mut hlist_bl_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_bl_head"][::core::mem::size_of::<hlist_bl_head>() - 8usize];
    ["Alignment of hlist_bl_head"][::core::mem::align_of::<hlist_bl_head>() - 8usize];
    ["Offset of field: hlist_bl_head::first"]
        [::core::mem::offset_of!(hlist_bl_head, first) - 0usize];
};
impl Default for hlist_bl_head {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hlist_bl_node {
    pub next: *mut hlist_bl_node,
    pub pprev: *mut *mut hlist_bl_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hlist_bl_node"][::core::mem::size_of::<hlist_bl_node>() - 16usize];
    ["Alignment of hlist_bl_node"][::core::mem::align_of::<hlist_bl_node>() - 8usize];
    ["Offset of field: hlist_bl_node::next"][::core::mem::offset_of!(hlist_bl_node, next) - 0usize];
    ["Offset of field: hlist_bl_node::pprev"]
        [::core::mem::offset_of!(hlist_bl_node, pprev) - 8usize];
};
impl Default for hlist_bl_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref {
    pub __bindgen_anon_1: lockref__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lockref__bindgen_ty_1 {
    pub lock_count: __u64,
    pub __bindgen_anon_1: lockref__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lockref__bindgen_ty_1__bindgen_ty_1 {
    pub lock: spinlock_t,
    pub count: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<lockref__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of lockref__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<lockref__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: lockref__bindgen_ty_1__bindgen_ty_1::lock"]
        [::core::mem::offset_of!(lockref__bindgen_ty_1__bindgen_ty_1, lock) - 0usize];
    ["Offset of field: lockref__bindgen_ty_1__bindgen_ty_1::count"]
        [::core::mem::offset_of!(lockref__bindgen_ty_1__bindgen_ty_1, count) - 4usize];
};
impl Default for lockref__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref__bindgen_ty_1"][::core::mem::size_of::<lockref__bindgen_ty_1>() - 8usize];
    ["Alignment of lockref__bindgen_ty_1"]
        [::core::mem::align_of::<lockref__bindgen_ty_1>() - 8usize];
    ["Offset of field: lockref__bindgen_ty_1::lock_count"]
        [::core::mem::offset_of!(lockref__bindgen_ty_1, lock_count) - 0usize];
};
impl Default for lockref__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lockref"][::core::mem::size_of::<lockref>() - 8usize];
    ["Alignment of lockref"][::core::mem::align_of::<lockref>() - 8usize];
};
impl Default for lockref {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct qstr {
    pub __bindgen_anon_1: qstr__bindgen_ty_1,
    pub name: *const core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union qstr__bindgen_ty_1 {
    pub __bindgen_anon_1: qstr__bindgen_ty_1__bindgen_ty_1,
    pub hash_len: u64_,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qstr__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32_,
    pub len: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<qstr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of qstr__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<qstr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: qstr__bindgen_ty_1__bindgen_ty_1::hash"]
        [::core::mem::offset_of!(qstr__bindgen_ty_1__bindgen_ty_1, hash) - 0usize];
    ["Offset of field: qstr__bindgen_ty_1__bindgen_ty_1::len"]
        [::core::mem::offset_of!(qstr__bindgen_ty_1__bindgen_ty_1, len) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr__bindgen_ty_1"][::core::mem::size_of::<qstr__bindgen_ty_1>() - 8usize];
    ["Alignment of qstr__bindgen_ty_1"][::core::mem::align_of::<qstr__bindgen_ty_1>() - 8usize];
    ["Offset of field: qstr__bindgen_ty_1::hash_len"]
        [::core::mem::offset_of!(qstr__bindgen_ty_1, hash_len) - 0usize];
};
impl Default for qstr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qstr"][::core::mem::size_of::<qstr>() - 16usize];
    ["Alignment of qstr"][::core::mem::align_of::<qstr>() - 8usize];
    ["Offset of field: qstr::name"][::core::mem::offset_of!(qstr, name) - 8usize];
};
impl Default for qstr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dentry {
    pub d_flags: core::ffi::c_uint,
    pub d_seq: seqcount_spinlock_t,
    pub d_hash: hlist_bl_node,
    pub d_parent: *mut dentry,
    pub d_name: qstr,
    pub d_inode: *mut inode,
    pub d_iname: [core::ffi::c_uchar; 32usize],
    pub d_lockref: lockref,
    pub d_op: *const dentry_operations,
    pub d_sb: *mut super_block,
    pub d_time: core::ffi::c_ulong,
    pub d_fsdata: *mut core::ffi::c_void,
    pub __bindgen_anon_1: dentry__bindgen_ty_1,
    pub d_child: list_head,
    pub d_subdirs: list_head,
    pub d_u: dentry__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_1 {
    pub d_lru: list_head,
    pub d_wait: *mut wait_queue_head_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry__bindgen_ty_1"][::core::mem::size_of::<dentry__bindgen_ty_1>() - 16usize];
    ["Alignment of dentry__bindgen_ty_1"][::core::mem::align_of::<dentry__bindgen_ty_1>() - 8usize];
    ["Offset of field: dentry__bindgen_ty_1::d_lru"]
        [::core::mem::offset_of!(dentry__bindgen_ty_1, d_lru) - 0usize];
    ["Offset of field: dentry__bindgen_ty_1::d_wait"]
        [::core::mem::offset_of!(dentry__bindgen_ty_1, d_wait) - 0usize];
};
impl Default for dentry__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dentry__bindgen_ty_2 {
    pub d_alias: hlist_node,
    pub d_in_lookup_hash: hlist_bl_node,
    pub d_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry__bindgen_ty_2"][::core::mem::size_of::<dentry__bindgen_ty_2>() - 16usize];
    ["Alignment of dentry__bindgen_ty_2"][::core::mem::align_of::<dentry__bindgen_ty_2>() - 8usize];
    ["Offset of field: dentry__bindgen_ty_2::d_alias"]
        [::core::mem::offset_of!(dentry__bindgen_ty_2, d_alias) - 0usize];
    ["Offset of field: dentry__bindgen_ty_2::d_in_lookup_hash"]
        [::core::mem::offset_of!(dentry__bindgen_ty_2, d_in_lookup_hash) - 0usize];
    ["Offset of field: dentry__bindgen_ty_2::d_rcu"]
        [::core::mem::offset_of!(dentry__bindgen_ty_2, d_rcu) - 0usize];
};
impl Default for dentry__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry"][::core::mem::size_of::<dentry>() - 192usize];
    ["Alignment of dentry"][::core::mem::align_of::<dentry>() - 8usize];
    ["Offset of field: dentry::d_flags"][::core::mem::offset_of!(dentry, d_flags) - 0usize];
    ["Offset of field: dentry::d_seq"][::core::mem::offset_of!(dentry, d_seq) - 4usize];
    ["Offset of field: dentry::d_hash"][::core::mem::offset_of!(dentry, d_hash) - 8usize];
    ["Offset of field: dentry::d_parent"][::core::mem::offset_of!(dentry, d_parent) - 24usize];
    ["Offset of field: dentry::d_name"][::core::mem::offset_of!(dentry, d_name) - 32usize];
    ["Offset of field: dentry::d_inode"][::core::mem::offset_of!(dentry, d_inode) - 48usize];
    ["Offset of field: dentry::d_iname"][::core::mem::offset_of!(dentry, d_iname) - 56usize];
    ["Offset of field: dentry::d_lockref"][::core::mem::offset_of!(dentry, d_lockref) - 88usize];
    ["Offset of field: dentry::d_op"][::core::mem::offset_of!(dentry, d_op) - 96usize];
    ["Offset of field: dentry::d_sb"][::core::mem::offset_of!(dentry, d_sb) - 104usize];
    ["Offset of field: dentry::d_time"][::core::mem::offset_of!(dentry, d_time) - 112usize];
    ["Offset of field: dentry::d_fsdata"][::core::mem::offset_of!(dentry, d_fsdata) - 120usize];
    ["Offset of field: dentry::d_child"][::core::mem::offset_of!(dentry, d_child) - 144usize];
    ["Offset of field: dentry::d_subdirs"][::core::mem::offset_of!(dentry, d_subdirs) - 160usize];
    ["Offset of field: dentry::d_u"][::core::mem::offset_of!(dentry, d_u) - 176usize];
};
impl Default for dentry {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct dentry_operations {
    pub d_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_weak_revalidate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub d_hash: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const dentry, arg2: *mut qstr) -> core::ffi::c_int,
    >,
    pub d_compare: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const dentry,
            arg2: core::ffi::c_uint,
            arg3: *const core::ffi::c_char,
            arg4: *const qstr,
        ) -> core::ffi::c_int,
    >,
    pub d_delete:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const dentry) -> core::ffi::c_int>,
    pub d_init: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry) -> core::ffi::c_int>,
    pub d_release: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_prune: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry)>,
    pub d_iput: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut inode)>,
    pub d_dname: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> *mut core::ffi::c_char,
    >,
    pub d_automount: ::core::option::Option<unsafe extern "C" fn(arg1: *mut path) -> *mut vfsmount>,
    pub d_manage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const path, arg2: bool_) -> core::ffi::c_int,
    >,
    pub d_real: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *const inode) -> *mut dentry,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dentry_operations"][::core::mem::size_of::<dentry_operations>() - 128usize];
    ["Alignment of dentry_operations"][::core::mem::align_of::<dentry_operations>() - 64usize];
    ["Offset of field: dentry_operations::d_revalidate"]
        [::core::mem::offset_of!(dentry_operations, d_revalidate) - 0usize];
    ["Offset of field: dentry_operations::d_weak_revalidate"]
        [::core::mem::offset_of!(dentry_operations, d_weak_revalidate) - 8usize];
    ["Offset of field: dentry_operations::d_hash"]
        [::core::mem::offset_of!(dentry_operations, d_hash) - 16usize];
    ["Offset of field: dentry_operations::d_compare"]
        [::core::mem::offset_of!(dentry_operations, d_compare) - 24usize];
    ["Offset of field: dentry_operations::d_delete"]
        [::core::mem::offset_of!(dentry_operations, d_delete) - 32usize];
    ["Offset of field: dentry_operations::d_init"]
        [::core::mem::offset_of!(dentry_operations, d_init) - 40usize];
    ["Offset of field: dentry_operations::d_release"]
        [::core::mem::offset_of!(dentry_operations, d_release) - 48usize];
    ["Offset of field: dentry_operations::d_prune"]
        [::core::mem::offset_of!(dentry_operations, d_prune) - 56usize];
    ["Offset of field: dentry_operations::d_iput"]
        [::core::mem::offset_of!(dentry_operations, d_iput) - 64usize];
    ["Offset of field: dentry_operations::d_dname"]
        [::core::mem::offset_of!(dentry_operations, d_dname) - 72usize];
    ["Offset of field: dentry_operations::d_automount"]
        [::core::mem::offset_of!(dentry_operations, d_automount) - 80usize];
    ["Offset of field: dentry_operations::d_manage"]
        [::core::mem::offset_of!(dentry_operations, d_manage) - 88usize];
    ["Offset of field: dentry_operations::d_real"]
        [::core::mem::offset_of!(dentry_operations, d_real) - 96usize];
};
impl Default for dentry_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct path {
    pub mnt: *mut vfsmount,
    pub dentry: *mut dentry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of path"][::core::mem::size_of::<path>() - 16usize];
    ["Alignment of path"][::core::mem::align_of::<path>() - 8usize];
    ["Offset of field: path::mnt"][::core::mem::offset_of!(path, mnt) - 0usize];
    ["Offset of field: path::dentry"][::core::mem::offset_of!(path, dentry) - 8usize];
};
impl Default for path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shrink_control {
    pub gfp_mask: gfp_t,
    pub nid: core::ffi::c_int,
    pub nr_to_scan: core::ffi::c_ulong,
    pub nr_scanned: core::ffi::c_ulong,
    pub memcg: *mut mem_cgroup,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrink_control"][::core::mem::size_of::<shrink_control>() - 32usize];
    ["Alignment of shrink_control"][::core::mem::align_of::<shrink_control>() - 8usize];
    ["Offset of field: shrink_control::gfp_mask"]
        [::core::mem::offset_of!(shrink_control, gfp_mask) - 0usize];
    ["Offset of field: shrink_control::nid"][::core::mem::offset_of!(shrink_control, nid) - 4usize];
    ["Offset of field: shrink_control::nr_to_scan"]
        [::core::mem::offset_of!(shrink_control, nr_to_scan) - 8usize];
    ["Offset of field: shrink_control::nr_scanned"]
        [::core::mem::offset_of!(shrink_control, nr_scanned) - 16usize];
    ["Offset of field: shrink_control::memcg"]
        [::core::mem::offset_of!(shrink_control, memcg) - 24usize];
};
impl Default for shrink_control {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shrinker {
    pub count_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub scan_objects: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut shrinker, sc: *mut shrink_control) -> core::ffi::c_ulong,
    >,
    pub batch: core::ffi::c_long,
    pub seeks: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub list: list_head,
    pub id: core::ffi::c_int,
    pub nr_deferred: *mut atomic_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shrinker"][::core::mem::size_of::<shrinker>() - 64usize];
    ["Alignment of shrinker"][::core::mem::align_of::<shrinker>() - 8usize];
    ["Offset of field: shrinker::count_objects"]
        [::core::mem::offset_of!(shrinker, count_objects) - 0usize];
    ["Offset of field: shrinker::scan_objects"]
        [::core::mem::offset_of!(shrinker, scan_objects) - 8usize];
    ["Offset of field: shrinker::batch"][::core::mem::offset_of!(shrinker, batch) - 16usize];
    ["Offset of field: shrinker::seeks"][::core::mem::offset_of!(shrinker, seeks) - 24usize];
    ["Offset of field: shrinker::flags"][::core::mem::offset_of!(shrinker, flags) - 28usize];
    ["Offset of field: shrinker::list"][::core::mem::offset_of!(shrinker, list) - 32usize];
    ["Offset of field: shrinker::id"][::core::mem::offset_of!(shrinker, id) - 48usize];
    ["Offset of field: shrinker::nr_deferred"]
        [::core::mem::offset_of!(shrinker, nr_deferred) - 56usize];
};
impl Default for shrinker {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_lru_one {
    pub list: list_head,
    pub nr_items: core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru_one"][::core::mem::size_of::<list_lru_one>() - 24usize];
    ["Alignment of list_lru_one"][::core::mem::align_of::<list_lru_one>() - 8usize];
    ["Offset of field: list_lru_one::list"][::core::mem::offset_of!(list_lru_one, list) - 0usize];
    ["Offset of field: list_lru_one::nr_items"]
        [::core::mem::offset_of!(list_lru_one, nr_items) - 16usize];
};
impl Default for list_lru_one {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct list_lru_node {
    pub lock: spinlock_t,
    pub lru: list_lru_one,
    pub nr_items: core::ffi::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru_node"][::core::mem::size_of::<list_lru_node>() - 64usize];
    ["Alignment of list_lru_node"][::core::mem::align_of::<list_lru_node>() - 64usize];
    ["Offset of field: list_lru_node::lock"][::core::mem::offset_of!(list_lru_node, lock) - 0usize];
    ["Offset of field: list_lru_node::lru"][::core::mem::offset_of!(list_lru_node, lru) - 8usize];
    ["Offset of field: list_lru_node::nr_items"]
        [::core::mem::offset_of!(list_lru_node, nr_items) - 32usize];
};
impl Default for list_lru_node {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct list_lru {
    pub node: *mut list_lru_node,
    pub list: list_head,
    pub shrinker_id: core::ffi::c_int,
    pub memcg_aware: bool_,
    pub xa: xarray,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of list_lru"][::core::mem::size_of::<list_lru>() - 48usize];
    ["Alignment of list_lru"][::core::mem::align_of::<list_lru>() - 8usize];
    ["Offset of field: list_lru::node"][::core::mem::offset_of!(list_lru, node) - 0usize];
    ["Offset of field: list_lru::list"][::core::mem::offset_of!(list_lru, list) - 8usize];
    ["Offset of field: list_lru::shrinker_id"]
        [::core::mem::offset_of!(list_lru, shrinker_id) - 24usize];
    ["Offset of field: list_lru::memcg_aware"]
        [::core::mem::offset_of!(list_lru, memcg_aware) - 28usize];
    ["Offset of field: list_lru::xa"][::core::mem::offset_of!(list_lru, xa) - 32usize];
};
impl Default for list_lru {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernel_cap_struct {
    pub cap: [__u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kernel_cap_struct"][::core::mem::size_of::<kernel_cap_struct>() - 8usize];
    ["Alignment of kernel_cap_struct"][::core::mem::align_of::<kernel_cap_struct>() - 4usize];
    ["Offset of field: kernel_cap_struct::cap"]
        [::core::mem::offset_of!(kernel_cap_struct, cap) - 0usize];
};
pub type kernel_cap_t = kernel_cap_struct;
pub const migrate_mode_MIGRATE_ASYNC: migrate_mode = 0;
pub const migrate_mode_MIGRATE_SYNC_LIGHT: migrate_mode = 1;
pub const migrate_mode_MIGRATE_SYNC: migrate_mode = 2;
pub const migrate_mode_MIGRATE_SYNC_NO_COPY: migrate_mode = 3;
pub type migrate_mode = core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct exception_table_entry {
    pub insn: core::ffi::c_int,
    pub fixup: core::ffi::c_int,
    pub data: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exception_table_entry"][::core::mem::size_of::<exception_table_entry>() - 12usize];
    ["Alignment of exception_table_entry"]
        [::core::mem::align_of::<exception_table_entry>() - 4usize];
    ["Offset of field: exception_table_entry::insn"]
        [::core::mem::offset_of!(exception_table_entry, insn) - 0usize];
    ["Offset of field: exception_table_entry::fixup"]
        [::core::mem::offset_of!(exception_table_entry, fixup) - 4usize];
    ["Offset of field: exception_table_entry::data"]
        [::core::mem::offset_of!(exception_table_entry, data) - 8usize];
};
extern "C" {
    pub fn _copy_from_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
extern "C" {
    pub fn _copy_to_user(
        arg1: *mut core::ffi::c_void,
        arg2: *const core::ffi::c_void,
        arg3: core::ffi::c_ulong,
    ) -> core::ffi::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct css_set {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct assoc_array {
    pub root: *mut assoc_array_ptr,
    pub nr_leaves_on_tree: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of assoc_array"][::core::mem::size_of::<assoc_array>() - 16usize];
    ["Alignment of assoc_array"][::core::mem::align_of::<assoc_array>() - 8usize];
    ["Offset of field: assoc_array::root"][::core::mem::offset_of!(assoc_array, root) - 0usize];
    ["Offset of field: assoc_array::nr_leaves_on_tree"]
        [::core::mem::offset_of!(assoc_array, nr_leaves_on_tree) - 8usize];
};
impl Default for assoc_array {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type key_serial_t = i32;
pub type key_perm_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_tag {
    pub rcu: callback_head,
    pub usage: refcount_t,
    pub removed: bool_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_tag"][::core::mem::size_of::<key_tag>() - 24usize];
    ["Alignment of key_tag"][::core::mem::align_of::<key_tag>() - 8usize];
    ["Offset of field: key_tag::rcu"][::core::mem::offset_of!(key_tag, rcu) - 0usize];
    ["Offset of field: key_tag::usage"][::core::mem::offset_of!(key_tag, usage) - 16usize];
    ["Offset of field: key_tag::removed"][::core::mem::offset_of!(key_tag, removed) - 20usize];
};
impl Default for key_tag {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct keyring_index_key {
    pub hash: core::ffi::c_ulong,
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *const core::ffi::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union keyring_index_key__bindgen_ty_1 {
    pub __bindgen_anon_1: keyring_index_key__bindgen_ty_1__bindgen_ty_1,
    pub x: core::ffi::c_ulong,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct keyring_index_key__bindgen_ty_1__bindgen_ty_1 {
    pub desc_len: u16_,
    pub desc: [core::ffi::c_char; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<keyring_index_key__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of keyring_index_key__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<keyring_index_key__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1__bindgen_ty_1::desc_len"]
        [::core::mem::offset_of!(keyring_index_key__bindgen_ty_1__bindgen_ty_1, desc_len) - 0usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1__bindgen_ty_1::desc"]
        [::core::mem::offset_of!(keyring_index_key__bindgen_ty_1__bindgen_ty_1, desc) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key__bindgen_ty_1"]
        [::core::mem::size_of::<keyring_index_key__bindgen_ty_1>() - 8usize];
    ["Alignment of keyring_index_key__bindgen_ty_1"]
        [::core::mem::align_of::<keyring_index_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: keyring_index_key__bindgen_ty_1::x"]
        [::core::mem::offset_of!(keyring_index_key__bindgen_ty_1, x) - 0usize];
};
impl Default for keyring_index_key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of keyring_index_key"][::core::mem::size_of::<keyring_index_key>() - 40usize];
    ["Alignment of keyring_index_key"][::core::mem::align_of::<keyring_index_key>() - 8usize];
    ["Offset of field: keyring_index_key::hash"]
        [::core::mem::offset_of!(keyring_index_key, hash) - 0usize];
    ["Offset of field: keyring_index_key::type_"]
        [::core::mem::offset_of!(keyring_index_key, type_) - 16usize];
    ["Offset of field: keyring_index_key::domain_tag"]
        [::core::mem::offset_of!(keyring_index_key, domain_tag) - 24usize];
    ["Offset of field: keyring_index_key::description"]
        [::core::mem::offset_of!(keyring_index_key, description) - 32usize];
};
impl Default for keyring_index_key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key_payload {
    pub rcu_data0: *mut core::ffi::c_void,
    pub data: [*mut core::ffi::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_payload"][::core::mem::size_of::<key_payload>() - 32usize];
    ["Alignment of key_payload"][::core::mem::align_of::<key_payload>() - 8usize];
    ["Offset of field: key_payload::rcu_data0"]
        [::core::mem::offset_of!(key_payload, rcu_data0) - 0usize];
    ["Offset of field: key_payload::data"][::core::mem::offset_of!(key_payload, data) - 0usize];
};
impl Default for key_payload {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type key_restrict_link_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        dest_keyring: *mut key,
        type_: *const key_type,
        payload: *const key_payload,
        restriction_key: *mut key,
    ) -> core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_restriction {
    pub check: key_restrict_link_func_t,
    pub key: *mut key,
    pub keytype: *mut key_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key_restriction"][::core::mem::size_of::<key_restriction>() - 24usize];
    ["Alignment of key_restriction"][::core::mem::align_of::<key_restriction>() - 8usize];
    ["Offset of field: key_restriction::check"]
        [::core::mem::offset_of!(key_restriction, check) - 0usize];
    ["Offset of field: key_restriction::key"]
        [::core::mem::offset_of!(key_restriction, key) - 8usize];
    ["Offset of field: key_restriction::keytype"]
        [::core::mem::offset_of!(key_restriction, keytype) - 16usize];
};
impl Default for key_restriction {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct key {
    pub usage: refcount_t,
    pub serial: key_serial_t,
    pub __bindgen_anon_1: key__bindgen_ty_1,
    pub sem: rw_semaphore,
    pub user: *mut key_user,
    pub security: *mut core::ffi::c_void,
    pub __bindgen_anon_2: key__bindgen_ty_2,
    pub last_used_at: time64_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub perm: key_perm_t,
    pub quotalen: core::ffi::c_ushort,
    pub datalen: core::ffi::c_ushort,
    pub state: core::ffi::c_short,
    pub flags: core::ffi::c_ulong,
    pub __bindgen_anon_3: key__bindgen_ty_3,
    pub __bindgen_anon_4: key__bindgen_ty_4,
    pub restrict_link: *mut key_restriction,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_1 {
    pub graveyard_link: list_head,
    pub serial_node: rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_1"][::core::mem::size_of::<key__bindgen_ty_1>() - 24usize];
    ["Alignment of key__bindgen_ty_1"][::core::mem::align_of::<key__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_1::graveyard_link"]
        [::core::mem::offset_of!(key__bindgen_ty_1, graveyard_link) - 0usize];
    ["Offset of field: key__bindgen_ty_1::serial_node"]
        [::core::mem::offset_of!(key__bindgen_ty_1, serial_node) - 0usize];
};
impl Default for key__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_2 {
    pub expiry: time64_t,
    pub revoked_at: time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_2"][::core::mem::size_of::<key__bindgen_ty_2>() - 8usize];
    ["Alignment of key__bindgen_ty_2"][::core::mem::align_of::<key__bindgen_ty_2>() - 8usize];
    ["Offset of field: key__bindgen_ty_2::expiry"]
        [::core::mem::offset_of!(key__bindgen_ty_2, expiry) - 0usize];
    ["Offset of field: key__bindgen_ty_2::revoked_at"]
        [::core::mem::offset_of!(key__bindgen_ty_2, revoked_at) - 0usize];
};
impl Default for key__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_3 {
    pub index_key: keyring_index_key,
    pub __bindgen_anon_1: key__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key__bindgen_ty_3__bindgen_ty_1 {
    pub hash: core::ffi::c_ulong,
    pub len_desc: core::ffi::c_ulong,
    pub type_: *mut key_type,
    pub domain_tag: *mut key_tag,
    pub description: *mut core::ffi::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_3__bindgen_ty_1"]
        [::core::mem::size_of::<key__bindgen_ty_3__bindgen_ty_1>() - 40usize];
    ["Alignment of key__bindgen_ty_3__bindgen_ty_1"]
        [::core::mem::align_of::<key__bindgen_ty_3__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::hash"]
        [::core::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, hash) - 0usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::len_desc"]
        [::core::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, len_desc) - 8usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::type_"]
        [::core::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, type_) - 16usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::domain_tag"]
        [::core::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, domain_tag) - 24usize];
    ["Offset of field: key__bindgen_ty_3__bindgen_ty_1::description"]
        [::core::mem::offset_of!(key__bindgen_ty_3__bindgen_ty_1, description) - 32usize];
};
impl Default for key__bindgen_ty_3__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_3"][::core::mem::size_of::<key__bindgen_ty_3>() - 40usize];
    ["Alignment of key__bindgen_ty_3"][::core::mem::align_of::<key__bindgen_ty_3>() - 8usize];
    ["Offset of field: key__bindgen_ty_3::index_key"]
        [::core::mem::offset_of!(key__bindgen_ty_3, index_key) - 0usize];
};
impl Default for key__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union key__bindgen_ty_4 {
    pub payload: key_payload,
    pub __bindgen_anon_1: key__bindgen_ty_4__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key__bindgen_ty_4__bindgen_ty_1 {
    pub name_link: list_head,
    pub keys: assoc_array,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_4__bindgen_ty_1"]
        [::core::mem::size_of::<key__bindgen_ty_4__bindgen_ty_1>() - 32usize];
    ["Alignment of key__bindgen_ty_4__bindgen_ty_1"]
        [::core::mem::align_of::<key__bindgen_ty_4__bindgen_ty_1>() - 8usize];
    ["Offset of field: key__bindgen_ty_4__bindgen_ty_1::name_link"]
        [::core::mem::offset_of!(key__bindgen_ty_4__bindgen_ty_1, name_link) - 0usize];
    ["Offset of field: key__bindgen_ty_4__bindgen_ty_1::keys"]
        [::core::mem::offset_of!(key__bindgen_ty_4__bindgen_ty_1, keys) - 16usize];
};
impl Default for key__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key__bindgen_ty_4"][::core::mem::size_of::<key__bindgen_ty_4>() - 32usize];
    ["Alignment of key__bindgen_ty_4"][::core::mem::align_of::<key__bindgen_ty_4>() - 8usize];
    ["Offset of field: key__bindgen_ty_4::payload"]
        [::core::mem::offset_of!(key__bindgen_ty_4, payload) - 0usize];
};
impl Default for key__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of key"][::core::mem::size_of::<key>() - 216usize];
    ["Alignment of key"][::core::mem::align_of::<key>() - 8usize];
    ["Offset of field: key::usage"][::core::mem::offset_of!(key, usage) - 0usize];
    ["Offset of field: key::serial"][::core::mem::offset_of!(key, serial) - 4usize];
    ["Offset of field: key::sem"][::core::mem::offset_of!(key, sem) - 32usize];
    ["Offset of field: key::user"][::core::mem::offset_of!(key, user) - 72usize];
    ["Offset of field: key::security"][::core::mem::offset_of!(key, security) - 80usize];
    ["Offset of field: key::last_used_at"][::core::mem::offset_of!(key, last_used_at) - 96usize];
    ["Offset of field: key::uid"][::core::mem::offset_of!(key, uid) - 104usize];
    ["Offset of field: key::gid"][::core::mem::offset_of!(key, gid) - 108usize];
    ["Offset of field: key::perm"][::core::mem::offset_of!(key, perm) - 112usize];
    ["Offset of field: key::quotalen"][::core::mem::offset_of!(key, quotalen) - 116usize];
    ["Offset of field: key::datalen"][::core::mem::offset_of!(key, datalen) - 118usize];
    ["Offset of field: key::state"][::core::mem::offset_of!(key, state) - 120usize];
    ["Offset of field: key::flags"][::core::mem::offset_of!(key, flags) - 128usize];
    ["Offset of field: key::restrict_link"][::core::mem::offset_of!(key, restrict_link) - 208usize];
};
impl Default for key {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_counter {
    pub lock: raw_spinlock_t,
    pub count: s64,
    pub list: list_head,
    pub counters: *mut s32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_counter"][::core::mem::size_of::<percpu_counter>() - 40usize];
    ["Alignment of percpu_counter"][::core::mem::align_of::<percpu_counter>() - 8usize];
    ["Offset of field: percpu_counter::lock"]
        [::core::mem::offset_of!(percpu_counter, lock) - 0usize];
    ["Offset of field: percpu_counter::count"]
        [::core::mem::offset_of!(percpu_counter, count) - 8usize];
    ["Offset of field: percpu_counter::list"]
        [::core::mem::offset_of!(percpu_counter, list) - 16usize];
    ["Offset of field: percpu_counter::counters"]
        [::core::mem::offset_of!(percpu_counter, counters) - 32usize];
};
impl Default for percpu_counter {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_struct {
    pub __count: refcount_t,
    pub epoll_watches: percpu_counter,
    pub unix_inflight: core::ffi::c_ulong,
    pub pipe_bufs: atomic_long_t,
    pub uidhash_node: hlist_node,
    pub uid: kuid_t,
    pub locked_vm: atomic_long_t,
    pub ratelimit: ratelimit_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_struct"][::core::mem::size_of::<user_struct>() - 136usize];
    ["Alignment of user_struct"][::core::mem::align_of::<user_struct>() - 8usize];
    ["Offset of field: user_struct::__count"]
        [::core::mem::offset_of!(user_struct, __count) - 0usize];
    ["Offset of field: user_struct::epoll_watches"]
        [::core::mem::offset_of!(user_struct, epoll_watches) - 8usize];
    ["Offset of field: user_struct::unix_inflight"]
        [::core::mem::offset_of!(user_struct, unix_inflight) - 48usize];
    ["Offset of field: user_struct::pipe_bufs"]
        [::core::mem::offset_of!(user_struct, pipe_bufs) - 56usize];
    ["Offset of field: user_struct::uidhash_node"]
        [::core::mem::offset_of!(user_struct, uidhash_node) - 64usize];
    ["Offset of field: user_struct::uid"][::core::mem::offset_of!(user_struct, uid) - 80usize];
    ["Offset of field: user_struct::locked_vm"]
        [::core::mem::offset_of!(user_struct, locked_vm) - 88usize];
    ["Offset of field: user_struct::ratelimit"]
        [::core::mem::offset_of!(user_struct, ratelimit) - 96usize];
};
impl Default for user_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct group_info {
    pub usage: atomic_t,
    pub ngroups: core::ffi::c_int,
    pub gid: __IncompleteArrayField<kgid_t>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_info"][::core::mem::size_of::<group_info>() - 8usize];
    ["Alignment of group_info"][::core::mem::align_of::<group_info>() - 4usize];
    ["Offset of field: group_info::usage"][::core::mem::offset_of!(group_info, usage) - 0usize];
    ["Offset of field: group_info::ngroups"][::core::mem::offset_of!(group_info, ngroups) - 4usize];
    ["Offset of field: group_info::gid"][::core::mem::offset_of!(group_info, gid) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cred {
    pub usage: atomic_t,
    pub subscribers: atomic_t,
    pub put_addr: *mut core::ffi::c_void,
    pub magic: core::ffi::c_uint,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub suid: kuid_t,
    pub sgid: kgid_t,
    pub euid: kuid_t,
    pub egid: kgid_t,
    pub fsuid: kuid_t,
    pub fsgid: kgid_t,
    pub securebits: core::ffi::c_uint,
    pub cap_inheritable: kernel_cap_t,
    pub cap_permitted: kernel_cap_t,
    pub cap_effective: kernel_cap_t,
    pub cap_bset: kernel_cap_t,
    pub cap_ambient: kernel_cap_t,
    pub jit_keyring: core::ffi::c_uchar,
    pub session_keyring: *mut key,
    pub process_keyring: *mut key,
    pub thread_keyring: *mut key,
    pub request_key_auth: *mut key,
    pub security: *mut core::ffi::c_void,
    pub user: *mut user_struct,
    pub user_ns: *mut user_namespace,
    pub ucounts: *mut ucounts,
    pub group_info: *mut group_info,
    pub __bindgen_anon_1: cred__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cred__bindgen_ty_1 {
    pub non_rcu: core::ffi::c_int,
    pub rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cred__bindgen_ty_1"][::core::mem::size_of::<cred__bindgen_ty_1>() - 16usize];
    ["Alignment of cred__bindgen_ty_1"][::core::mem::align_of::<cred__bindgen_ty_1>() - 8usize];
    ["Offset of field: cred__bindgen_ty_1::non_rcu"]
        [::core::mem::offset_of!(cred__bindgen_ty_1, non_rcu) - 0usize];
    ["Offset of field: cred__bindgen_ty_1::rcu"]
        [::core::mem::offset_of!(cred__bindgen_ty_1, rcu) - 0usize];
};
impl Default for cred__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cred"][::core::mem::size_of::<cred>() - 192usize];
    ["Alignment of cred"][::core::mem::align_of::<cred>() - 8usize];
    ["Offset of field: cred::usage"][::core::mem::offset_of!(cred, usage) - 0usize];
    ["Offset of field: cred::subscribers"][::core::mem::offset_of!(cred, subscribers) - 4usize];
    ["Offset of field: cred::put_addr"][::core::mem::offset_of!(cred, put_addr) - 8usize];
    ["Offset of field: cred::magic"][::core::mem::offset_of!(cred, magic) - 16usize];
    ["Offset of field: cred::uid"][::core::mem::offset_of!(cred, uid) - 20usize];
    ["Offset of field: cred::gid"][::core::mem::offset_of!(cred, gid) - 24usize];
    ["Offset of field: cred::suid"][::core::mem::offset_of!(cred, suid) - 28usize];
    ["Offset of field: cred::sgid"][::core::mem::offset_of!(cred, sgid) - 32usize];
    ["Offset of field: cred::euid"][::core::mem::offset_of!(cred, euid) - 36usize];
    ["Offset of field: cred::egid"][::core::mem::offset_of!(cred, egid) - 40usize];
    ["Offset of field: cred::fsuid"][::core::mem::offset_of!(cred, fsuid) - 44usize];
    ["Offset of field: cred::fsgid"][::core::mem::offset_of!(cred, fsgid) - 48usize];
    ["Offset of field: cred::securebits"][::core::mem::offset_of!(cred, securebits) - 52usize];
    ["Offset of field: cred::cap_inheritable"]
        [::core::mem::offset_of!(cred, cap_inheritable) - 56usize];
    ["Offset of field: cred::cap_permitted"]
        [::core::mem::offset_of!(cred, cap_permitted) - 64usize];
    ["Offset of field: cred::cap_effective"]
        [::core::mem::offset_of!(cred, cap_effective) - 72usize];
    ["Offset of field: cred::cap_bset"][::core::mem::offset_of!(cred, cap_bset) - 80usize];
    ["Offset of field: cred::cap_ambient"][::core::mem::offset_of!(cred, cap_ambient) - 88usize];
    ["Offset of field: cred::jit_keyring"][::core::mem::offset_of!(cred, jit_keyring) - 96usize];
    ["Offset of field: cred::session_keyring"]
        [::core::mem::offset_of!(cred, session_keyring) - 104usize];
    ["Offset of field: cred::process_keyring"]
        [::core::mem::offset_of!(cred, process_keyring) - 112usize];
    ["Offset of field: cred::thread_keyring"]
        [::core::mem::offset_of!(cred, thread_keyring) - 120usize];
    ["Offset of field: cred::request_key_auth"]
        [::core::mem::offset_of!(cred, request_key_auth) - 128usize];
    ["Offset of field: cred::security"][::core::mem::offset_of!(cred, security) - 136usize];
    ["Offset of field: cred::user"][::core::mem::offset_of!(cred, user) - 144usize];
    ["Offset of field: cred::user_ns"][::core::mem::offset_of!(cred, user_ns) - 152usize];
    ["Offset of field: cred::ucounts"][::core::mem::offset_of!(cred, ucounts) - 160usize];
    ["Offset of field: cred::group_info"][::core::mem::offset_of!(cred, group_info) - 168usize];
};
impl Default for cred {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sighand_struct {
    pub siglock: spinlock_t,
    pub count: refcount_t,
    pub signalfd_wqh: wait_queue_head_t,
    pub action: [k_sigaction; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sighand_struct"][::core::mem::size_of::<sighand_struct>() - 2080usize];
    ["Alignment of sighand_struct"][::core::mem::align_of::<sighand_struct>() - 8usize];
    ["Offset of field: sighand_struct::siglock"]
        [::core::mem::offset_of!(sighand_struct, siglock) - 0usize];
    ["Offset of field: sighand_struct::count"]
        [::core::mem::offset_of!(sighand_struct, count) - 4usize];
    ["Offset of field: sighand_struct::signalfd_wqh"]
        [::core::mem::offset_of!(sighand_struct, signalfd_wqh) - 8usize];
    ["Offset of field: sighand_struct::action"]
        [::core::mem::offset_of!(sighand_struct, action) - 32usize];
};
impl Default for sighand_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pacct_struct {
    pub ac_flag: core::ffi::c_int,
    pub ac_exitcode: core::ffi::c_long,
    pub ac_mem: core::ffi::c_ulong,
    pub ac_utime: u64_,
    pub ac_stime: u64_,
    pub ac_minflt: core::ffi::c_ulong,
    pub ac_majflt: core::ffi::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pacct_struct"][::core::mem::size_of::<pacct_struct>() - 56usize];
    ["Alignment of pacct_struct"][::core::mem::align_of::<pacct_struct>() - 8usize];
    ["Offset of field: pacct_struct::ac_flag"]
        [::core::mem::offset_of!(pacct_struct, ac_flag) - 0usize];
    ["Offset of field: pacct_struct::ac_exitcode"]
        [::core::mem::offset_of!(pacct_struct, ac_exitcode) - 8usize];
    ["Offset of field: pacct_struct::ac_mem"]
        [::core::mem::offset_of!(pacct_struct, ac_mem) - 16usize];
    ["Offset of field: pacct_struct::ac_utime"]
        [::core::mem::offset_of!(pacct_struct, ac_utime) - 24usize];
    ["Offset of field: pacct_struct::ac_stime"]
        [::core::mem::offset_of!(pacct_struct, ac_stime) - 32usize];
    ["Offset of field: pacct_struct::ac_minflt"]
        [::core::mem::offset_of!(pacct_struct, ac_minflt) - 40usize];
    ["Offset of field: pacct_struct::ac_majflt"]
        [::core::mem::offset_of!(pacct_struct, ac_majflt) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_itimer {
    pub expires: u64_,
    pub incr: u64_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_itimer"][::core::mem::size_of::<cpu_itimer>() - 16usize];
    ["Alignment of cpu_itimer"][::core::mem::align_of::<cpu_itimer>() - 8usize];
    ["Offset of field: cpu_itimer::expires"][::core::mem::offset_of!(cpu_itimer, expires) - 0usize];
    ["Offset of field: cpu_itimer::incr"][::core::mem::offset_of!(cpu_itimer, incr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct task_cputime_atomic {
    pub utime: atomic64_t,
    pub stime: atomic64_t,
    pub sum_exec_runtime: atomic64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of task_cputime_atomic"][::core::mem::size_of::<task_cputime_atomic>() - 24usize];
    ["Alignment of task_cputime_atomic"][::core::mem::align_of::<task_cputime_atomic>() - 8usize];
    ["Offset of field: task_cputime_atomic::utime"]
        [::core::mem::offset_of!(task_cputime_atomic, utime) - 0usize];
    ["Offset of field: task_cputime_atomic::stime"]
        [::core::mem::offset_of!(task_cputime_atomic, stime) - 8usize];
    ["Offset of field: task_cputime_atomic::sum_exec_runtime"]
        [::core::mem::offset_of!(task_cputime_atomic, sum_exec_runtime) - 16usize];
};
#[doc = " struct thread_group_cputimer - thread group interval timer counts\n @cputime_atomic:\tatomic thread group interval timers.\n\n This structure contains the version of task_cputime, above, that is\n used for thread group CPU timer calculations."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct thread_group_cputimer {
    pub cputime_atomic: task_cputime_atomic,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of thread_group_cputimer"][::core::mem::size_of::<thread_group_cputimer>() - 24usize];
    ["Alignment of thread_group_cputimer"]
        [::core::mem::align_of::<thread_group_cputimer>() - 8usize];
    ["Offset of field: thread_group_cputimer::cputime_atomic"]
        [::core::mem::offset_of!(thread_group_cputimer, cputime_atomic) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct core_thread {
    pub task: *mut task_struct,
    pub next: *mut core_thread,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of core_thread"][::core::mem::size_of::<core_thread>() - 16usize];
    ["Alignment of core_thread"][::core::mem::align_of::<core_thread>() - 8usize];
    ["Offset of field: core_thread::task"][::core::mem::offset_of!(core_thread, task) - 0usize];
    ["Offset of field: core_thread::next"][::core::mem::offset_of!(core_thread, next) - 8usize];
};
impl Default for core_thread {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct core_state {
    pub nr_threads: atomic_t,
    pub dumper: core_thread,
    pub startup: completion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of core_state"][::core::mem::size_of::<core_state>() - 56usize];
    ["Alignment of core_state"][::core::mem::align_of::<core_state>() - 8usize];
    ["Offset of field: core_state::nr_threads"]
        [::core::mem::offset_of!(core_state, nr_threads) - 0usize];
    ["Offset of field: core_state::dumper"][::core::mem::offset_of!(core_state, dumper) - 8usize];
    ["Offset of field: core_state::startup"]
        [::core::mem::offset_of!(core_state, startup) - 24usize];
};
impl Default for core_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct signal_struct {
    pub sigcnt: refcount_t,
    pub live: atomic_t,
    pub nr_threads: core::ffi::c_int,
    pub quick_threads: core::ffi::c_int,
    pub thread_head: list_head,
    pub wait_chldexit: wait_queue_head_t,
    pub curr_target: *mut task_struct,
    pub shared_pending: sigpending,
    pub multiprocess: hlist_head,
    pub group_exit_code: core::ffi::c_int,
    pub notify_count: core::ffi::c_int,
    pub group_exec_task: *mut task_struct,
    pub group_stop_count: core::ffi::c_int,
    pub flags: core::ffi::c_uint,
    pub core_state: *mut core_state,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub posix_timer_id: core::ffi::c_int,
    pub posix_timers: list_head,
    pub real_timer: hrtimer,
    pub it_real_incr: ktime_t,
    pub it: [cpu_itimer; 2usize],
    pub cputimer: thread_group_cputimer,
    pub posix_cputimers: posix_cputimers,
    pub pids: [*mut pid; 4usize],
    pub tty_old_pgrp: *mut pid,
    pub leader: core::ffi::c_int,
    pub tty: *mut tty_struct,
    pub stats_lock: seqlock_t,
    pub utime: u64_,
    pub stime: u64_,
    pub cutime: u64_,
    pub cstime: u64_,
    pub gtime: u64_,
    pub cgtime: u64_,
    pub prev_cputime: prev_cputime,
    pub nvcsw: core::ffi::c_ulong,
    pub nivcsw: core::ffi::c_ulong,
    pub cnvcsw: core::ffi::c_ulong,
    pub cnivcsw: core::ffi::c_ulong,
    pub min_flt: core::ffi::c_ulong,
    pub maj_flt: core::ffi::c_ulong,
    pub cmin_flt: core::ffi::c_ulong,
    pub cmaj_flt: core::ffi::c_ulong,
    pub inblock: core::ffi::c_ulong,
    pub oublock: core::ffi::c_ulong,
    pub cinblock: core::ffi::c_ulong,
    pub coublock: core::ffi::c_ulong,
    pub maxrss: core::ffi::c_ulong,
    pub cmaxrss: core::ffi::c_ulong,
    pub ioac: task_io_accounting,
    pub sum_sched_runtime: core::ffi::c_ulonglong,
    pub rlim: [rlimit; 16usize],
    pub pacct: pacct_struct,
    pub stats: *mut taskstats,
    pub audit_tty: core::ffi::c_uint,
    pub tty_audit_buf: *mut tty_audit_buf,
    pub oom_flag_origin: bool_,
    pub oom_score_adj: core::ffi::c_short,
    pub oom_score_adj_min: core::ffi::c_short,
    pub oom_mm: *mut mm_struct,
    pub cred_guard_mutex: mutex,
    pub exec_update_lock: rw_semaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of signal_struct"][::core::mem::size_of::<signal_struct>() - 1096usize];
    ["Alignment of signal_struct"][::core::mem::align_of::<signal_struct>() - 8usize];
    ["Offset of field: signal_struct::sigcnt"]
        [::core::mem::offset_of!(signal_struct, sigcnt) - 0usize];
    ["Offset of field: signal_struct::live"][::core::mem::offset_of!(signal_struct, live) - 4usize];
    ["Offset of field: signal_struct::nr_threads"]
        [::core::mem::offset_of!(signal_struct, nr_threads) - 8usize];
    ["Offset of field: signal_struct::quick_threads"]
        [::core::mem::offset_of!(signal_struct, quick_threads) - 12usize];
    ["Offset of field: signal_struct::thread_head"]
        [::core::mem::offset_of!(signal_struct, thread_head) - 16usize];
    ["Offset of field: signal_struct::wait_chldexit"]
        [::core::mem::offset_of!(signal_struct, wait_chldexit) - 32usize];
    ["Offset of field: signal_struct::curr_target"]
        [::core::mem::offset_of!(signal_struct, curr_target) - 56usize];
    ["Offset of field: signal_struct::shared_pending"]
        [::core::mem::offset_of!(signal_struct, shared_pending) - 64usize];
    ["Offset of field: signal_struct::multiprocess"]
        [::core::mem::offset_of!(signal_struct, multiprocess) - 88usize];
    ["Offset of field: signal_struct::group_exit_code"]
        [::core::mem::offset_of!(signal_struct, group_exit_code) - 96usize];
    ["Offset of field: signal_struct::notify_count"]
        [::core::mem::offset_of!(signal_struct, notify_count) - 100usize];
    ["Offset of field: signal_struct::group_exec_task"]
        [::core::mem::offset_of!(signal_struct, group_exec_task) - 104usize];
    ["Offset of field: signal_struct::group_stop_count"]
        [::core::mem::offset_of!(signal_struct, group_stop_count) - 112usize];
    ["Offset of field: signal_struct::flags"]
        [::core::mem::offset_of!(signal_struct, flags) - 116usize];
    ["Offset of field: signal_struct::core_state"]
        [::core::mem::offset_of!(signal_struct, core_state) - 120usize];
    ["Offset of field: signal_struct::posix_timer_id"]
        [::core::mem::offset_of!(signal_struct, posix_timer_id) - 132usize];
    ["Offset of field: signal_struct::posix_timers"]
        [::core::mem::offset_of!(signal_struct, posix_timers) - 136usize];
    ["Offset of field: signal_struct::real_timer"]
        [::core::mem::offset_of!(signal_struct, real_timer) - 152usize];
    ["Offset of field: signal_struct::it_real_incr"]
        [::core::mem::offset_of!(signal_struct, it_real_incr) - 216usize];
    ["Offset of field: signal_struct::it"][::core::mem::offset_of!(signal_struct, it) - 224usize];
    ["Offset of field: signal_struct::cputimer"]
        [::core::mem::offset_of!(signal_struct, cputimer) - 256usize];
    ["Offset of field: signal_struct::posix_cputimers"]
        [::core::mem::offset_of!(signal_struct, posix_cputimers) - 280usize];
    ["Offset of field: signal_struct::pids"]
        [::core::mem::offset_of!(signal_struct, pids) - 360usize];
    ["Offset of field: signal_struct::tty_old_pgrp"]
        [::core::mem::offset_of!(signal_struct, tty_old_pgrp) - 392usize];
    ["Offset of field: signal_struct::leader"]
        [::core::mem::offset_of!(signal_struct, leader) - 400usize];
    ["Offset of field: signal_struct::tty"][::core::mem::offset_of!(signal_struct, tty) - 408usize];
    ["Offset of field: signal_struct::stats_lock"]
        [::core::mem::offset_of!(signal_struct, stats_lock) - 416usize];
    ["Offset of field: signal_struct::utime"]
        [::core::mem::offset_of!(signal_struct, utime) - 424usize];
    ["Offset of field: signal_struct::stime"]
        [::core::mem::offset_of!(signal_struct, stime) - 432usize];
    ["Offset of field: signal_struct::cutime"]
        [::core::mem::offset_of!(signal_struct, cutime) - 440usize];
    ["Offset of field: signal_struct::cstime"]
        [::core::mem::offset_of!(signal_struct, cstime) - 448usize];
    ["Offset of field: signal_struct::gtime"]
        [::core::mem::offset_of!(signal_struct, gtime) - 456usize];
    ["Offset of field: signal_struct::cgtime"]
        [::core::mem::offset_of!(signal_struct, cgtime) - 464usize];
    ["Offset of field: signal_struct::prev_cputime"]
        [::core::mem::offset_of!(signal_struct, prev_cputime) - 472usize];
    ["Offset of field: signal_struct::nvcsw"]
        [::core::mem::offset_of!(signal_struct, nvcsw) - 496usize];
    ["Offset of field: signal_struct::nivcsw"]
        [::core::mem::offset_of!(signal_struct, nivcsw) - 504usize];
    ["Offset of field: signal_struct::cnvcsw"]
        [::core::mem::offset_of!(signal_struct, cnvcsw) - 512usize];
    ["Offset of field: signal_struct::cnivcsw"]
        [::core::mem::offset_of!(signal_struct, cnivcsw) - 520usize];
    ["Offset of field: signal_struct::min_flt"]
        [::core::mem::offset_of!(signal_struct, min_flt) - 528usize];
    ["Offset of field: signal_struct::maj_flt"]
        [::core::mem::offset_of!(signal_struct, maj_flt) - 536usize];
    ["Offset of field: signal_struct::cmin_flt"]
        [::core::mem::offset_of!(signal_struct, cmin_flt) - 544usize];
    ["Offset of field: signal_struct::cmaj_flt"]
        [::core::mem::offset_of!(signal_struct, cmaj_flt) - 552usize];
    ["Offset of field: signal_struct::inblock"]
        [::core::mem::offset_of!(signal_struct, inblock) - 560usize];
    ["Offset of field: signal_struct::oublock"]
        [::core::mem::offset_of!(signal_struct, oublock) - 568usize];
    ["Offset of field: signal_struct::cinblock"]
        [::core::mem::offset_of!(signal_struct, cinblock) - 576usize];
    ["Offset of field: signal_struct::coublock"]
        [::core::mem::offset_of!(signal_struct, coublock) - 584usize];
    ["Offset of field: signal_struct::maxrss"]
        [::core::mem::offset_of!(signal_struct, maxrss) - 592usize];
    ["Offset of field: signal_struct::cmaxrss"]
        [::core::mem::offset_of!(signal_struct, cmaxrss) - 600usize];
    ["Offset of field: signal_struct::ioac"]
        [::core::mem::offset_of!(signal_struct, ioac) - 608usize];
    ["Offset of field: signal_struct::sum_sched_runtime"]
        [::core::mem::offset_of!(signal_struct, sum_sched_runtime) - 664usize];
    ["Offset of field: signal_struct::rlim"]
        [::core::mem::offset_of!(signal_struct, rlim) - 672usize];
    ["Offset of field: signal_struct::pacct"]
        [::core::mem::offset_of!(signal_struct, pacct) - 928usize];
    ["Offset of field: signal_struct::stats"]
        [::core::mem::offset_of!(signal_struct, stats) - 984usize];
    ["Offset of field: signal_struct::audit_tty"]
        [::core::mem::offset_of!(signal_struct, audit_tty) - 992usize];
    ["Offset of field: signal_struct::tty_audit_buf"]
        [::core::mem::offset_of!(signal_struct, tty_audit_buf) - 1000usize];
    ["Offset of field: signal_struct::oom_flag_origin"]
        [::core::mem::offset_of!(signal_struct, oom_flag_origin) - 1008usize];
    ["Offset of field: signal_struct::oom_score_adj"]
        [::core::mem::offset_of!(signal_struct, oom_score_adj) - 1010usize];
    ["Offset of field: signal_struct::oom_score_adj_min"]
        [::core::mem::offset_of!(signal_struct, oom_score_adj_min) - 1012usize];
    ["Offset of field: signal_struct::oom_mm"]
        [::core::mem::offset_of!(signal_struct, oom_mm) - 1016usize];
    ["Offset of field: signal_struct::cred_guard_mutex"]
        [::core::mem::offset_of!(signal_struct, cred_guard_mutex) - 1024usize];
    ["Offset of field: signal_struct::exec_update_lock"]
        [::core::mem::offset_of!(signal_struct, exec_update_lock) - 1056usize];
};
impl Default for signal_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl signal_struct {
    #[inline]
    pub fn is_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_child_subreaper(&self) -> core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_child_subreaper(&mut self, val: core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_child_subreaper: core::ffi::c_uint,
        has_child_subreaper: core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_child_subreaper: u32 = unsafe { ::core::mem::transmute(is_child_subreaper) };
            is_child_subreaper as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_child_subreaper: u32 = unsafe { ::core::mem::transmute(has_child_subreaper) };
            has_child_subreaper as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rcuwait {
    pub task: *mut task_struct,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcuwait"][::core::mem::size_of::<rcuwait>() - 8usize];
    ["Alignment of rcuwait"][::core::mem::align_of::<rcuwait>() - 8usize];
    ["Offset of field: rcuwait::task"][::core::mem::offset_of!(rcuwait, task) - 0usize];
};
impl Default for rcuwait {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rcu_sync {
    pub gp_state: core::ffi::c_int,
    pub gp_count: core::ffi::c_int,
    pub gp_wait: wait_queue_head_t,
    pub cb_head: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rcu_sync"][::core::mem::size_of::<rcu_sync>() - 48usize];
    ["Alignment of rcu_sync"][::core::mem::align_of::<rcu_sync>() - 8usize];
    ["Offset of field: rcu_sync::gp_state"][::core::mem::offset_of!(rcu_sync, gp_state) - 0usize];
    ["Offset of field: rcu_sync::gp_count"][::core::mem::offset_of!(rcu_sync, gp_count) - 4usize];
    ["Offset of field: rcu_sync::gp_wait"][::core::mem::offset_of!(rcu_sync, gp_wait) - 8usize];
    ["Offset of field: rcu_sync::cb_head"][::core::mem::offset_of!(rcu_sync, cb_head) - 32usize];
};
impl Default for rcu_sync {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct percpu_rw_semaphore {
    pub rss: rcu_sync,
    pub read_count: *mut core::ffi::c_uint,
    pub writer: rcuwait,
    pub waiters: wait_queue_head_t,
    pub block: atomic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of percpu_rw_semaphore"][::core::mem::size_of::<percpu_rw_semaphore>() - 96usize];
    ["Alignment of percpu_rw_semaphore"][::core::mem::align_of::<percpu_rw_semaphore>() - 8usize];
    ["Offset of field: percpu_rw_semaphore::rss"]
        [::core::mem::offset_of!(percpu_rw_semaphore, rss) - 0usize];
    ["Offset of field: percpu_rw_semaphore::read_count"]
        [::core::mem::offset_of!(percpu_rw_semaphore, read_count) - 48usize];
    ["Offset of field: percpu_rw_semaphore::writer"]
        [::core::mem::offset_of!(percpu_rw_semaphore, writer) - 56usize];
    ["Offset of field: percpu_rw_semaphore::waiters"]
        [::core::mem::offset_of!(percpu_rw_semaphore, waiters) - 64usize];
    ["Offset of field: percpu_rw_semaphore::block"]
        [::core::mem::offset_of!(percpu_rw_semaphore, block) - 88usize];
};
impl Default for percpu_rw_semaphore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct delayed_call {
    pub fn_: ::core::option::Option<unsafe extern "C" fn(arg1: *mut core::ffi::c_void)>,
    pub arg: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of delayed_call"][::core::mem::size_of::<delayed_call>() - 16usize];
    ["Alignment of delayed_call"][::core::mem::align_of::<delayed_call>() - 8usize];
    ["Offset of field: delayed_call::fn_"][::core::mem::offset_of!(delayed_call, fn_) - 0usize];
    ["Offset of field: delayed_call::arg"][::core::mem::offset_of!(delayed_call, arg) - 8usize];
};
impl Default for delayed_call {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uuid_t {
    pub b: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of uuid_t"][::core::mem::size_of::<uuid_t>() - 16usize];
    ["Alignment of uuid_t"][::core::mem::align_of::<uuid_t>() - 1usize];
    ["Offset of field: uuid_t::b"][::core::mem::offset_of!(uuid_t, b) - 0usize];
};
pub type errseq_t = u32_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_context {
    pub refcount: atomic_long_t,
    pub active_ref: atomic_t,
    pub ioprio: core::ffi::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_context"][::core::mem::size_of::<io_context>() - 16usize];
    ["Alignment of io_context"][::core::mem::align_of::<io_context>() - 8usize];
    ["Offset of field: io_context::refcount"]
        [::core::mem::offset_of!(io_context, refcount) - 0usize];
    ["Offset of field: io_context::active_ref"]
        [::core::mem::offset_of!(io_context, active_ref) - 8usize];
    ["Offset of field: io_context::ioprio"][::core::mem::offset_of!(io_context, ioprio) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vfsmount {
    pub mnt_root: *mut dentry,
    pub mnt_sb: *mut super_block,
    pub mnt_flags: core::ffi::c_int,
    pub mnt_userns: *mut user_namespace,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsmount"][::core::mem::size_of::<vfsmount>() - 32usize];
    ["Alignment of vfsmount"][::core::mem::align_of::<vfsmount>() - 8usize];
    ["Offset of field: vfsmount::mnt_root"][::core::mem::offset_of!(vfsmount, mnt_root) - 0usize];
    ["Offset of field: vfsmount::mnt_sb"][::core::mem::offset_of!(vfsmount, mnt_sb) - 8usize];
    ["Offset of field: vfsmount::mnt_flags"]
        [::core::mem::offset_of!(vfsmount, mnt_flags) - 16usize];
    ["Offset of field: vfsmount::mnt_userns"]
        [::core::mem::offset_of!(vfsmount, mnt_userns) - 24usize];
};
impl Default for vfsmount {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vfsuid_t {
    pub val: uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsuid_t"][::core::mem::size_of::<vfsuid_t>() - 4usize];
    ["Alignment of vfsuid_t"][::core::mem::align_of::<vfsuid_t>() - 4usize];
    ["Offset of field: vfsuid_t::val"][::core::mem::offset_of!(vfsuid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vfsgid_t {
    pub val: gid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vfsgid_t"][::core::mem::size_of::<vfsgid_t>() - 4usize];
    ["Alignment of vfsgid_t"][::core::mem::align_of::<vfsgid_t>() - 4usize];
    ["Offset of field: vfsgid_t::val"][::core::mem::offset_of!(vfsgid_t, val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_struct {
    _unused: [u8; 0],
}
extern "C" {
    pub fn krealloc(
        objp: *const core::ffi::c_void,
        new_size: usize,
        flags: gfp_t,
    ) -> *mut core::ffi::c_void;
}
extern "C" {
    pub fn kfree(objp: *const core::ffi::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bdi_writeback {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_comp_batch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct export_operations {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fiemap_extent_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kstatfs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swap_info_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iov_iter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fs_parameter_spec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fileattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iattr {
    pub ia_valid: core::ffi::c_uint,
    pub ia_mode: umode_t,
    pub __bindgen_anon_1: iattr__bindgen_ty_1,
    pub __bindgen_anon_2: iattr__bindgen_ty_2,
    pub ia_size: loff_t,
    pub ia_atime: timespec64,
    pub ia_mtime: timespec64,
    pub ia_ctime: timespec64,
    pub ia_file: *mut file,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_1 {
    pub ia_uid: kuid_t,
    pub ia_vfsuid: vfsuid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr__bindgen_ty_1"][::core::mem::size_of::<iattr__bindgen_ty_1>() - 4usize];
    ["Alignment of iattr__bindgen_ty_1"][::core::mem::align_of::<iattr__bindgen_ty_1>() - 4usize];
    ["Offset of field: iattr__bindgen_ty_1::ia_uid"]
        [::core::mem::offset_of!(iattr__bindgen_ty_1, ia_uid) - 0usize];
    ["Offset of field: iattr__bindgen_ty_1::ia_vfsuid"]
        [::core::mem::offset_of!(iattr__bindgen_ty_1, ia_vfsuid) - 0usize];
};
impl Default for iattr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iattr__bindgen_ty_2 {
    pub ia_gid: kgid_t,
    pub ia_vfsgid: vfsgid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr__bindgen_ty_2"][::core::mem::size_of::<iattr__bindgen_ty_2>() - 4usize];
    ["Alignment of iattr__bindgen_ty_2"][::core::mem::align_of::<iattr__bindgen_ty_2>() - 4usize];
    ["Offset of field: iattr__bindgen_ty_2::ia_gid"]
        [::core::mem::offset_of!(iattr__bindgen_ty_2, ia_gid) - 0usize];
    ["Offset of field: iattr__bindgen_ty_2::ia_vfsgid"]
        [::core::mem::offset_of!(iattr__bindgen_ty_2, ia_vfsgid) - 0usize];
};
impl Default for iattr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iattr"][::core::mem::size_of::<iattr>() - 80usize];
    ["Alignment of iattr"][::core::mem::align_of::<iattr>() - 8usize];
    ["Offset of field: iattr::ia_valid"][::core::mem::offset_of!(iattr, ia_valid) - 0usize];
    ["Offset of field: iattr::ia_mode"][::core::mem::offset_of!(iattr, ia_mode) - 4usize];
    ["Offset of field: iattr::ia_size"][::core::mem::offset_of!(iattr, ia_size) - 16usize];
    ["Offset of field: iattr::ia_atime"][::core::mem::offset_of!(iattr, ia_atime) - 24usize];
    ["Offset of field: iattr::ia_mtime"][::core::mem::offset_of!(iattr, ia_mtime) - 40usize];
    ["Offset of field: iattr::ia_ctime"][::core::mem::offset_of!(iattr, ia_ctime) - 56usize];
    ["Offset of field: iattr::ia_file"][::core::mem::offset_of!(iattr, ia_file) - 72usize];
};
impl Default for iattr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type projid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kprojid_t {
    pub val: projid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kprojid_t"][::core::mem::size_of::<kprojid_t>() - 4usize];
    ["Alignment of kprojid_t"][::core::mem::align_of::<kprojid_t>() - 4usize];
    ["Offset of field: kprojid_t::val"][::core::mem::offset_of!(kprojid_t, val) - 0usize];
};
pub const quota_type_USRQUOTA: quota_type = 0;
pub const quota_type_GRPQUOTA: quota_type = 1;
pub const quota_type_PRJQUOTA: quota_type = 2;
pub type quota_type = core::ffi::c_uint;
pub type qsize_t = core::ffi::c_longlong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kqid {
    pub __bindgen_anon_1: kqid__bindgen_ty_1,
    pub type_: quota_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union kqid__bindgen_ty_1 {
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub projid: kprojid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kqid__bindgen_ty_1"][::core::mem::size_of::<kqid__bindgen_ty_1>() - 4usize];
    ["Alignment of kqid__bindgen_ty_1"][::core::mem::align_of::<kqid__bindgen_ty_1>() - 4usize];
    ["Offset of field: kqid__bindgen_ty_1::uid"]
        [::core::mem::offset_of!(kqid__bindgen_ty_1, uid) - 0usize];
    ["Offset of field: kqid__bindgen_ty_1::gid"]
        [::core::mem::offset_of!(kqid__bindgen_ty_1, gid) - 0usize];
    ["Offset of field: kqid__bindgen_ty_1::projid"]
        [::core::mem::offset_of!(kqid__bindgen_ty_1, projid) - 0usize];
};
impl Default for kqid__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kqid"][::core::mem::size_of::<kqid>() - 8usize];
    ["Alignment of kqid"][::core::mem::align_of::<kqid>() - 4usize];
    ["Offset of field: kqid::type_"][::core::mem::offset_of!(kqid, type_) - 4usize];
};
impl Default for kqid {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mem_dqblk {
    pub dqb_bhardlimit: qsize_t,
    pub dqb_bsoftlimit: qsize_t,
    pub dqb_curspace: qsize_t,
    pub dqb_rsvspace: qsize_t,
    pub dqb_ihardlimit: qsize_t,
    pub dqb_isoftlimit: qsize_t,
    pub dqb_curinodes: qsize_t,
    pub dqb_btime: time64_t,
    pub dqb_itime: time64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_dqblk"][::core::mem::size_of::<mem_dqblk>() - 72usize];
    ["Alignment of mem_dqblk"][::core::mem::align_of::<mem_dqblk>() - 8usize];
    ["Offset of field: mem_dqblk::dqb_bhardlimit"]
        [::core::mem::offset_of!(mem_dqblk, dqb_bhardlimit) - 0usize];
    ["Offset of field: mem_dqblk::dqb_bsoftlimit"]
        [::core::mem::offset_of!(mem_dqblk, dqb_bsoftlimit) - 8usize];
    ["Offset of field: mem_dqblk::dqb_curspace"]
        [::core::mem::offset_of!(mem_dqblk, dqb_curspace) - 16usize];
    ["Offset of field: mem_dqblk::dqb_rsvspace"]
        [::core::mem::offset_of!(mem_dqblk, dqb_rsvspace) - 24usize];
    ["Offset of field: mem_dqblk::dqb_ihardlimit"]
        [::core::mem::offset_of!(mem_dqblk, dqb_ihardlimit) - 32usize];
    ["Offset of field: mem_dqblk::dqb_isoftlimit"]
        [::core::mem::offset_of!(mem_dqblk, dqb_isoftlimit) - 40usize];
    ["Offset of field: mem_dqblk::dqb_curinodes"]
        [::core::mem::offset_of!(mem_dqblk, dqb_curinodes) - 48usize];
    ["Offset of field: mem_dqblk::dqb_btime"]
        [::core::mem::offset_of!(mem_dqblk, dqb_btime) - 56usize];
    ["Offset of field: mem_dqblk::dqb_itime"]
        [::core::mem::offset_of!(mem_dqblk, dqb_itime) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mem_dqinfo {
    pub dqi_format: *mut quota_format_type,
    pub dqi_fmt_id: core::ffi::c_int,
    pub dqi_dirty_list: list_head,
    pub dqi_flags: core::ffi::c_ulong,
    pub dqi_bgrace: core::ffi::c_uint,
    pub dqi_igrace: core::ffi::c_uint,
    pub dqi_max_spc_limit: qsize_t,
    pub dqi_max_ino_limit: qsize_t,
    pub dqi_priv: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mem_dqinfo"][::core::mem::size_of::<mem_dqinfo>() - 72usize];
    ["Alignment of mem_dqinfo"][::core::mem::align_of::<mem_dqinfo>() - 8usize];
    ["Offset of field: mem_dqinfo::dqi_format"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_format) - 0usize];
    ["Offset of field: mem_dqinfo::dqi_fmt_id"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_fmt_id) - 8usize];
    ["Offset of field: mem_dqinfo::dqi_dirty_list"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_dirty_list) - 16usize];
    ["Offset of field: mem_dqinfo::dqi_flags"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_flags) - 32usize];
    ["Offset of field: mem_dqinfo::dqi_bgrace"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_bgrace) - 40usize];
    ["Offset of field: mem_dqinfo::dqi_igrace"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_igrace) - 44usize];
    ["Offset of field: mem_dqinfo::dqi_max_spc_limit"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_max_spc_limit) - 48usize];
    ["Offset of field: mem_dqinfo::dqi_max_ino_limit"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_max_ino_limit) - 56usize];
    ["Offset of field: mem_dqinfo::dqi_priv"]
        [::core::mem::offset_of!(mem_dqinfo, dqi_priv) - 64usize];
};
impl Default for mem_dqinfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dquot {
    pub dq_hash: hlist_node,
    pub dq_inuse: list_head,
    pub dq_free: list_head,
    pub dq_dirty: list_head,
    pub dq_lock: mutex,
    pub dq_dqb_lock: spinlock_t,
    pub dq_count: atomic_t,
    pub dq_sb: *mut super_block,
    pub dq_id: kqid,
    pub dq_off: loff_t,
    pub dq_flags: core::ffi::c_ulong,
    pub dq_dqb: mem_dqblk,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dquot"][::core::mem::size_of::<dquot>() - 208usize];
    ["Alignment of dquot"][::core::mem::align_of::<dquot>() - 8usize];
    ["Offset of field: dquot::dq_hash"][::core::mem::offset_of!(dquot, dq_hash) - 0usize];
    ["Offset of field: dquot::dq_inuse"][::core::mem::offset_of!(dquot, dq_inuse) - 16usize];
    ["Offset of field: dquot::dq_free"][::core::mem::offset_of!(dquot, dq_free) - 32usize];
    ["Offset of field: dquot::dq_dirty"][::core::mem::offset_of!(dquot, dq_dirty) - 48usize];
    ["Offset of field: dquot::dq_lock"][::core::mem::offset_of!(dquot, dq_lock) - 64usize];
    ["Offset of field: dquot::dq_dqb_lock"][::core::mem::offset_of!(dquot, dq_dqb_lock) - 96usize];
    ["Offset of field: dquot::dq_count"][::core::mem::offset_of!(dquot, dq_count) - 100usize];
    ["Offset of field: dquot::dq_sb"][::core::mem::offset_of!(dquot, dq_sb) - 104usize];
    ["Offset of field: dquot::dq_id"][::core::mem::offset_of!(dquot, dq_id) - 112usize];
    ["Offset of field: dquot::dq_off"][::core::mem::offset_of!(dquot, dq_off) - 120usize];
    ["Offset of field: dquot::dq_flags"][::core::mem::offset_of!(dquot, dq_flags) - 128usize];
    ["Offset of field: dquot::dq_dqb"][::core::mem::offset_of!(dquot, dq_dqb) - 136usize];
};
impl Default for dquot {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct quota_format_ops {
    pub check_quota_file: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub write_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub free_file_info: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, type_: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub read_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub commit_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub release_dqblk:
        ::core::option::Option<unsafe extern "C" fn(dquot: *mut dquot) -> core::ffi::c_int>,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_format_ops"][::core::mem::size_of::<quota_format_ops>() - 64usize];
    ["Alignment of quota_format_ops"][::core::mem::align_of::<quota_format_ops>() - 8usize];
    ["Offset of field: quota_format_ops::check_quota_file"]
        [::core::mem::offset_of!(quota_format_ops, check_quota_file) - 0usize];
    ["Offset of field: quota_format_ops::read_file_info"]
        [::core::mem::offset_of!(quota_format_ops, read_file_info) - 8usize];
    ["Offset of field: quota_format_ops::write_file_info"]
        [::core::mem::offset_of!(quota_format_ops, write_file_info) - 16usize];
    ["Offset of field: quota_format_ops::free_file_info"]
        [::core::mem::offset_of!(quota_format_ops, free_file_info) - 24usize];
    ["Offset of field: quota_format_ops::read_dqblk"]
        [::core::mem::offset_of!(quota_format_ops, read_dqblk) - 32usize];
    ["Offset of field: quota_format_ops::commit_dqblk"]
        [::core::mem::offset_of!(quota_format_ops, commit_dqblk) - 40usize];
    ["Offset of field: quota_format_ops::release_dqblk"]
        [::core::mem::offset_of!(quota_format_ops, release_dqblk) - 48usize];
    ["Offset of field: quota_format_ops::get_next_id"]
        [::core::mem::offset_of!(quota_format_ops, get_next_id) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dquot_operations {
    pub write_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub alloc_dquot: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> *mut dquot,
    >,
    pub destroy_dquot: ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot)>,
    pub acquire_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub release_dquot:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub mark_dirty:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut dquot) -> core::ffi::c_int>,
    pub write_info: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub get_reserved_space:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut qsize_t>,
    pub get_projid: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut kprojid_t) -> core::ffi::c_int,
    >,
    pub get_inode_usage: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut qsize_t) -> core::ffi::c_int,
    >,
    pub get_next_id: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, qid: *mut kqid) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dquot_operations"][::core::mem::size_of::<dquot_operations>() - 88usize];
    ["Alignment of dquot_operations"][::core::mem::align_of::<dquot_operations>() - 8usize];
    ["Offset of field: dquot_operations::write_dquot"]
        [::core::mem::offset_of!(dquot_operations, write_dquot) - 0usize];
    ["Offset of field: dquot_operations::alloc_dquot"]
        [::core::mem::offset_of!(dquot_operations, alloc_dquot) - 8usize];
    ["Offset of field: dquot_operations::destroy_dquot"]
        [::core::mem::offset_of!(dquot_operations, destroy_dquot) - 16usize];
    ["Offset of field: dquot_operations::acquire_dquot"]
        [::core::mem::offset_of!(dquot_operations, acquire_dquot) - 24usize];
    ["Offset of field: dquot_operations::release_dquot"]
        [::core::mem::offset_of!(dquot_operations, release_dquot) - 32usize];
    ["Offset of field: dquot_operations::mark_dirty"]
        [::core::mem::offset_of!(dquot_operations, mark_dirty) - 40usize];
    ["Offset of field: dquot_operations::write_info"]
        [::core::mem::offset_of!(dquot_operations, write_info) - 48usize];
    ["Offset of field: dquot_operations::get_reserved_space"]
        [::core::mem::offset_of!(dquot_operations, get_reserved_space) - 56usize];
    ["Offset of field: dquot_operations::get_projid"]
        [::core::mem::offset_of!(dquot_operations, get_projid) - 64usize];
    ["Offset of field: dquot_operations::get_inode_usage"]
        [::core::mem::offset_of!(dquot_operations, get_inode_usage) - 72usize];
    ["Offset of field: dquot_operations::get_next_id"]
        [::core::mem::offset_of!(dquot_operations, get_next_id) - 80usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qc_dqblk {
    pub d_fieldmask: core::ffi::c_int,
    pub d_spc_hardlimit: u64_,
    pub d_spc_softlimit: u64_,
    pub d_ino_hardlimit: u64_,
    pub d_ino_softlimit: u64_,
    pub d_space: u64_,
    pub d_ino_count: u64_,
    pub d_ino_timer: s64,
    pub d_spc_timer: s64,
    pub d_ino_warns: core::ffi::c_int,
    pub d_spc_warns: core::ffi::c_int,
    pub d_rt_spc_hardlimit: u64_,
    pub d_rt_spc_softlimit: u64_,
    pub d_rt_space: u64_,
    pub d_rt_spc_timer: s64,
    pub d_rt_spc_warns: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_dqblk"][::core::mem::size_of::<qc_dqblk>() - 120usize];
    ["Alignment of qc_dqblk"][::core::mem::align_of::<qc_dqblk>() - 8usize];
    ["Offset of field: qc_dqblk::d_fieldmask"]
        [::core::mem::offset_of!(qc_dqblk, d_fieldmask) - 0usize];
    ["Offset of field: qc_dqblk::d_spc_hardlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_spc_hardlimit) - 8usize];
    ["Offset of field: qc_dqblk::d_spc_softlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_spc_softlimit) - 16usize];
    ["Offset of field: qc_dqblk::d_ino_hardlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_ino_hardlimit) - 24usize];
    ["Offset of field: qc_dqblk::d_ino_softlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_ino_softlimit) - 32usize];
    ["Offset of field: qc_dqblk::d_space"][::core::mem::offset_of!(qc_dqblk, d_space) - 40usize];
    ["Offset of field: qc_dqblk::d_ino_count"]
        [::core::mem::offset_of!(qc_dqblk, d_ino_count) - 48usize];
    ["Offset of field: qc_dqblk::d_ino_timer"]
        [::core::mem::offset_of!(qc_dqblk, d_ino_timer) - 56usize];
    ["Offset of field: qc_dqblk::d_spc_timer"]
        [::core::mem::offset_of!(qc_dqblk, d_spc_timer) - 64usize];
    ["Offset of field: qc_dqblk::d_ino_warns"]
        [::core::mem::offset_of!(qc_dqblk, d_ino_warns) - 72usize];
    ["Offset of field: qc_dqblk::d_spc_warns"]
        [::core::mem::offset_of!(qc_dqblk, d_spc_warns) - 76usize];
    ["Offset of field: qc_dqblk::d_rt_spc_hardlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_rt_spc_hardlimit) - 80usize];
    ["Offset of field: qc_dqblk::d_rt_spc_softlimit"]
        [::core::mem::offset_of!(qc_dqblk, d_rt_spc_softlimit) - 88usize];
    ["Offset of field: qc_dqblk::d_rt_space"]
        [::core::mem::offset_of!(qc_dqblk, d_rt_space) - 96usize];
    ["Offset of field: qc_dqblk::d_rt_spc_timer"]
        [::core::mem::offset_of!(qc_dqblk, d_rt_spc_timer) - 104usize];
    ["Offset of field: qc_dqblk::d_rt_spc_warns"]
        [::core::mem::offset_of!(qc_dqblk, d_rt_spc_warns) - 112usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qc_type_state {
    pub flags: core::ffi::c_uint,
    pub spc_timelimit: core::ffi::c_uint,
    pub ino_timelimit: core::ffi::c_uint,
    pub rt_spc_timelimit: core::ffi::c_uint,
    pub spc_warnlimit: core::ffi::c_uint,
    pub ino_warnlimit: core::ffi::c_uint,
    pub rt_spc_warnlimit: core::ffi::c_uint,
    pub ino: core::ffi::c_ulonglong,
    pub blocks: blkcnt_t,
    pub nextents: blkcnt_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_type_state"][::core::mem::size_of::<qc_type_state>() - 56usize];
    ["Alignment of qc_type_state"][::core::mem::align_of::<qc_type_state>() - 8usize];
    ["Offset of field: qc_type_state::flags"]
        [::core::mem::offset_of!(qc_type_state, flags) - 0usize];
    ["Offset of field: qc_type_state::spc_timelimit"]
        [::core::mem::offset_of!(qc_type_state, spc_timelimit) - 4usize];
    ["Offset of field: qc_type_state::ino_timelimit"]
        [::core::mem::offset_of!(qc_type_state, ino_timelimit) - 8usize];
    ["Offset of field: qc_type_state::rt_spc_timelimit"]
        [::core::mem::offset_of!(qc_type_state, rt_spc_timelimit) - 12usize];
    ["Offset of field: qc_type_state::spc_warnlimit"]
        [::core::mem::offset_of!(qc_type_state, spc_warnlimit) - 16usize];
    ["Offset of field: qc_type_state::ino_warnlimit"]
        [::core::mem::offset_of!(qc_type_state, ino_warnlimit) - 20usize];
    ["Offset of field: qc_type_state::rt_spc_warnlimit"]
        [::core::mem::offset_of!(qc_type_state, rt_spc_warnlimit) - 24usize];
    ["Offset of field: qc_type_state::ino"][::core::mem::offset_of!(qc_type_state, ino) - 32usize];
    ["Offset of field: qc_type_state::blocks"]
        [::core::mem::offset_of!(qc_type_state, blocks) - 40usize];
    ["Offset of field: qc_type_state::nextents"]
        [::core::mem::offset_of!(qc_type_state, nextents) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qc_state {
    pub s_incoredqs: core::ffi::c_uint,
    pub s_state: [qc_type_state; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_state"][::core::mem::size_of::<qc_state>() - 176usize];
    ["Alignment of qc_state"][::core::mem::align_of::<qc_state>() - 8usize];
    ["Offset of field: qc_state::s_incoredqs"]
        [::core::mem::offset_of!(qc_state, s_incoredqs) - 0usize];
    ["Offset of field: qc_state::s_state"][::core::mem::offset_of!(qc_state, s_state) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct qc_info {
    pub i_fieldmask: core::ffi::c_int,
    pub i_flags: core::ffi::c_uint,
    pub i_spc_timelimit: core::ffi::c_uint,
    pub i_ino_timelimit: core::ffi::c_uint,
    pub i_rt_spc_timelimit: core::ffi::c_uint,
    pub i_spc_warnlimit: core::ffi::c_uint,
    pub i_ino_warnlimit: core::ffi::c_uint,
    pub i_rt_spc_warnlimit: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of qc_info"][::core::mem::size_of::<qc_info>() - 32usize];
    ["Alignment of qc_info"][::core::mem::align_of::<qc_info>() - 4usize];
    ["Offset of field: qc_info::i_fieldmask"]
        [::core::mem::offset_of!(qc_info, i_fieldmask) - 0usize];
    ["Offset of field: qc_info::i_flags"][::core::mem::offset_of!(qc_info, i_flags) - 4usize];
    ["Offset of field: qc_info::i_spc_timelimit"]
        [::core::mem::offset_of!(qc_info, i_spc_timelimit) - 8usize];
    ["Offset of field: qc_info::i_ino_timelimit"]
        [::core::mem::offset_of!(qc_info, i_ino_timelimit) - 12usize];
    ["Offset of field: qc_info::i_rt_spc_timelimit"]
        [::core::mem::offset_of!(qc_info, i_rt_spc_timelimit) - 16usize];
    ["Offset of field: qc_info::i_spc_warnlimit"]
        [::core::mem::offset_of!(qc_info, i_spc_warnlimit) - 20usize];
    ["Offset of field: qc_info::i_ino_warnlimit"]
        [::core::mem::offset_of!(qc_info, i_ino_warnlimit) - 24usize];
    ["Offset of field: qc_info::i_rt_spc_warnlimit"]
        [::core::mem::offset_of!(qc_info, i_rt_spc_warnlimit) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct quotactl_ops {
    pub quota_on: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: core::ffi::c_int,
            arg4: *const path,
        ) -> core::ffi::c_int,
    >,
    pub quota_off: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub quota_enable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_disable: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
    pub quota_sync: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub set_info: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *mut qc_info,
        ) -> core::ffi::c_int,
    >,
    pub get_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_nextdqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub set_dqblk: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: kqid,
            arg3: *mut qc_dqblk,
        ) -> core::ffi::c_int,
    >,
    pub get_state: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: *mut qc_state) -> core::ffi::c_int,
    >,
    pub rm_xquota: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut super_block, arg2: core::ffi::c_uint) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quotactl_ops"][::core::mem::size_of::<quotactl_ops>() - 88usize];
    ["Alignment of quotactl_ops"][::core::mem::align_of::<quotactl_ops>() - 8usize];
    ["Offset of field: quotactl_ops::quota_on"]
        [::core::mem::offset_of!(quotactl_ops, quota_on) - 0usize];
    ["Offset of field: quotactl_ops::quota_off"]
        [::core::mem::offset_of!(quotactl_ops, quota_off) - 8usize];
    ["Offset of field: quotactl_ops::quota_enable"]
        [::core::mem::offset_of!(quotactl_ops, quota_enable) - 16usize];
    ["Offset of field: quotactl_ops::quota_disable"]
        [::core::mem::offset_of!(quotactl_ops, quota_disable) - 24usize];
    ["Offset of field: quotactl_ops::quota_sync"]
        [::core::mem::offset_of!(quotactl_ops, quota_sync) - 32usize];
    ["Offset of field: quotactl_ops::set_info"]
        [::core::mem::offset_of!(quotactl_ops, set_info) - 40usize];
    ["Offset of field: quotactl_ops::get_dqblk"]
        [::core::mem::offset_of!(quotactl_ops, get_dqblk) - 48usize];
    ["Offset of field: quotactl_ops::get_nextdqblk"]
        [::core::mem::offset_of!(quotactl_ops, get_nextdqblk) - 56usize];
    ["Offset of field: quotactl_ops::set_dqblk"]
        [::core::mem::offset_of!(quotactl_ops, set_dqblk) - 64usize];
    ["Offset of field: quotactl_ops::get_state"]
        [::core::mem::offset_of!(quotactl_ops, get_state) - 72usize];
    ["Offset of field: quotactl_ops::rm_xquota"]
        [::core::mem::offset_of!(quotactl_ops, rm_xquota) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct quota_format_type {
    pub qf_fmt_id: core::ffi::c_int,
    pub qf_ops: *const quota_format_ops,
    pub qf_owner: *mut module,
    pub qf_next: *mut quota_format_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_format_type"][::core::mem::size_of::<quota_format_type>() - 32usize];
    ["Alignment of quota_format_type"][::core::mem::align_of::<quota_format_type>() - 8usize];
    ["Offset of field: quota_format_type::qf_fmt_id"]
        [::core::mem::offset_of!(quota_format_type, qf_fmt_id) - 0usize];
    ["Offset of field: quota_format_type::qf_ops"]
        [::core::mem::offset_of!(quota_format_type, qf_ops) - 8usize];
    ["Offset of field: quota_format_type::qf_owner"]
        [::core::mem::offset_of!(quota_format_type, qf_owner) - 16usize];
    ["Offset of field: quota_format_type::qf_next"]
        [::core::mem::offset_of!(quota_format_type, qf_next) - 24usize];
};
impl Default for quota_format_type {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct quota_info {
    pub flags: core::ffi::c_uint,
    pub dqio_sem: rw_semaphore,
    pub files: [*mut inode; 3usize],
    pub info: [mem_dqinfo; 3usize],
    pub ops: [*const quota_format_ops; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of quota_info"][::core::mem::size_of::<quota_info>() - 312usize];
    ["Alignment of quota_info"][::core::mem::align_of::<quota_info>() - 8usize];
    ["Offset of field: quota_info::flags"][::core::mem::offset_of!(quota_info, flags) - 0usize];
    ["Offset of field: quota_info::dqio_sem"]
        [::core::mem::offset_of!(quota_info, dqio_sem) - 8usize];
    ["Offset of field: quota_info::files"][::core::mem::offset_of!(quota_info, files) - 48usize];
    ["Offset of field: quota_info::info"][::core::mem::offset_of!(quota_info, info) - 72usize];
    ["Offset of field: quota_info::ops"][::core::mem::offset_of!(quota_info, ops) - 288usize];
};
impl Default for quota_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct writeback_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct readahead_control {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kiocb {
    pub ki_filp: *mut file,
    pub ki_pos: loff_t,
    pub ki_complete:
        ::core::option::Option<unsafe extern "C" fn(iocb: *mut kiocb, ret: core::ffi::c_long)>,
    pub private: *mut core::ffi::c_void,
    pub ki_flags: core::ffi::c_int,
    pub ki_ioprio: u16_,
    pub ki_waitq: *mut wait_page_queue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kiocb"][::core::mem::size_of::<kiocb>() - 48usize];
    ["Alignment of kiocb"][::core::mem::align_of::<kiocb>() - 8usize];
    ["Offset of field: kiocb::ki_filp"][::core::mem::offset_of!(kiocb, ki_filp) - 0usize];
    ["Offset of field: kiocb::ki_pos"][::core::mem::offset_of!(kiocb, ki_pos) - 8usize];
    ["Offset of field: kiocb::ki_complete"][::core::mem::offset_of!(kiocb, ki_complete) - 16usize];
    ["Offset of field: kiocb::private"][::core::mem::offset_of!(kiocb, private) - 24usize];
    ["Offset of field: kiocb::ki_flags"][::core::mem::offset_of!(kiocb, ki_flags) - 32usize];
    ["Offset of field: kiocb::ki_ioprio"][::core::mem::offset_of!(kiocb, ki_ioprio) - 36usize];
    ["Offset of field: kiocb::ki_waitq"][::core::mem::offset_of!(kiocb, ki_waitq) - 40usize];
};
impl Default for kiocb {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct address_space_operations {
    pub writepage: ::core::option::Option<
        unsafe extern "C" fn(page: *mut page, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub read_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file, arg2: *mut folio) -> core::ffi::c_int,
    >,
    pub writepages: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            arg2: *mut writeback_control,
        ) -> core::ffi::c_int,
    >,
    pub dirty_folio: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut folio) -> bool_,
    >,
    pub readahead: ::core::option::Option<unsafe extern "C" fn(arg1: *mut readahead_control)>,
    pub write_begin: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            pagep: *mut *mut page,
            fsdata: *mut *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub write_end: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file,
            mapping: *mut address_space,
            pos: loff_t,
            len: core::ffi::c_uint,
            copied: core::ffi::c_uint,
            page: *mut page,
            fsdata: *mut core::ffi::c_void,
        ) -> core::ffi::c_int,
    >,
    pub bmap: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: sector_t) -> sector_t,
    >,
    pub invalidate_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, offset: usize, len: usize)>,
    pub release_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio, arg2: gfp_t) -> bool_>,
    pub free_folio: ::core::option::Option<unsafe extern "C" fn(folio: *mut folio)>,
    pub direct_IO: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut kiocb, iter: *mut iov_iter) -> isize,
    >,
    pub migrate_folio: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut address_space,
            dst: *mut folio,
            src: *mut folio,
            arg2: migrate_mode,
        ) -> core::ffi::c_int,
    >,
    pub launder_folio:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut folio) -> core::ffi::c_int>,
    pub is_partially_uptodate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, from: usize, count: usize) -> bool_,
    >,
    pub is_dirty_writeback: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut folio, dirty: *mut bool_, wb: *mut bool_),
    >,
    pub error_remove_page: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut address_space, arg2: *mut page) -> core::ffi::c_int,
    >,
    pub swap_activate: ::core::option::Option<
        unsafe extern "C" fn(
            sis: *mut swap_info_struct,
            file: *mut file,
            span: *mut sector_t,
        ) -> core::ffi::c_int,
    >,
    pub swap_deactivate: ::core::option::Option<unsafe extern "C" fn(file: *mut file)>,
    pub swap_rw: ::core::option::Option<
        unsafe extern "C" fn(iocb: *mut kiocb, iter: *mut iov_iter) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of address_space_operations"]
        [::core::mem::size_of::<address_space_operations>() - 160usize];
    ["Alignment of address_space_operations"]
        [::core::mem::align_of::<address_space_operations>() - 8usize];
    ["Offset of field: address_space_operations::writepage"]
        [::core::mem::offset_of!(address_space_operations, writepage) - 0usize];
    ["Offset of field: address_space_operations::read_folio"]
        [::core::mem::offset_of!(address_space_operations, read_folio) - 8usize];
    ["Offset of field: address_space_operations::writepages"]
        [::core::mem::offset_of!(address_space_operations, writepages) - 16usize];
    ["Offset of field: address_space_operations::dirty_folio"]
        [::core::mem::offset_of!(address_space_operations, dirty_folio) - 24usize];
    ["Offset of field: address_space_operations::readahead"]
        [::core::mem::offset_of!(address_space_operations, readahead) - 32usize];
    ["Offset of field: address_space_operations::write_begin"]
        [::core::mem::offset_of!(address_space_operations, write_begin) - 40usize];
    ["Offset of field: address_space_operations::write_end"]
        [::core::mem::offset_of!(address_space_operations, write_end) - 48usize];
    ["Offset of field: address_space_operations::bmap"]
        [::core::mem::offset_of!(address_space_operations, bmap) - 56usize];
    ["Offset of field: address_space_operations::invalidate_folio"]
        [::core::mem::offset_of!(address_space_operations, invalidate_folio) - 64usize];
    ["Offset of field: address_space_operations::release_folio"]
        [::core::mem::offset_of!(address_space_operations, release_folio) - 72usize];
    ["Offset of field: address_space_operations::free_folio"]
        [::core::mem::offset_of!(address_space_operations, free_folio) - 80usize];
    ["Offset of field: address_space_operations::direct_IO"]
        [::core::mem::offset_of!(address_space_operations, direct_IO) - 88usize];
    ["Offset of field: address_space_operations::migrate_folio"]
        [::core::mem::offset_of!(address_space_operations, migrate_folio) - 96usize];
    ["Offset of field: address_space_operations::launder_folio"]
        [::core::mem::offset_of!(address_space_operations, launder_folio) - 104usize];
    ["Offset of field: address_space_operations::is_partially_uptodate"]
        [::core::mem::offset_of!(address_space_operations, is_partially_uptodate) - 112usize];
    ["Offset of field: address_space_operations::is_dirty_writeback"]
        [::core::mem::offset_of!(address_space_operations, is_dirty_writeback) - 120usize];
    ["Offset of field: address_space_operations::error_remove_page"]
        [::core::mem::offset_of!(address_space_operations, error_remove_page) - 128usize];
    ["Offset of field: address_space_operations::swap_activate"]
        [::core::mem::offset_of!(address_space_operations, swap_activate) - 136usize];
    ["Offset of field: address_space_operations::swap_deactivate"]
        [::core::mem::offset_of!(address_space_operations, swap_deactivate) - 144usize];
    ["Offset of field: address_space_operations::swap_rw"]
        [::core::mem::offset_of!(address_space_operations, swap_rw) - 152usize];
};
#[doc = " struct address_space - Contents of a cacheable, mappable object.\n @host: Owner, either the inode or the block_device.\n @i_pages: Cached pages.\n @invalidate_lock: Guards coherency between page cache contents and\n   file offset->disk block mappings in the filesystem during invalidates.\n   It is also used to block modification of page cache contents through\n   memory mappings.\n @gfp_mask: Memory allocation flags to use for allocating pages.\n @i_mmap_writable: Number of VM_SHARED mappings.\n @nr_thps: Number of THPs in the pagecache (non-shmem only).\n @i_mmap: Tree of private and shared mappings.\n @i_mmap_rwsem: Protects @i_mmap and @i_mmap_writable.\n @nrpages: Number of page entries, protected by the i_pages lock.\n @writeback_index: Writeback starts here.\n @a_ops: Methods.\n @flags: Error bits and flags (AS_*).\n @wb_err: The most recent error which has occurred.\n @private_lock: For use by the owner of the address_space.\n @private_list: For use by the owner of the address_space.\n @private_data: For use by the owner of the address_space."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct address_space {
    pub host: *mut inode,
    pub i_pages: xarray,
    pub invalidate_lock: rw_semaphore,
    pub gfp_mask: gfp_t,
    pub i_mmap_writable: atomic_t,
    pub i_mmap: rb_root_cached,
    pub i_mmap_rwsem: rw_semaphore,
    pub nrpages: core::ffi::c_ulong,
    pub writeback_index: core::ffi::c_ulong,
    pub a_ops: *const address_space_operations,
    pub flags: core::ffi::c_ulong,
    pub wb_err: errseq_t,
    pub private_lock: spinlock_t,
    pub private_list: list_head,
    pub private_data: *mut core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of address_space"][::core::mem::size_of::<address_space>() - 192usize];
    ["Alignment of address_space"][::core::mem::align_of::<address_space>() - 8usize];
    ["Offset of field: address_space::host"][::core::mem::offset_of!(address_space, host) - 0usize];
    ["Offset of field: address_space::i_pages"]
        [::core::mem::offset_of!(address_space, i_pages) - 8usize];
    ["Offset of field: address_space::invalidate_lock"]
        [::core::mem::offset_of!(address_space, invalidate_lock) - 24usize];
    ["Offset of field: address_space::gfp_mask"]
        [::core::mem::offset_of!(address_space, gfp_mask) - 64usize];
    ["Offset of field: address_space::i_mmap_writable"]
        [::core::mem::offset_of!(address_space, i_mmap_writable) - 68usize];
    ["Offset of field: address_space::i_mmap"]
        [::core::mem::offset_of!(address_space, i_mmap) - 72usize];
    ["Offset of field: address_space::i_mmap_rwsem"]
        [::core::mem::offset_of!(address_space, i_mmap_rwsem) - 88usize];
    ["Offset of field: address_space::nrpages"]
        [::core::mem::offset_of!(address_space, nrpages) - 128usize];
    ["Offset of field: address_space::writeback_index"]
        [::core::mem::offset_of!(address_space, writeback_index) - 136usize];
    ["Offset of field: address_space::a_ops"]
        [::core::mem::offset_of!(address_space, a_ops) - 144usize];
    ["Offset of field: address_space::flags"]
        [::core::mem::offset_of!(address_space, flags) - 152usize];
    ["Offset of field: address_space::wb_err"]
        [::core::mem::offset_of!(address_space, wb_err) - 160usize];
    ["Offset of field: address_space::private_lock"]
        [::core::mem::offset_of!(address_space, private_lock) - 164usize];
    ["Offset of field: address_space::private_list"]
        [::core::mem::offset_of!(address_space, private_list) - 168usize];
    ["Offset of field: address_space::private_data"]
        [::core::mem::offset_of!(address_space, private_data) - 184usize];
};
impl Default for address_space {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct posix_acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsnotify_mark_connector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct inode {
    pub i_mode: umode_t,
    pub i_opflags: core::ffi::c_ushort,
    pub i_uid: kuid_t,
    pub i_gid: kgid_t,
    pub i_flags: core::ffi::c_uint,
    pub i_acl: *mut posix_acl,
    pub i_default_acl: *mut posix_acl,
    pub i_op: *const inode_operations,
    pub i_sb: *mut super_block,
    pub i_mapping: *mut address_space,
    pub i_security: *mut core::ffi::c_void,
    pub i_ino: core::ffi::c_ulong,
    pub __bindgen_anon_1: inode__bindgen_ty_1,
    pub i_rdev: dev_t,
    pub i_size: loff_t,
    pub i_atime: timespec64,
    pub i_mtime: timespec64,
    pub i_ctime: timespec64,
    pub i_lock: spinlock_t,
    pub i_bytes: core::ffi::c_ushort,
    pub i_blkbits: u8_,
    pub i_write_hint: u8_,
    pub i_blocks: blkcnt_t,
    pub i_state: core::ffi::c_ulong,
    pub i_rwsem: rw_semaphore,
    pub dirtied_when: core::ffi::c_ulong,
    pub dirtied_time_when: core::ffi::c_ulong,
    pub i_hash: hlist_node,
    pub i_io_list: list_head,
    pub i_wb: *mut bdi_writeback,
    pub i_wb_frn_winner: core::ffi::c_int,
    pub i_wb_frn_avg_time: u16_,
    pub i_wb_frn_history: u16_,
    pub i_lru: list_head,
    pub i_sb_list: list_head,
    pub i_wb_list: list_head,
    pub __bindgen_anon_2: inode__bindgen_ty_2,
    pub i_version: atomic64_t,
    pub i_sequence: atomic64_t,
    pub i_count: atomic_t,
    pub i_dio_count: atomic_t,
    pub i_writecount: atomic_t,
    pub i_readcount: atomic_t,
    pub __bindgen_anon_3: inode__bindgen_ty_3,
    pub i_flctx: *mut file_lock_context,
    pub i_data: address_space,
    pub i_devices: list_head,
    pub __bindgen_anon_4: inode__bindgen_ty_4,
    pub i_generation: __u32,
    pub i_fsnotify_mask: __u32,
    pub i_fsnotify_marks: *mut fsnotify_mark_connector,
    pub i_private: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_1 {
    pub i_nlink: core::ffi::c_uint,
    pub __i_nlink: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_1"][::core::mem::size_of::<inode__bindgen_ty_1>() - 4usize];
    ["Alignment of inode__bindgen_ty_1"][::core::mem::align_of::<inode__bindgen_ty_1>() - 4usize];
    ["Offset of field: inode__bindgen_ty_1::i_nlink"]
        [::core::mem::offset_of!(inode__bindgen_ty_1, i_nlink) - 0usize];
    ["Offset of field: inode__bindgen_ty_1::__i_nlink"]
        [::core::mem::offset_of!(inode__bindgen_ty_1, __i_nlink) - 0usize];
};
impl Default for inode__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_2 {
    pub i_dentry: hlist_head,
    pub i_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_2"][::core::mem::size_of::<inode__bindgen_ty_2>() - 16usize];
    ["Alignment of inode__bindgen_ty_2"][::core::mem::align_of::<inode__bindgen_ty_2>() - 8usize];
    ["Offset of field: inode__bindgen_ty_2::i_dentry"]
        [::core::mem::offset_of!(inode__bindgen_ty_2, i_dentry) - 0usize];
    ["Offset of field: inode__bindgen_ty_2::i_rcu"]
        [::core::mem::offset_of!(inode__bindgen_ty_2, i_rcu) - 0usize];
};
impl Default for inode__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_3 {
    pub i_fop: *const file_operations,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_3"][::core::mem::size_of::<inode__bindgen_ty_3>() - 8usize];
    ["Alignment of inode__bindgen_ty_3"][::core::mem::align_of::<inode__bindgen_ty_3>() - 8usize];
    ["Offset of field: inode__bindgen_ty_3::i_fop"]
        [::core::mem::offset_of!(inode__bindgen_ty_3, i_fop) - 0usize];
    ["Offset of field: inode__bindgen_ty_3::free_inode"]
        [::core::mem::offset_of!(inode__bindgen_ty_3, free_inode) - 0usize];
};
impl Default for inode__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union inode__bindgen_ty_4 {
    pub i_pipe: *mut pipe_inode_info,
    pub i_cdev: *mut cdev,
    pub i_link: *mut core::ffi::c_char,
    pub i_dir_seq: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode__bindgen_ty_4"][::core::mem::size_of::<inode__bindgen_ty_4>() - 8usize];
    ["Alignment of inode__bindgen_ty_4"][::core::mem::align_of::<inode__bindgen_ty_4>() - 8usize];
    ["Offset of field: inode__bindgen_ty_4::i_pipe"]
        [::core::mem::offset_of!(inode__bindgen_ty_4, i_pipe) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_cdev"]
        [::core::mem::offset_of!(inode__bindgen_ty_4, i_cdev) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_link"]
        [::core::mem::offset_of!(inode__bindgen_ty_4, i_link) - 0usize];
    ["Offset of field: inode__bindgen_ty_4::i_dir_seq"]
        [::core::mem::offset_of!(inode__bindgen_ty_4, i_dir_seq) - 0usize];
};
impl Default for inode__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode"][::core::mem::size_of::<inode>() - 616usize];
    ["Alignment of inode"][::core::mem::align_of::<inode>() - 8usize];
    ["Offset of field: inode::i_mode"][::core::mem::offset_of!(inode, i_mode) - 0usize];
    ["Offset of field: inode::i_opflags"][::core::mem::offset_of!(inode, i_opflags) - 2usize];
    ["Offset of field: inode::i_uid"][::core::mem::offset_of!(inode, i_uid) - 4usize];
    ["Offset of field: inode::i_gid"][::core::mem::offset_of!(inode, i_gid) - 8usize];
    ["Offset of field: inode::i_flags"][::core::mem::offset_of!(inode, i_flags) - 12usize];
    ["Offset of field: inode::i_acl"][::core::mem::offset_of!(inode, i_acl) - 16usize];
    ["Offset of field: inode::i_default_acl"]
        [::core::mem::offset_of!(inode, i_default_acl) - 24usize];
    ["Offset of field: inode::i_op"][::core::mem::offset_of!(inode, i_op) - 32usize];
    ["Offset of field: inode::i_sb"][::core::mem::offset_of!(inode, i_sb) - 40usize];
    ["Offset of field: inode::i_mapping"][::core::mem::offset_of!(inode, i_mapping) - 48usize];
    ["Offset of field: inode::i_security"][::core::mem::offset_of!(inode, i_security) - 56usize];
    ["Offset of field: inode::i_ino"][::core::mem::offset_of!(inode, i_ino) - 64usize];
    ["Offset of field: inode::i_rdev"][::core::mem::offset_of!(inode, i_rdev) - 76usize];
    ["Offset of field: inode::i_size"][::core::mem::offset_of!(inode, i_size) - 80usize];
    ["Offset of field: inode::i_atime"][::core::mem::offset_of!(inode, i_atime) - 88usize];
    ["Offset of field: inode::i_mtime"][::core::mem::offset_of!(inode, i_mtime) - 104usize];
    ["Offset of field: inode::i_ctime"][::core::mem::offset_of!(inode, i_ctime) - 120usize];
    ["Offset of field: inode::i_lock"][::core::mem::offset_of!(inode, i_lock) - 136usize];
    ["Offset of field: inode::i_bytes"][::core::mem::offset_of!(inode, i_bytes) - 140usize];
    ["Offset of field: inode::i_blkbits"][::core::mem::offset_of!(inode, i_blkbits) - 142usize];
    ["Offset of field: inode::i_write_hint"]
        [::core::mem::offset_of!(inode, i_write_hint) - 143usize];
    ["Offset of field: inode::i_blocks"][::core::mem::offset_of!(inode, i_blocks) - 144usize];
    ["Offset of field: inode::i_state"][::core::mem::offset_of!(inode, i_state) - 152usize];
    ["Offset of field: inode::i_rwsem"][::core::mem::offset_of!(inode, i_rwsem) - 160usize];
    ["Offset of field: inode::dirtied_when"]
        [::core::mem::offset_of!(inode, dirtied_when) - 200usize];
    ["Offset of field: inode::dirtied_time_when"]
        [::core::mem::offset_of!(inode, dirtied_time_when) - 208usize];
    ["Offset of field: inode::i_hash"][::core::mem::offset_of!(inode, i_hash) - 216usize];
    ["Offset of field: inode::i_io_list"][::core::mem::offset_of!(inode, i_io_list) - 232usize];
    ["Offset of field: inode::i_wb"][::core::mem::offset_of!(inode, i_wb) - 248usize];
    ["Offset of field: inode::i_wb_frn_winner"]
        [::core::mem::offset_of!(inode, i_wb_frn_winner) - 256usize];
    ["Offset of field: inode::i_wb_frn_avg_time"]
        [::core::mem::offset_of!(inode, i_wb_frn_avg_time) - 260usize];
    ["Offset of field: inode::i_wb_frn_history"]
        [::core::mem::offset_of!(inode, i_wb_frn_history) - 262usize];
    ["Offset of field: inode::i_lru"][::core::mem::offset_of!(inode, i_lru) - 264usize];
    ["Offset of field: inode::i_sb_list"][::core::mem::offset_of!(inode, i_sb_list) - 280usize];
    ["Offset of field: inode::i_wb_list"][::core::mem::offset_of!(inode, i_wb_list) - 296usize];
    ["Offset of field: inode::i_version"][::core::mem::offset_of!(inode, i_version) - 328usize];
    ["Offset of field: inode::i_sequence"][::core::mem::offset_of!(inode, i_sequence) - 336usize];
    ["Offset of field: inode::i_count"][::core::mem::offset_of!(inode, i_count) - 344usize];
    ["Offset of field: inode::i_dio_count"][::core::mem::offset_of!(inode, i_dio_count) - 348usize];
    ["Offset of field: inode::i_writecount"]
        [::core::mem::offset_of!(inode, i_writecount) - 352usize];
    ["Offset of field: inode::i_readcount"][::core::mem::offset_of!(inode, i_readcount) - 356usize];
    ["Offset of field: inode::i_flctx"][::core::mem::offset_of!(inode, i_flctx) - 368usize];
    ["Offset of field: inode::i_data"][::core::mem::offset_of!(inode, i_data) - 376usize];
    ["Offset of field: inode::i_devices"][::core::mem::offset_of!(inode, i_devices) - 568usize];
    ["Offset of field: inode::i_generation"]
        [::core::mem::offset_of!(inode, i_generation) - 592usize];
    ["Offset of field: inode::i_fsnotify_mask"]
        [::core::mem::offset_of!(inode, i_fsnotify_mask) - 596usize];
    ["Offset of field: inode::i_fsnotify_marks"]
        [::core::mem::offset_of!(inode, i_fsnotify_marks) - 600usize];
    ["Offset of field: inode::i_private"][::core::mem::offset_of!(inode, i_private) - 608usize];
};
impl Default for inode {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fown_struct {
    pub lock: rwlock_t,
    pub pid: *mut pid,
    pub pid_type: pid_type,
    pub uid: kuid_t,
    pub euid: kuid_t,
    pub signum: core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fown_struct"][::core::mem::size_of::<fown_struct>() - 32usize];
    ["Alignment of fown_struct"][::core::mem::align_of::<fown_struct>() - 8usize];
    ["Offset of field: fown_struct::lock"][::core::mem::offset_of!(fown_struct, lock) - 0usize];
    ["Offset of field: fown_struct::pid"][::core::mem::offset_of!(fown_struct, pid) - 8usize];
    ["Offset of field: fown_struct::pid_type"]
        [::core::mem::offset_of!(fown_struct, pid_type) - 16usize];
    ["Offset of field: fown_struct::uid"][::core::mem::offset_of!(fown_struct, uid) - 20usize];
    ["Offset of field: fown_struct::euid"][::core::mem::offset_of!(fown_struct, euid) - 24usize];
    ["Offset of field: fown_struct::signum"]
        [::core::mem::offset_of!(fown_struct, signum) - 28usize];
};
impl Default for fown_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " struct file_ra_state - Track a file's readahead state.\n @start: Where the most recent readahead started.\n @size: Number of pages read in the most recent readahead.\n @async_size: Numer of pages that were/are not needed immediately\n      and so were/are genuinely \"ahead\".  Start next readahead when\n      the first of these pages is accessed.\n @ra_pages: Maximum size of a readahead request, copied from the bdi.\n @mmap_miss: How many mmap accesses missed in the page cache.\n @prev_pos: The last byte in the most recent read request.\n\n When this structure is passed to ->readahead(), the \"most recent\"\n readahead means the current readahead."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct file_ra_state {
    pub start: core::ffi::c_ulong,
    pub size: core::ffi::c_uint,
    pub async_size: core::ffi::c_uint,
    pub ra_pages: core::ffi::c_uint,
    pub mmap_miss: core::ffi::c_uint,
    pub prev_pos: loff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_ra_state"][::core::mem::size_of::<file_ra_state>() - 32usize];
    ["Alignment of file_ra_state"][::core::mem::align_of::<file_ra_state>() - 8usize];
    ["Offset of field: file_ra_state::start"]
        [::core::mem::offset_of!(file_ra_state, start) - 0usize];
    ["Offset of field: file_ra_state::size"][::core::mem::offset_of!(file_ra_state, size) - 8usize];
    ["Offset of field: file_ra_state::async_size"]
        [::core::mem::offset_of!(file_ra_state, async_size) - 12usize];
    ["Offset of field: file_ra_state::ra_pages"]
        [::core::mem::offset_of!(file_ra_state, ra_pages) - 16usize];
    ["Offset of field: file_ra_state::mmap_miss"]
        [::core::mem::offset_of!(file_ra_state, mmap_miss) - 20usize];
    ["Offset of field: file_ra_state::prev_pos"]
        [::core::mem::offset_of!(file_ra_state, prev_pos) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file {
    pub __bindgen_anon_1: file__bindgen_ty_1,
    pub f_path: path,
    pub f_inode: *mut inode,
    pub f_op: *const file_operations,
    pub f_lock: spinlock_t,
    pub f_count: atomic_long_t,
    pub f_flags: core::ffi::c_uint,
    pub f_mode: fmode_t,
    pub f_pos_lock: mutex,
    pub f_pos: loff_t,
    pub f_owner: fown_struct,
    pub f_cred: *const cred,
    pub f_ra: file_ra_state,
    pub f_version: u64_,
    pub f_security: *mut core::ffi::c_void,
    pub private_data: *mut core::ffi::c_void,
    pub f_ep: *mut hlist_head,
    pub f_mapping: *mut address_space,
    pub f_wb_err: errseq_t,
    pub f_sb_err: errseq_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file__bindgen_ty_1 {
    pub f_llist: llist_node,
    pub f_rcuhead: callback_head,
    pub f_iocb_flags: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file__bindgen_ty_1"][::core::mem::size_of::<file__bindgen_ty_1>() - 16usize];
    ["Alignment of file__bindgen_ty_1"][::core::mem::align_of::<file__bindgen_ty_1>() - 8usize];
    ["Offset of field: file__bindgen_ty_1::f_llist"]
        [::core::mem::offset_of!(file__bindgen_ty_1, f_llist) - 0usize];
    ["Offset of field: file__bindgen_ty_1::f_rcuhead"]
        [::core::mem::offset_of!(file__bindgen_ty_1, f_rcuhead) - 0usize];
    ["Offset of field: file__bindgen_ty_1::f_iocb_flags"]
        [::core::mem::offset_of!(file__bindgen_ty_1, f_iocb_flags) - 0usize];
};
impl Default for file__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file"][::core::mem::size_of::<file>() - 232usize];
    ["Alignment of file"][::core::mem::align_of::<file>() - 8usize];
    ["Offset of field: file::f_path"][::core::mem::offset_of!(file, f_path) - 16usize];
    ["Offset of field: file::f_inode"][::core::mem::offset_of!(file, f_inode) - 32usize];
    ["Offset of field: file::f_op"][::core::mem::offset_of!(file, f_op) - 40usize];
    ["Offset of field: file::f_lock"][::core::mem::offset_of!(file, f_lock) - 48usize];
    ["Offset of field: file::f_count"][::core::mem::offset_of!(file, f_count) - 56usize];
    ["Offset of field: file::f_flags"][::core::mem::offset_of!(file, f_flags) - 64usize];
    ["Offset of field: file::f_mode"][::core::mem::offset_of!(file, f_mode) - 68usize];
    ["Offset of field: file::f_pos_lock"][::core::mem::offset_of!(file, f_pos_lock) - 72usize];
    ["Offset of field: file::f_pos"][::core::mem::offset_of!(file, f_pos) - 104usize];
    ["Offset of field: file::f_owner"][::core::mem::offset_of!(file, f_owner) - 112usize];
    ["Offset of field: file::f_cred"][::core::mem::offset_of!(file, f_cred) - 144usize];
    ["Offset of field: file::f_ra"][::core::mem::offset_of!(file, f_ra) - 152usize];
    ["Offset of field: file::f_version"][::core::mem::offset_of!(file, f_version) - 184usize];
    ["Offset of field: file::f_security"][::core::mem::offset_of!(file, f_security) - 192usize];
    ["Offset of field: file::private_data"][::core::mem::offset_of!(file, private_data) - 200usize];
    ["Offset of field: file::f_ep"][::core::mem::offset_of!(file, f_ep) - 208usize];
    ["Offset of field: file::f_mapping"][::core::mem::offset_of!(file, f_mapping) - 216usize];
    ["Offset of field: file::f_wb_err"][::core::mem::offset_of!(file, f_wb_err) - 224usize];
    ["Offset of field: file::f_sb_err"][::core::mem::offset_of!(file, f_sb_err) - 228usize];
};
impl Default for file {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fl_owner_t = *mut core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct file_lock_operations {
    pub fl_copy_lock:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut file_lock, arg2: *mut file_lock)>,
    pub fl_release_private: ::core::option::Option<unsafe extern "C" fn(arg1: *mut file_lock)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_lock_operations"][::core::mem::size_of::<file_lock_operations>() - 16usize];
    ["Alignment of file_lock_operations"][::core::mem::align_of::<file_lock_operations>() - 8usize];
    ["Offset of field: file_lock_operations::fl_copy_lock"]
        [::core::mem::offset_of!(file_lock_operations, fl_copy_lock) - 0usize];
    ["Offset of field: file_lock_operations::fl_release_private"]
        [::core::mem::offset_of!(file_lock_operations, fl_release_private) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lock_manager_operations {
    pub lm_mod_owner: *mut core::ffi::c_void,
    pub lm_get_owner: ::core::option::Option<unsafe extern "C" fn(arg1: fl_owner_t) -> fl_owner_t>,
    pub lm_put_owner: ::core::option::Option<unsafe extern "C" fn(arg1: fl_owner_t)>,
    pub lm_notify: ::core::option::Option<unsafe extern "C" fn(arg1: *mut file_lock)>,
    pub lm_grant: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file_lock, arg2: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub lm_break: ::core::option::Option<unsafe extern "C" fn(arg1: *mut file_lock) -> bool_>,
    pub lm_change: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut file_lock,
            arg2: core::ffi::c_int,
            arg3: *mut list_head,
        ) -> core::ffi::c_int,
    >,
    pub lm_setup: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut file_lock, arg2: *mut *mut core::ffi::c_void),
    >,
    pub lm_breaker_owns_lease:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut file_lock) -> bool_>,
    pub lm_lock_expirable:
        ::core::option::Option<unsafe extern "C" fn(cfl: *mut file_lock) -> bool_>,
    pub lm_expire_lock: ::core::option::Option<unsafe extern "C" fn()>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lock_manager_operations"]
        [::core::mem::size_of::<lock_manager_operations>() - 88usize];
    ["Alignment of lock_manager_operations"]
        [::core::mem::align_of::<lock_manager_operations>() - 8usize];
    ["Offset of field: lock_manager_operations::lm_mod_owner"]
        [::core::mem::offset_of!(lock_manager_operations, lm_mod_owner) - 0usize];
    ["Offset of field: lock_manager_operations::lm_get_owner"]
        [::core::mem::offset_of!(lock_manager_operations, lm_get_owner) - 8usize];
    ["Offset of field: lock_manager_operations::lm_put_owner"]
        [::core::mem::offset_of!(lock_manager_operations, lm_put_owner) - 16usize];
    ["Offset of field: lock_manager_operations::lm_notify"]
        [::core::mem::offset_of!(lock_manager_operations, lm_notify) - 24usize];
    ["Offset of field: lock_manager_operations::lm_grant"]
        [::core::mem::offset_of!(lock_manager_operations, lm_grant) - 32usize];
    ["Offset of field: lock_manager_operations::lm_break"]
        [::core::mem::offset_of!(lock_manager_operations, lm_break) - 40usize];
    ["Offset of field: lock_manager_operations::lm_change"]
        [::core::mem::offset_of!(lock_manager_operations, lm_change) - 48usize];
    ["Offset of field: lock_manager_operations::lm_setup"]
        [::core::mem::offset_of!(lock_manager_operations, lm_setup) - 56usize];
    ["Offset of field: lock_manager_operations::lm_breaker_owns_lease"]
        [::core::mem::offset_of!(lock_manager_operations, lm_breaker_owns_lease) - 64usize];
    ["Offset of field: lock_manager_operations::lm_lock_expirable"]
        [::core::mem::offset_of!(lock_manager_operations, lm_lock_expirable) - 72usize];
    ["Offset of field: lock_manager_operations::lm_expire_lock"]
        [::core::mem::offset_of!(lock_manager_operations, lm_expire_lock) - 80usize];
};
impl Default for lock_manager_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlm_lockowner {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfs_lock_info {
    pub state: u32_,
    pub owner: *mut nlm_lockowner,
    pub list: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nfs_lock_info"][::core::mem::size_of::<nfs_lock_info>() - 32usize];
    ["Alignment of nfs_lock_info"][::core::mem::align_of::<nfs_lock_info>() - 8usize];
    ["Offset of field: nfs_lock_info::state"]
        [::core::mem::offset_of!(nfs_lock_info, state) - 0usize];
    ["Offset of field: nfs_lock_info::owner"]
        [::core::mem::offset_of!(nfs_lock_info, owner) - 8usize];
    ["Offset of field: nfs_lock_info::list"]
        [::core::mem::offset_of!(nfs_lock_info, list) - 16usize];
};
impl Default for nfs_lock_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfs4_lock_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfs4_lock_info {
    pub owner: *mut nfs4_lock_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nfs4_lock_info"][::core::mem::size_of::<nfs4_lock_info>() - 8usize];
    ["Alignment of nfs4_lock_info"][::core::mem::align_of::<nfs4_lock_info>() - 8usize];
    ["Offset of field: nfs4_lock_info::owner"]
        [::core::mem::offset_of!(nfs4_lock_info, owner) - 0usize];
};
impl Default for nfs4_lock_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lock {
    pub fl_blocker: *mut file_lock,
    pub fl_list: list_head,
    pub fl_link: hlist_node,
    pub fl_blocked_requests: list_head,
    pub fl_blocked_member: list_head,
    pub fl_owner: fl_owner_t,
    pub fl_flags: core::ffi::c_uint,
    pub fl_type: core::ffi::c_uchar,
    pub fl_pid: core::ffi::c_uint,
    pub fl_link_cpu: core::ffi::c_int,
    pub fl_wait: wait_queue_head_t,
    pub fl_file: *mut file,
    pub fl_start: loff_t,
    pub fl_end: loff_t,
    pub fl_fasync: *mut fasync_struct,
    pub fl_break_time: core::ffi::c_ulong,
    pub fl_downgrade_time: core::ffi::c_ulong,
    pub fl_ops: *const file_lock_operations,
    pub fl_lmops: *const lock_manager_operations,
    pub fl_u: file_lock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union file_lock__bindgen_ty_1 {
    pub nfs_fl: nfs_lock_info,
    pub nfs4_fl: nfs4_lock_info,
    pub afs: file_lock__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_lock__bindgen_ty_1__bindgen_ty_1 {
    pub link: list_head,
    pub state: core::ffi::c_int,
    pub debug_id: core::ffi::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_lock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<file_lock__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of file_lock__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<file_lock__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: file_lock__bindgen_ty_1__bindgen_ty_1::link"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1__bindgen_ty_1, link) - 0usize];
    ["Offset of field: file_lock__bindgen_ty_1__bindgen_ty_1::state"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1__bindgen_ty_1, state) - 16usize];
    ["Offset of field: file_lock__bindgen_ty_1__bindgen_ty_1::debug_id"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1__bindgen_ty_1, debug_id) - 20usize];
};
impl Default for file_lock__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_lock__bindgen_ty_1"]
        [::core::mem::size_of::<file_lock__bindgen_ty_1>() - 32usize];
    ["Alignment of file_lock__bindgen_ty_1"]
        [::core::mem::align_of::<file_lock__bindgen_ty_1>() - 8usize];
    ["Offset of field: file_lock__bindgen_ty_1::nfs_fl"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1, nfs_fl) - 0usize];
    ["Offset of field: file_lock__bindgen_ty_1::nfs4_fl"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1, nfs4_fl) - 0usize];
    ["Offset of field: file_lock__bindgen_ty_1::afs"]
        [::core::mem::offset_of!(file_lock__bindgen_ty_1, afs) - 0usize];
};
impl Default for file_lock__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_lock"][::core::mem::size_of::<file_lock>() - 216usize];
    ["Alignment of file_lock"][::core::mem::align_of::<file_lock>() - 8usize];
    ["Offset of field: file_lock::fl_blocker"]
        [::core::mem::offset_of!(file_lock, fl_blocker) - 0usize];
    ["Offset of field: file_lock::fl_list"][::core::mem::offset_of!(file_lock, fl_list) - 8usize];
    ["Offset of field: file_lock::fl_link"][::core::mem::offset_of!(file_lock, fl_link) - 24usize];
    ["Offset of field: file_lock::fl_blocked_requests"]
        [::core::mem::offset_of!(file_lock, fl_blocked_requests) - 40usize];
    ["Offset of field: file_lock::fl_blocked_member"]
        [::core::mem::offset_of!(file_lock, fl_blocked_member) - 56usize];
    ["Offset of field: file_lock::fl_owner"]
        [::core::mem::offset_of!(file_lock, fl_owner) - 72usize];
    ["Offset of field: file_lock::fl_flags"]
        [::core::mem::offset_of!(file_lock, fl_flags) - 80usize];
    ["Offset of field: file_lock::fl_type"][::core::mem::offset_of!(file_lock, fl_type) - 84usize];
    ["Offset of field: file_lock::fl_pid"][::core::mem::offset_of!(file_lock, fl_pid) - 88usize];
    ["Offset of field: file_lock::fl_link_cpu"]
        [::core::mem::offset_of!(file_lock, fl_link_cpu) - 92usize];
    ["Offset of field: file_lock::fl_wait"][::core::mem::offset_of!(file_lock, fl_wait) - 96usize];
    ["Offset of field: file_lock::fl_file"][::core::mem::offset_of!(file_lock, fl_file) - 120usize];
    ["Offset of field: file_lock::fl_start"]
        [::core::mem::offset_of!(file_lock, fl_start) - 128usize];
    ["Offset of field: file_lock::fl_end"][::core::mem::offset_of!(file_lock, fl_end) - 136usize];
    ["Offset of field: file_lock::fl_fasync"]
        [::core::mem::offset_of!(file_lock, fl_fasync) - 144usize];
    ["Offset of field: file_lock::fl_break_time"]
        [::core::mem::offset_of!(file_lock, fl_break_time) - 152usize];
    ["Offset of field: file_lock::fl_downgrade_time"]
        [::core::mem::offset_of!(file_lock, fl_downgrade_time) - 160usize];
    ["Offset of field: file_lock::fl_ops"][::core::mem::offset_of!(file_lock, fl_ops) - 168usize];
    ["Offset of field: file_lock::fl_lmops"]
        [::core::mem::offset_of!(file_lock, fl_lmops) - 176usize];
    ["Offset of field: file_lock::fl_u"][::core::mem::offset_of!(file_lock, fl_u) - 184usize];
};
impl Default for file_lock {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct file_lock_context {
    pub flc_lock: spinlock_t,
    pub flc_flock: list_head,
    pub flc_posix: list_head,
    pub flc_lease: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_lock_context"][::core::mem::size_of::<file_lock_context>() - 56usize];
    ["Alignment of file_lock_context"][::core::mem::align_of::<file_lock_context>() - 8usize];
    ["Offset of field: file_lock_context::flc_lock"]
        [::core::mem::offset_of!(file_lock_context, flc_lock) - 0usize];
    ["Offset of field: file_lock_context::flc_flock"]
        [::core::mem::offset_of!(file_lock_context, flc_flock) - 8usize];
    ["Offset of field: file_lock_context::flc_posix"]
        [::core::mem::offset_of!(file_lock_context, flc_posix) - 24usize];
    ["Offset of field: file_lock_context::flc_lease"]
        [::core::mem::offset_of!(file_lock_context, flc_lease) - 40usize];
};
impl Default for file_lock_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fasync_struct {
    pub fa_lock: rwlock_t,
    pub magic: core::ffi::c_int,
    pub fa_fd: core::ffi::c_int,
    pub fa_next: *mut fasync_struct,
    pub fa_file: *mut file,
    pub fa_rcu: callback_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fasync_struct"][::core::mem::size_of::<fasync_struct>() - 48usize];
    ["Alignment of fasync_struct"][::core::mem::align_of::<fasync_struct>() - 8usize];
    ["Offset of field: fasync_struct::fa_lock"]
        [::core::mem::offset_of!(fasync_struct, fa_lock) - 0usize];
    ["Offset of field: fasync_struct::magic"]
        [::core::mem::offset_of!(fasync_struct, magic) - 8usize];
    ["Offset of field: fasync_struct::fa_fd"]
        [::core::mem::offset_of!(fasync_struct, fa_fd) - 12usize];
    ["Offset of field: fasync_struct::fa_next"]
        [::core::mem::offset_of!(fasync_struct, fa_next) - 16usize];
    ["Offset of field: fasync_struct::fa_file"]
        [::core::mem::offset_of!(fasync_struct, fa_file) - 24usize];
    ["Offset of field: fasync_struct::fa_rcu"]
        [::core::mem::offset_of!(fasync_struct, fa_rcu) - 32usize];
};
impl Default for fasync_struct {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sb_writers {
    pub frozen: core::ffi::c_int,
    pub wait_unfrozen: wait_queue_head_t,
    pub rw_sem: [percpu_rw_semaphore; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sb_writers"][::core::mem::size_of::<sb_writers>() - 320usize];
    ["Alignment of sb_writers"][::core::mem::align_of::<sb_writers>() - 8usize];
    ["Offset of field: sb_writers::frozen"][::core::mem::offset_of!(sb_writers, frozen) - 0usize];
    ["Offset of field: sb_writers::wait_unfrozen"]
        [::core::mem::offset_of!(sb_writers, wait_unfrozen) - 8usize];
    ["Offset of field: sb_writers::rw_sem"][::core::mem::offset_of!(sb_writers, rw_sem) - 32usize];
};
impl Default for sb_writers {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct super_block {
    pub s_list: list_head,
    pub s_dev: dev_t,
    pub s_blocksize_bits: core::ffi::c_uchar,
    pub s_blocksize: core::ffi::c_ulong,
    pub s_maxbytes: loff_t,
    pub s_type: *mut file_system_type,
    pub s_op: *const super_operations,
    pub dq_op: *const dquot_operations,
    pub s_qcop: *const quotactl_ops,
    pub s_export_op: *const export_operations,
    pub s_flags: core::ffi::c_ulong,
    pub s_iflags: core::ffi::c_ulong,
    pub s_magic: core::ffi::c_ulong,
    pub s_root: *mut dentry,
    pub s_umount: rw_semaphore,
    pub s_count: core::ffi::c_int,
    pub s_active: atomic_t,
    pub s_security: *mut core::ffi::c_void,
    pub s_xattr: *mut *mut xattr_handler,
    pub s_roots: hlist_bl_head,
    pub s_mounts: list_head,
    pub s_bdev: *mut block_device,
    pub s_bdi: *mut backing_dev_info,
    pub s_mtd: *mut mtd_info,
    pub s_instances: hlist_node,
    pub s_quota_types: core::ffi::c_uint,
    pub s_dquot: quota_info,
    pub s_writers: sb_writers,
    pub s_fs_info: *mut core::ffi::c_void,
    pub s_time_gran: u32_,
    pub s_time_min: time64_t,
    pub s_time_max: time64_t,
    pub s_fsnotify_mask: __u32,
    pub s_fsnotify_marks: *mut fsnotify_mark_connector,
    pub s_id: [core::ffi::c_char; 32usize],
    pub s_uuid: uuid_t,
    pub s_max_links: core::ffi::c_uint,
    pub s_mode: fmode_t,
    pub s_vfs_rename_mutex: mutex,
    pub s_subtype: *const core::ffi::c_char,
    pub s_d_op: *const dentry_operations,
    pub s_shrink: shrinker,
    pub s_remove_count: atomic_long_t,
    pub s_fsnotify_connectors: atomic_long_t,
    pub s_readonly_remount: core::ffi::c_int,
    pub s_wb_err: errseq_t,
    pub s_dio_done_wq: *mut workqueue_struct,
    pub s_pins: hlist_head,
    pub s_user_ns: *mut user_namespace,
    pub s_dentry_lru: list_lru,
    pub s_inode_lru: list_lru,
    pub rcu: callback_head,
    pub destroy_work: work_struct,
    pub s_sync_lock: mutex,
    pub s_stack_depth: core::ffi::c_int,
    pub __bindgen_padding_0: [u32; 5usize],
    pub s_inode_list_lock: spinlock_t,
    pub s_inodes: list_head,
    pub s_inode_wblist_lock: spinlock_t,
    pub s_inodes_wb: list_head,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of super_block"][::core::mem::size_of::<super_block>() - 1408usize];
    ["Alignment of super_block"][::core::mem::align_of::<super_block>() - 64usize];
    ["Offset of field: super_block::s_list"][::core::mem::offset_of!(super_block, s_list) - 0usize];
    ["Offset of field: super_block::s_dev"][::core::mem::offset_of!(super_block, s_dev) - 16usize];
    ["Offset of field: super_block::s_blocksize_bits"]
        [::core::mem::offset_of!(super_block, s_blocksize_bits) - 20usize];
    ["Offset of field: super_block::s_blocksize"]
        [::core::mem::offset_of!(super_block, s_blocksize) - 24usize];
    ["Offset of field: super_block::s_maxbytes"]
        [::core::mem::offset_of!(super_block, s_maxbytes) - 32usize];
    ["Offset of field: super_block::s_type"]
        [::core::mem::offset_of!(super_block, s_type) - 40usize];
    ["Offset of field: super_block::s_op"][::core::mem::offset_of!(super_block, s_op) - 48usize];
    ["Offset of field: super_block::dq_op"][::core::mem::offset_of!(super_block, dq_op) - 56usize];
    ["Offset of field: super_block::s_qcop"]
        [::core::mem::offset_of!(super_block, s_qcop) - 64usize];
    ["Offset of field: super_block::s_export_op"]
        [::core::mem::offset_of!(super_block, s_export_op) - 72usize];
    ["Offset of field: super_block::s_flags"]
        [::core::mem::offset_of!(super_block, s_flags) - 80usize];
    ["Offset of field: super_block::s_iflags"]
        [::core::mem::offset_of!(super_block, s_iflags) - 88usize];
    ["Offset of field: super_block::s_magic"]
        [::core::mem::offset_of!(super_block, s_magic) - 96usize];
    ["Offset of field: super_block::s_root"]
        [::core::mem::offset_of!(super_block, s_root) - 104usize];
    ["Offset of field: super_block::s_umount"]
        [::core::mem::offset_of!(super_block, s_umount) - 112usize];
    ["Offset of field: super_block::s_count"]
        [::core::mem::offset_of!(super_block, s_count) - 152usize];
    ["Offset of field: super_block::s_active"]
        [::core::mem::offset_of!(super_block, s_active) - 156usize];
    ["Offset of field: super_block::s_security"]
        [::core::mem::offset_of!(super_block, s_security) - 160usize];
    ["Offset of field: super_block::s_xattr"]
        [::core::mem::offset_of!(super_block, s_xattr) - 168usize];
    ["Offset of field: super_block::s_roots"]
        [::core::mem::offset_of!(super_block, s_roots) - 176usize];
    ["Offset of field: super_block::s_mounts"]
        [::core::mem::offset_of!(super_block, s_mounts) - 184usize];
    ["Offset of field: super_block::s_bdev"]
        [::core::mem::offset_of!(super_block, s_bdev) - 200usize];
    ["Offset of field: super_block::s_bdi"][::core::mem::offset_of!(super_block, s_bdi) - 208usize];
    ["Offset of field: super_block::s_mtd"][::core::mem::offset_of!(super_block, s_mtd) - 216usize];
    ["Offset of field: super_block::s_instances"]
        [::core::mem::offset_of!(super_block, s_instances) - 224usize];
    ["Offset of field: super_block::s_quota_types"]
        [::core::mem::offset_of!(super_block, s_quota_types) - 240usize];
    ["Offset of field: super_block::s_dquot"]
        [::core::mem::offset_of!(super_block, s_dquot) - 248usize];
    ["Offset of field: super_block::s_writers"]
        [::core::mem::offset_of!(super_block, s_writers) - 560usize];
    ["Offset of field: super_block::s_fs_info"]
        [::core::mem::offset_of!(super_block, s_fs_info) - 880usize];
    ["Offset of field: super_block::s_time_gran"]
        [::core::mem::offset_of!(super_block, s_time_gran) - 888usize];
    ["Offset of field: super_block::s_time_min"]
        [::core::mem::offset_of!(super_block, s_time_min) - 896usize];
    ["Offset of field: super_block::s_time_max"]
        [::core::mem::offset_of!(super_block, s_time_max) - 904usize];
    ["Offset of field: super_block::s_fsnotify_mask"]
        [::core::mem::offset_of!(super_block, s_fsnotify_mask) - 912usize];
    ["Offset of field: super_block::s_fsnotify_marks"]
        [::core::mem::offset_of!(super_block, s_fsnotify_marks) - 920usize];
    ["Offset of field: super_block::s_id"][::core::mem::offset_of!(super_block, s_id) - 928usize];
    ["Offset of field: super_block::s_uuid"]
        [::core::mem::offset_of!(super_block, s_uuid) - 960usize];
    ["Offset of field: super_block::s_max_links"]
        [::core::mem::offset_of!(super_block, s_max_links) - 976usize];
    ["Offset of field: super_block::s_mode"]
        [::core::mem::offset_of!(super_block, s_mode) - 980usize];
    ["Offset of field: super_block::s_vfs_rename_mutex"]
        [::core::mem::offset_of!(super_block, s_vfs_rename_mutex) - 984usize];
    ["Offset of field: super_block::s_subtype"]
        [::core::mem::offset_of!(super_block, s_subtype) - 1016usize];
    ["Offset of field: super_block::s_d_op"]
        [::core::mem::offset_of!(super_block, s_d_op) - 1024usize];
    ["Offset of field: super_block::s_shrink"]
        [::core::mem::offset_of!(super_block, s_shrink) - 1032usize];
    ["Offset of field: super_block::s_remove_count"]
        [::core::mem::offset_of!(super_block, s_remove_count) - 1096usize];
    ["Offset of field: super_block::s_fsnotify_connectors"]
        [::core::mem::offset_of!(super_block, s_fsnotify_connectors) - 1104usize];
    ["Offset of field: super_block::s_readonly_remount"]
        [::core::mem::offset_of!(super_block, s_readonly_remount) - 1112usize];
    ["Offset of field: super_block::s_wb_err"]
        [::core::mem::offset_of!(super_block, s_wb_err) - 1116usize];
    ["Offset of field: super_block::s_dio_done_wq"]
        [::core::mem::offset_of!(super_block, s_dio_done_wq) - 1120usize];
    ["Offset of field: super_block::s_pins"]
        [::core::mem::offset_of!(super_block, s_pins) - 1128usize];
    ["Offset of field: super_block::s_user_ns"]
        [::core::mem::offset_of!(super_block, s_user_ns) - 1136usize];
    ["Offset of field: super_block::s_dentry_lru"]
        [::core::mem::offset_of!(super_block, s_dentry_lru) - 1144usize];
    ["Offset of field: super_block::s_inode_lru"]
        [::core::mem::offset_of!(super_block, s_inode_lru) - 1192usize];
    ["Offset of field: super_block::rcu"][::core::mem::offset_of!(super_block, rcu) - 1240usize];
    ["Offset of field: super_block::destroy_work"]
        [::core::mem::offset_of!(super_block, destroy_work) - 1256usize];
    ["Offset of field: super_block::s_sync_lock"]
        [::core::mem::offset_of!(super_block, s_sync_lock) - 1288usize];
    ["Offset of field: super_block::s_stack_depth"]
        [::core::mem::offset_of!(super_block, s_stack_depth) - 1320usize];
    ["Offset of field: super_block::s_inode_list_lock"]
        [::core::mem::offset_of!(super_block, s_inode_list_lock) - 1344usize];
    ["Offset of field: super_block::s_inodes"]
        [::core::mem::offset_of!(super_block, s_inodes) - 1352usize];
    ["Offset of field: super_block::s_inode_wblist_lock"]
        [::core::mem::offset_of!(super_block, s_inode_wblist_lock) - 1368usize];
    ["Offset of field: super_block::s_inodes_wb"]
        [::core::mem::offset_of!(super_block, s_inodes_wb) - 1376usize];
};
impl Default for super_block {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type filldir_t = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dir_context,
        arg2: *const core::ffi::c_char,
        arg3: core::ffi::c_int,
        arg4: loff_t,
        arg5: u64_,
        arg6: core::ffi::c_uint,
    ) -> bool_,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dir_context {
    pub actor: filldir_t,
    pub pos: loff_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dir_context"][::core::mem::size_of::<dir_context>() - 16usize];
    ["Alignment of dir_context"][::core::mem::align_of::<dir_context>() - 8usize];
    ["Offset of field: dir_context::actor"][::core::mem::offset_of!(dir_context, actor) - 0usize];
    ["Offset of field: dir_context::pos"][::core::mem::offset_of!(dir_context, pos) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cmd {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct inode_operations {
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: core::ffi::c_uint,
        ) -> *mut dentry,
    >,
    pub get_link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut delayed_call,
        ) -> *const core::ffi::c_char,
    >,
    pub permission: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub get_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: core::ffi::c_int,
            arg3: bool_,
        ) -> *mut posix_acl,
    >,
    pub readlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut core::ffi::c_char,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: bool_,
        ) -> core::ffi::c_int,
    >,
    pub link: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut dentry,
            arg2: *mut inode,
            arg3: *mut dentry,
        ) -> core::ffi::c_int,
    >,
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub symlink: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *const core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub mkdir: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub rmdir: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub mknod: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: umode_t,
            arg5: dev_t,
        ) -> core::ffi::c_int,
    >,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut dentry,
            arg4: *mut inode,
            arg5: *mut dentry,
            arg6: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub setattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut dentry,
            arg3: *mut iattr,
        ) -> core::ffi::c_int,
    >,
    pub getattr: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *const path,
            arg3: *mut kstat,
            arg4: u32_,
            arg5: core::ffi::c_uint,
        ) -> core::ffi::c_int,
    >,
    pub listxattr: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut core::ffi::c_char, arg3: usize) -> isize,
    >,
    pub fiemap: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut fiemap_extent_info,
            start: u64_,
            len: u64_,
        ) -> core::ffi::c_int,
    >,
    pub update_time: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut timespec64,
            arg3: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub atomic_open: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut inode,
            arg2: *mut dentry,
            arg3: *mut file,
            open_flag: core::ffi::c_uint,
            create_mode: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub tmpfile: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut file,
            arg4: umode_t,
        ) -> core::ffi::c_int,
    >,
    pub set_acl: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut user_namespace,
            arg2: *mut inode,
            arg3: *mut posix_acl,
            arg4: core::ffi::c_int,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_set: ::core::option::Option<
        unsafe extern "C" fn(
            mnt_userns: *mut user_namespace,
            dentry: *mut dentry,
            fa: *mut fileattr,
        ) -> core::ffi::c_int,
    >,
    pub fileattr_get: ::core::option::Option<
        unsafe extern "C" fn(dentry: *mut dentry, fa: *mut fileattr) -> core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inode_operations"][::core::mem::size_of::<inode_operations>() - 192usize];
    ["Alignment of inode_operations"][::core::mem::align_of::<inode_operations>() - 64usize];
    ["Offset of field: inode_operations::lookup"]
        [::core::mem::offset_of!(inode_operations, lookup) - 0usize];
    ["Offset of field: inode_operations::get_link"]
        [::core::mem::offset_of!(inode_operations, get_link) - 8usize];
    ["Offset of field: inode_operations::permission"]
        [::core::mem::offset_of!(inode_operations, permission) - 16usize];
    ["Offset of field: inode_operations::get_acl"]
        [::core::mem::offset_of!(inode_operations, get_acl) - 24usize];
    ["Offset of field: inode_operations::readlink"]
        [::core::mem::offset_of!(inode_operations, readlink) - 32usize];
    ["Offset of field: inode_operations::create"]
        [::core::mem::offset_of!(inode_operations, create) - 40usize];
    ["Offset of field: inode_operations::link"]
        [::core::mem::offset_of!(inode_operations, link) - 48usize];
    ["Offset of field: inode_operations::unlink"]
        [::core::mem::offset_of!(inode_operations, unlink) - 56usize];
    ["Offset of field: inode_operations::symlink"]
        [::core::mem::offset_of!(inode_operations, symlink) - 64usize];
    ["Offset of field: inode_operations::mkdir"]
        [::core::mem::offset_of!(inode_operations, mkdir) - 72usize];
    ["Offset of field: inode_operations::rmdir"]
        [::core::mem::offset_of!(inode_operations, rmdir) - 80usize];
    ["Offset of field: inode_operations::mknod"]
        [::core::mem::offset_of!(inode_operations, mknod) - 88usize];
    ["Offset of field: inode_operations::rename"]
        [::core::mem::offset_of!(inode_operations, rename) - 96usize];
    ["Offset of field: inode_operations::setattr"]
        [::core::mem::offset_of!(inode_operations, setattr) - 104usize];
    ["Offset of field: inode_operations::getattr"]
        [::core::mem::offset_of!(inode_operations, getattr) - 112usize];
    ["Offset of field: inode_operations::listxattr"]
        [::core::mem::offset_of!(inode_operations, listxattr) - 120usize];
    ["Offset of field: inode_operations::fiemap"]
        [::core::mem::offset_of!(inode_operations, fiemap) - 128usize];
    ["Offset of field: inode_operations::update_time"]
        [::core::mem::offset_of!(inode_operations, update_time) - 136usize];
    ["Offset of field: inode_operations::atomic_open"]
        [::core::mem::offset_of!(inode_operations, atomic_open) - 144usize];
    ["Offset of field: inode_operations::tmpfile"]
        [::core::mem::offset_of!(inode_operations, tmpfile) - 152usize];
    ["Offset of field: inode_operations::set_acl"]
        [::core::mem::offset_of!(inode_operations, set_acl) - 160usize];
    ["Offset of field: inode_operations::fileattr_set"]
        [::core::mem::offset_of!(inode_operations, fileattr_set) - 168usize];
    ["Offset of field: inode_operations::fileattr_get"]
        [::core::mem::offset_of!(inode_operations, fileattr_get) - 176usize];
};
impl Default for inode_operations {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct super_operations {
    pub alloc_inode:
        ::core::option::Option<unsafe extern "C" fn(sb: *mut super_block) -> *mut inode>,
    pub destroy_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub free_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub dirty_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode, flags: core::ffi::c_int)>,
    pub write_inode: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut inode, wbc: *mut writeback_control) -> core::ffi::c_int,
    >,
    pub drop_inode:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> core::ffi::c_int>,
    pub evict_inode: ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode)>,
    pub put_super: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub sync_fs: ::core::option::Option<
        unsafe extern "C" fn(sb: *mut super_block, wait: core::ffi::c_int) -> core::ffi::c_int,
    >,
    pub freeze_super:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub freeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub thaw_super:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub unfreeze_fs:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block) -> core::ffi::c_int>,
    pub statfs: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut dentry, arg2: *mut kstatfs) -> core::ffi::c_int,
    >,
    pub remount_fs: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut core::ffi::c_int,
            arg3: *mut core::ffi::c_char,
        ) -> core::ffi::c_int,
    >,
    pub umount_begin: ::core::option::Option<unsafe extern "C" fn(arg1: *mut super_block)>,
    pub show_options: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_devname: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_path: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub show_stats: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut seq_file, arg2: *mut dentry) -> core::ffi::c_int,
    >,
    pub quota_read: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *mut core::ffi::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub quota_write: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: core::ffi::c_int,
            arg3: *const core::ffi::c_char,
            arg4: usize,
            arg5: loff_t,
        ) -> isize,
    >,
    pub get_dquots:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut inode) -> *mut *mut dquot>,
    pub nr_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
    pub free_cached_objects: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut super_block,
            arg2: *mut shrink_control,
        ) -> core::ffi::c_long,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of super_operations"][::core::mem::size_of::<super_operations>() - 200usize];
    ["Alignment of super_operations"][::core::mem::align_of::<super_operations>() - 8usize];
    ["Offset of field: super_operations::alloc_inode"]
        [::core::mem::offset_of!(super_operations, alloc_inode) - 0usize];
    ["Offset of field: super_operations::destroy_inode"]
        [::core::mem::offset_of!(super_operations, destroy_inode) - 8usize];
    ["Offset of field: super_operations::free_inode"]
        [::core::mem::offset_of!(super_operations, free_inode) - 16usize];
    ["Offset of field: super_operations::dirty_inode"]
        [::core::mem::offset_of!(super_operations, dirty_inode) - 24usize];
    ["Offset of field: super_operations::write_inode"]
        [::core::mem::offset_of!(super_operations, write_inode) - 32usize];
    ["Offset of field: super_operations::drop_inode"]
        [::core::mem::offset_of!(super_operations, drop_inode) - 40usize];
    ["Offset of field: super_operations::evict_inode"]
        [::core::mem::offset_of!(super_operations, evict_inode) - 48usize];
    ["Offset of field: super_operations::put_super"]
        [::core::mem::offset_of!(super_operations, put_super) - 56usize];
    ["Offset of field: super_operations::sync_fs"]
        [::core::mem::offset_of!(super_operations, sync_fs) - 64usize];
    ["Offset of field: super_operations::freeze_super"]
        [::core::mem::offset_of!(super_operations, freeze_super) - 72usize];
    ["Offset of field: super_operations::freeze_fs"]
        [::core::mem::offset_of!(super_operations, freeze_fs) - 80usize];
    ["Offset of field: super_operations::thaw_super"]
        [::core::mem::offset_of!(super_operations, thaw_super) - 88usize];
    ["Offset of field: super_operations::unfreeze_fs"]
        [::core::mem::offset_of!(super_operations, unfreeze_fs) - 96usize];
    ["Offset of field: super_operations::statfs"]
        [::core::mem::offset_of!(super_operations, statfs) - 104usize];
    ["Offset of field: super_operations::remount_fs"]
        [::core::mem::offset_of!(super_operations, remount_fs) - 112usize];
    ["Offset of field: super_operations::umount_begin"]
        [::core::mem::offset_of!(super_operations, umount_begin) - 120usize];
    ["Offset of field: super_operations::show_options"]
        [::core::mem::offset_of!(super_operations, show_options) - 128usize];
    ["Offset of field: super_operations::show_devname"]
        [::core::mem::offset_of!(super_operations, show_devname) - 136usize];
    ["Offset of field: super_operations::show_path"]
        [::core::mem::offset_of!(super_operations, show_path) - 144usize];
    ["Offset of field: super_operations::show_stats"]
        [::core::mem::offset_of!(super_operations, show_stats) - 152usize];
    ["Offset of field: super_operations::quota_read"]
        [::core::mem::offset_of!(super_operations, quota_read) - 160usize];
    ["Offset of field: super_operations::quota_write"]
        [::core::mem::offset_of!(super_operations, quota_write) - 168usize];
    ["Offset of field: super_operations::get_dquots"]
        [::core::mem::offset_of!(super_operations, get_dquots) - 176usize];
    ["Offset of field: super_operations::nr_cached_objects"]
        [::core::mem::offset_of!(super_operations, nr_cached_objects) - 184usize];
    ["Offset of field: super_operations::free_cached_objects"]
        [::core::mem::offset_of!(super_operations, free_cached_objects) - 192usize];
};
extern "C" {
    pub fn mount_nodev(
        fs_type: *mut file_system_type,
        flags: core::ffi::c_int,
        data: *mut core::ffi::c_void,
        fill_super: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut super_block,
                arg2: *mut core::ffi::c_void,
                arg3: core::ffi::c_int,
            ) -> core::ffi::c_int,
        >,
    ) -> *mut dentry;
}
extern "C" {
    pub fn kill_litter_super(sb: *mut super_block);
}
extern "C" {
    pub fn register_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_filesystem(arg1: *mut file_system_type) -> core::ffi::c_int;
}
extern "C" {
    pub fn alloc_chrdev_region(
        arg1: *mut dev_t,
        arg2: core::ffi::c_uint,
        arg3: core::ffi::c_uint,
        arg4: *const core::ffi::c_char,
    ) -> core::ffi::c_int;
}
extern "C" {
    pub fn unregister_chrdev_region(arg1: dev_t, arg2: core::ffi::c_uint);
}
pub const BINDINGS_GFP_KERNEL: gfp_t = 3264;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct module_sect_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct module_notes_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct trace_event_call {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct trace_eval_map {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct static_call_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct static_key_mod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct uprobe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldt_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct page_pool {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct userfaultfd_ctx {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct anon_vma {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linux_binfmt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mmu_notifier_subscriptions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rt_rq {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rt_mutex_waiter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct compat_robust_list_head {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ftrace_ret_stack {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct request_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kernfs_root {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct module_param_attrs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct assoc_array_ptr {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct key_user {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tty_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct taskstats {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct tty_audit_buf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait_page_queue {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xattr_handler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct block_device {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mtd_info {
    pub _address: u8,
}
